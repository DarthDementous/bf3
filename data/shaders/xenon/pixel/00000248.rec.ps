      00956006 00001200     	EXEC ADDR(0x6) CNT(0x6) BOOL_ADDR(0x80)
06: b818a0a1 1f1ff1ff 00004000	      FETCH:	SAMPLE	R10.___x = R5.zwz CONST(1) VALID_ONLY ARBITRARY(2x4_SYM) LOCATION(CENTROID)
07: 102890a1 1f1fffd9 00004000	      FETCH:	SAMPLE	R9.yw__ = R5.xyx CONST(2) VALID_ONLY ARBITRARY(2x4_SYM) LOCATION(CENTROID)
08: 100880a1 1f1ff688 00004000	      FETCH:	SAMPLE	R8.xyzw = R5.xyx CONST(0) VALID_ONLY ARBITRARY(2x4_SYM) LOCATION(CENTROID)
09: 14080607 001b6c1b a0000702	   (S)ALU:	ADDv	R7.___w = R0.wwww, C263.xxxx
0a: 04880100 001bb1c6 80010707	      ALU:	ADDv	R0.___w = R1.wwww, C263.yyyy
                          						    	ADD_PREVs	R1.___w = C263.zzzz
0b: b81c0b0b 041bac43 80070405	      ALU:	ADDv	R11.__zw = -R7.wwww, C260.xxxy
                          						    	SUB_CONST_0	R11.x___ = C261.x, R0.w
      0000600c 00001200     	EXEC ADDR(0xc) CNT(0x6) BOOL_ADDR(0x80)
0c: b82c0b05 041bac83 80010605	      ALU:	ADDv	R5.__zw = -R1.wwww, C262.xxxy
                          						    	SUB_CONST_0	R11._y__ = C261.y, R0.w
0d: c803060c 00b06c1b 8b09fffe	      ALU:	MULADDv	R12.xy__ = C510.wwww, R9.xyyy, C511.xxxx
0e: 08270a09 0062626c e006060c	      ALU:	ADDv	R9.xyz_ = R6.zyxx, R6.zyxx
                          						    	MULs	R10._y__ = R12.xxxx
0f: 08430a05 001a1ab1 e105050c	      ALU:	MULv	R5.xy__ = R5.zwww, R5.zwww
                          						    	MULs	R10.__z_ = R12.yyyy
10: c8080607 00b3b3b1 f10b0b05	      ALU:	DOT2ADDv	R7.___w = R5.yyyy, R11.wyyy, R11.wyyy
11: c8080601 006e6e6c f10b0b05	      ALU:	DOT2ADDv	R1.___w = R5.xxxx, R11.zxxx, R11.zxxx
      00006012 00001200     	EXEC ADDR(0x12) CNT(0x6) BOOL_ADDR(0x80)
12: 58130a05 0419b11b a00afe81	      ALU:	ADDv	R5.xy__ = -R10.ywww, C510.yyyy
                          						    	RECIPSQ_IEEE	R10.x___ = abs(R1).wwww
13: 58280a01 026cc61b e0050a87	      ALU:	ADDv	R1.___w = R5.xxxx, -R10.zzzz
                          						    	RECIPSQ_IEEE	R10._y__ = abs(R7).wwww
14: a04c0c05 0006ac1b e1050a81	      ALU:	MULv	R5.__zw = R5.zzzw, R10.xxxy
                          						    	SQRT_IEEE	R12.__z_ = abs(R1).wwww
15: c8080601 00bebe00 f00c0200	      ALU:	DOT3v	R1.___w = R12.zxyy, R2.zxyy
16: c8020601 00bebe00 f00c0100	      ALU:	DOT3v	R1._y__ = R12.zxyy, R1.zxyy
17: 14010601 00bebe1b f00c0008	      ALU:	DOT3v	R1.x___ = R12.zxyy, R0.zxyy
      00006018 00001200     	EXEC ADDR(0x18) CNT(0x6) BOOL_ADDR(0x80)
18: 0c110600 00bfbf1b f0010106	      ALU:	DOT3v	R0.x___ = R1.wxyy, R1.wxyy
                          						    	MUL_PREVs	R6.x___ = R6.wwww
19: 582f0602 000dad6c e10b0a80	      ALU:	MULv	R2 = R11.yxzw, R10.yxxy
                          						    	RECIPSQ_IEEE	R6._y__ = abs(R0).xxxx
1a: 14070600 00bfb16c e1010606	      ALU:	MULv	R0.xyz_ = R1.wxyy, R6.yyyy
1b: 0c830606 00c76cb1 e1050005	      ALU:	MULv	R6.xy__ = R5.wzzz, R0.xxxx
                          						    	MUL_PREVs	R6.___w = R5.yyyy
1c: c9010606 006fc56c f1020006	      ALU:	DOT2ADDv	R6.x___ = R6.xxxx, R2.wxxx, R0.yzzz CLAMP
1d: c9020606 00b2c5b1 f1020006	      ALU:	DOT2ADDv	R6._y__ = R6.yyyy, R2.zyyy, R0.yzzz CLAMP
      0000601e 00001200     	EXEC ADDR(0x1e) CNT(0x6) BOOL_ADDR(0x80)
1e: a8270500 00626c45 200d0002	      ALU:	ADDv	R0.xyz_ = C269.zyxx, C256.xxxx
                          						    	MUL_CONST_0	R5._y__ = C258.x, R6.y
1f: a8170500 00c06245 e0000701	      ALU:	ADDv	R0.xyz_ = R0.xyzz, R7.zyxx
                          						    	MUL_CONST_0	R5.x___ = C257.x, R6.y
20: a8170702 0062c084 e1090801	      ALU:	MULv	R2.xyz_ = R9.zyxx, R8.xyzz
                          						    	MUL_CONST_0	R7.x___ = C257.y, R6.x
21: a8240707 006cb184 a1060302	      ALU:	MULv	R7.__z_ = R6.xxxx, C259.yyyy
                          						    	MUL_CONST_0	R7._y__ = C258.y, R6.x
22: a8470507 00c0b145 e1070303	      ALU:	MULv	R7.xyz_ = R7.xyzz, R3.yyyy
                          						    	MUL_CONST_0	R5.__z_ = C259.x, R6.y
23: c8070606 00c06cc0 eb050307	      ALU:	MULADDv	R6.xyz_ = R7.xyzz, R5.xyzz, R3.xxxx
      00002024 00001000     	EXEC ADDR(0x24) CNT(0x2)
24: 74070606 0062626c c1020609	      ALU:	MULv	R6.xyz_ = R2.zyxx, R6.zyxx
25: c8070606 00c06262 eb020006	      ALU:	MULADDv	R6.xyz_ = R6.zyxx, R2.xyzz, R0.zyxx
      0000400a 0000b000     	COND_JMP ADDR(0xa) DIR(0) COND(0)
      00006026 00001200     	EXEC ADDR(0x26) CNT(0x6) BOOL_ADDR(0x80)
26: c8070602 04626200 a0040700	      ALU:	ADDv	R2.xyz_ = -R4.zyxx, C263.zyxx
27: c8010600 00b4b400 f0020200	      ALU:	DOT3v	R0.x___ = R2.xzyy, R2.xzyy
28: 59180000 00bfbe6c b0010880	      ALU:	DOT3v	R0.___w = R1.wxyy, C264.zxyy CLAMP
                          						    	RECIPSQ_IEEE	R0.x___ = abs(R0).xxxx
29: c8070600 00c06c00 e1020000	      ALU:	MULv	R0.xyz_ = R2.xyzz, R0.xxxx
2a: 14010600 01b4bf6c d0000109	      ALU:	DOT3v	R0.x___ = R0.xzyy, R1.wxyy
2b: 04210101 006cc6b1 8200fefe	      ALU:	MAXv	R1.x___ = R0.xxxx, C510.zzzz
                          						    	ADD_PREVs	R1._y__ = C510.yyyy
      0000602c 00001200     	EXEC ADDR(0x2c) CNT(0x6) BOOL_ADDR(0x80)
2c: c8030600 046db100 a001fe00	      ALU:	ADDv	R0.xy__ = -R1.yxxx, C510.yyyy
2d: 4c120000 02b1b16c e0000100	      ALU:	ADDv	R0._y__ = R0.yyyy, -R1.yyyy
                          						    	RECIP_IEEE	R0.x___ = R0.xxxx
2e: c9040600 00b16c00 e1000000	      ALU:	MULv	R0.__z_ = R0.yyyy, R0.xxxx CLAMP
2f: c8030600 04c76d00 a000fe00	      ALU:	ADDv	R0.xy__ = -R0.wzzz, C510.yxxx
30: c8010600 006c6c1b ab000a00	      ALU:	MULADDv	R0.x___ = R0.wwww, R0.xxxx, C266.xxxx
31: 08420000 02b1c6c6 e0000000	      ALU:	ADDv	R0._y__ = R0.yyyy, -R0.zzzz
                          						    	MULs	R0.__z_ = R0.zzzz
      00004032 00001200     	EXEC ADDR(0x32) CNT(0x4) BOOL_ADDR(0x80)
32: c8020600 00c6b100 e1000000	      ALU:	MULv	R0._y__ = R0.zzzz, R0.yyyy
33: c8010600 00b16cc6 d10000fe	      ALU:	DOT2ADDv	R0.x___ = C510.zzzz, R0.yyyy, R0.xxxx
34: c8070600 006c62b1 8b000bfe	      ALU:	MULADDv	R0.xyz_ = C510.yyyy, R0.xxxx, C267.zyxx
35: c8070606 00c06200 e1060000	      ALU:	MULv	R6.xyz_ = R6.xyzz, R0.zyxx
      00000000 0000c400     	ALLOC PARAM/PIXEL SIZE(0x0)
      00002036 00002200     	EXEC_END ADDR(0x36) CNT(0x2) BOOL_ADDR(0x80)
36: c8070606 00c06c00 a1060c00	      ALU:	MULv	R6.xyz_ = R6.xyzz, C268.xxxx
37: c80f8000 00000000 e2060600	      ALU:	MAXv	export0 = R6, R6	; COLOR
