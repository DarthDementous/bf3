      00096008 00001200     	EXEC ADDR(0x8) CNT(0x6) BOOL_ADDR(0x80)
08: 100000c1 1f1ff1ff 00004000	      FETCH:	SAMPLE	R0.___x = R6.xyx CONST(0) ARBITRARY(2x4_SYM) LOCATION(CENTROID)
09: c8040800 00bebe00 f0000000	   (S)ALU:	DOT3v	R0.__z_ = R0.zxyy, R0.zxyy
0a: 584c0007 0071acc6 2107fe80	      ALU:	MULv	R7.__zw = C263.yyyx, C510.xxxy
                          						    	RECIPSQ_IEEE	R0.__z_ = abs(R0).zzzz
0b: c8080804 011bb1c6 ab000707	      ALU:	MULADDv	R4.___w = -R7.zzzz, R0.wwww, C263.yyyy
0c: a887000c 00626202 c0080807	      ALU:	ADDv	R12.xyz_ = R8.zyxx, R8.zyxx
                          						    	MUL_CONST_0	R0.___w = C263.w, R0.z
0d: c8030800 001a6d00 e1000000	      ALU:	MULv	R0.xy__ = R0.zwww, R0.yxxx
      0554600e 00001200     	EXEC ADDR(0xe) CNT(0x6) BOOL_ADDR(0x80)
0e: c8030800 006d1bb0 eb000406	      ALU:	MULADDv	R0.xy__ = R6.xyyy, R0.yxxx, R4.wwww
0f: 1048a0c1 1f1ffe88 00004000	      FETCH:	SAMPLE	R10.xyz_ = R6.xyx CONST(4) VALID_ONLY ARBITRARY(2x4_SYM) LOCATION(CENTROID)
10: b828d0c1 1f1ffe3f 00004000	      FETCH:	SAMPLE	R13.__x_ = R6.zwz CONST(2) VALID_ONLY ARBITRARY(2x4_SYM) LOCATION(CENTROID)
11: 1038b0e1 1f1ffe88 00004000	      FETCH:	SAMPLE	R11.xyz_ = R7.xyx CONST(3) VALID_ONLY ARBITRARY(2x4_SYM) LOCATION(CENTROID)
12: 10687001 1f1ffe88 00004000	      FETCH:	SAMPLE	R7.xyz_ = R0.xyx CONST(6) VALID_ONLY ARBITRARY(2x4_SYM) LOCATION(CENTROID)
13: 10586001 1f1fffd9 00004000	      FETCH:	SAMPLE	R6.yw__ = R0.xyx CONST(5) VALID_ONLY ARBITRARY(2x4_SYM) LOCATION(CENTROID)
      00096014 00001200     	EXEC ADDR(0x14) CNT(0x6) BOOL_ADDR(0x80)
14: 10180001 1f1ff688 00004000	      FETCH:	SAMPLE	R0.xyzw = R0.xyx CONST(1) VALID_ONLY ARBITRARY(2x4_SYM) LOCATION(CENTROID)
15: c8010808 006cb100 2101fe00	   (S)ALU:	MULv	R8.x___ = C257.xxxx, C510.yyyy
16: c8080800 001b1b00 e1000800	      ALU:	MULv	R0.___w = R0.wwww, R8.wwww
17: c8040808 00bebe00 f0040400	      ALU:	DOT3v	R8.__z_ = R4.zxyy, R4.zxyy
18: c8030806 00b06cb1 8b06fdfd	      ALU:	MULADDv	R6.xy__ = C509.yyyy, R6.xyyy, C509.xxxx
19: c8020808 0062c000 b007ff00	      ALU:	DOT3v	R8._y__ = R7.zyxx, C511.xyzz
      0000601a 00001200     	EXEC ADDR(0x1a) CNT(0x6) BOOL_ADDR(0x80)
1a: 58420808 001bb1c6 e1070888	      ALU:	MULv	R8._y__ = R7.wwww, R8.yyyy
                          						    	RECIPSQ_IEEE	R8.__z_ = abs(R8).zzzz
1b: c8070807 00626c00 a107fe00	      ALU:	MULv	R7.xyz_ = R7.zyxx, C510.xxxx
1c: c8070800 00beb400 e10c0000	      ALU:	MULv	R0.xyz_ = R12.zxyy, R0.xzyy
1d: 08170d0c 00c6c06c e1080406	      ALU:	MULv	R12.xyz_ = R8.zzzz, R4.xyzz
                          						    	MULs	R13.x___ = R6.xxxx
1e: 08270d07 00c062b1 e1070b06	      ALU:	MULv	R7.xyz_ = R7.xyzz, R11.zyxx
                          						    	MULs	R13._y__ = R6.yyyy
1f: c8090804 04c41b00 a00dfe00	      ALU:	ADDv	R4.x__w = -R13.xzzz, C510.wwww
      00006020 00001200     	EXEC ADDR(0x20) CNT(0x6) BOOL_ADDR(0x80)
20: b0470807 00c0c608 8107fdfe	      ALU:	MULv	R7.xyz_ = R7.xyzz, C509.zzzz
                          						    	ADD_CONST_0	R8.__z_ = C510.w, R8.x
21: b0180808 026cb109 c0040dfe	      ALU:	ADDv	R8.___w = R4.xxxx, -R13.yyyy
                          						    	ADD_CONST_0	R8.x___ = C510.w, R8.y
22: a0420608 006cc61b a208fe88	      ALU:	MAXv	R8._y__ = R8.xxxx, C510.zzzz
                          						    	SQRT_IEEE	R6.__z_ = abs(R8).wwww
23: c8010801 00bebe00 f0060100	      ALU:	DOT3v	R1.x___ = R6.zxyy, R1.zxyy
24: a9180808 00bebe4a d00c0602	      ALU:	DOT3v	R8.___w = R12.zxyy, R6.zxyy CLAMP
                          						    	MUL_CONST_0	R8.x___ = C258.x, R8.z
25: 40820a01 00bebe1b f0060208	      ALU:	DOT3v	R1._y__ = R6.zxyy, R2.zxyy
                          						    	LOG_IEEE	R10.___w = R8.wwww
      00006026 00001000     	EXEC ADDR(0x26) CNT(0x6)
26: 161f080a 00ac00c6 e1080a05	      ALU:	MULv	R10 = R8.xxxy, R10
                          						    	MAXs	R8.x___ = R5.zzzz CLAMP
27: c8070804 00c06cc0 ab0b000a	      ALU:	MULADDv	R4.xyz_ = R10.xyzz, R11.xyzz, C256.xxxx
28: 38240801 00bebe1b f006030a	      ALU:	DOT3v	R1.__z_ = R6.zxyy, R3.zxyy
                          						    	EXP_IEEE	R8._y__ = R10.wwww
29: 140e0808 00fcb11b e1070800	      ALU:	MULv	R8._yzw = R7.xxyz, R8.yyyy
2a: 0c870802 0015621b a1080304	      ALU:	MULv	R2.xyz_ = R8.yzww, C259.zyxx
                          						    	MUL_PREVs	R8.___w = R4.wwww
2b: 70070802 00c06c6c 81020405	      ALU:	MULv	R2.xyz_ = R2.xyzz, C260.xxxx
      0000102c 00001200     	EXEC ADDR(0x2c) CNT(0x1) BOOL_ADDR(0x80)
2c: c8070802 00b4c062 eb000402	      ALU:	MULADDv	R2.xyz_ = R2.zyxx, R0.xzyy, R4.xyzz
      0000602d 00005600     	COND_PRED_EXEC ADDR(0x2d) CNT(0x6) BOOL_ADDR(0x80) COND(1)
2d: c8020808 186c6c00 21040300	      ALU:	MULv	R8._y__ = C260.xxxx, C259.xxxx COND(1)
2e: c80e0804 1a0666b1 6cfe0505	      ALU:	CNDEv	R4._yzw = R5.yyyy, C510.zzzw, -R5.zzxx COND(1)
2f: 17410804 19bebec6 f0060505	      ALU:	DOT3v	R4.x___ = R6.zxyy, R5.zxyy CLAMP COND(1)
                          						    	MAXs	R8.__z_ = -R5.zzzz CLAMP
30: 15080800 18be156c f0060404	      ALU:	DOT3v	R0.___w = R6.zxyy, R4.yzww CLAMP COND(1)
31: 04140808 1b1bc66c e0000808	      ALU:	ADDv	R8.__z_ = R0.wwww, -R8.zzzz COND(1)
                          						    	ADD_PREVs	R8.x___ = -R8.xxxx
32: c8010808 18c61b6c ab08fd08	      ALU:	MULADDv	R8.x___ = R8.xxxx, R8.zzzz, C509.wwww COND(1)
      00005033 00005600     	COND_PRED_EXEC ADDR(0x33) CNT(0x5) BOOL_ADDR(0x80) COND(1)
33: c8020808 18b16c00 e1080800	      ALU:	MULv	R8._y__ = R8.yyyy, R8.xxxx COND(1)
34: c8090804 186d1b00 a108ff00	      ALU:	MULv	R4.x__w = R8.yxxx, C511.wwww COND(1)
35: c8030808 181bc500 a1040300	      ALU:	MULv	R8.xy__ = R4.wwww, C259.yzzz COND(1)
36: c8060804 18616c00 a1080400	      ALU:	MULv	R4._yz_ = R8.yyxx, C260.xxxx COND(1)
37: c8070802 18c0b400 e0020400	      ALU:	ADDv	R2.xyz_ = R2.xyzz, R4.xzyy COND(1)
      00000000 0000c400     	ALLOC PARAM/PIXEL SIZE(0x0)
      00246038 00001200     	EXEC ADDR(0x38) CNT(0x6) BOOL_ADDR(0x80)
38: c8030808 00b0b000 a1890600	      ALU:	MULv	R8.xy__ = abs(R9).xyyy, C262.xyyy
39: 10780101 1f1ff7ff 00004000	      FETCH:	SAMPLE	R0.___w = R8.xyx CONST(7) VALID_ONLY ARBITRARY(2x4_SYM) LOCATION(CENTROID)
3a: b4120808 001bb143 80020f0f	   (S)ALU:	ADDv	R8._y__ = R2.wwww, C271.yyyy
                          						    	ADD_CONST_1	R8.x___ = C271.x, R1.w
3b: b4430805 04b1b0c3 a0080d0f	      ALU:	ADDv	R5.xy__ = -R8.yyyy, C269.xyyy
                          						    	ADD_CONST_1	R8.__z_ = C271.z, R3.w
3c: b8430503 046cb04a 80080c0e	      ALU:	ADDv	R3.xy__ = -R8.xxxx, C268.xyyy
                          						    	SUB_CONST_0	R5.__z_ = C270.x, R8.z
3d: b8880501 00bebe8a d001010e	      ALU:	DOT3v	R1.___w = R1.zxyy, R1.zxyy
                          						    	SUB_CONST_0	R5.___w = C270.y, R8.z
      0000603e 00001200     	EXEC ADDR(0x3e) CNT(0x6) BOOL_ADDR(0x80)
3e: 58430808 006d6d1b e1030381	      ALU:	MULv	R8.xy__ = R3.yxxx, R3.yxxx
                          						    	RECIPSQ_IEEE	R8.__z_ = abs(R1).wwww
3f: c8010808 0019196c f1050508	      ALU:	DOT2ADDv	R8.x___ = R8.xxxx, R5.ywww, R5.ywww
40: c8020808 00c4c4b1 f1050508	      ALU:	DOT2ADDv	R8._y__ = R8.yyyy, R5.xzzz, R5.xzzz
41: 58100408 000000b1 e2080888	      ALU:	RECIPSQ_IEEE	R4.x___ = abs(R8).yyyy
42: 58200408 0000006c e2080888	      ALU:	RECIPSQ_IEEE	R4._y__ = abs(R8).xxxx
43: 40200808 000000b1 e2080888	      ALU:	LOG_IEEE	R8._y__ = abs(R8).yyyy
      00006044 00001200     	EXEC ADDR(0x44) CNT(0x6) BOOL_ADDR(0x80)
44: 40140803 001b6c6c a100fe88	      ALU:	MULv	R3.__z_ = R0.wwww, C510.xxxx
                          						    	LOG_IEEE	R8.x___ = abs(R8).xxxx
45: a84d0801 0084c649 c1010808	      ALU:	MULv	R1.x_zw = R1.xzzy, R8.zzzz
                          						    	MUL_CONST_0	R8.__z_ = C264.x, R8.y
46: a8230803 00b0b0c8 c1030408	      ALU:	MULv	R3.xy__ = R3.xyyy, R4.xyyy
                          						    	MUL_CONST_0	R8._y__ = C264.z, R8.x
47: 381f0804 000dadc6 e1050408	      ALU:	MULv	R4 = R5.yxzw, R4.yxxy
                          						    	EXP_IEEE	R8.x___ = R8.zzzz
48: 38230801 00b06cb1 e1030108	      ALU:	MULv	R1.xy__ = R3.xyyy, R1.xxxx
                          						    	EXP_IEEE	R8._y__ = R8.yyyy
49: c9020801 0018c7b1 f1040101	      ALU:	DOT2ADDv	R1._y__ = R1.yyyy, R4.xwww, R1.wzzz CLAMP
      0000604a 00001200     	EXEC ADDR(0x4a) CNT(0x6) BOOL_ADDR(0x80)
4a: c9010801 00c5c76c f1040101	      ALU:	DOT2ADDv	R1.x___ = R1.xxxx, R4.yzzz, R1.wzzz CLAMP
4b: c9030803 00b01900 a1080800	      ALU:	MULv	R3.xy__ = R8.xyyy, C264.ywww CLAMP
4c: c8070808 04cd1b00 a003fe00	      ALU:	ADDv	R8.xyz_ = -R3.yxzz, C510.wwww
4d: a8430303 00b06d49 c101080b	      ALU:	MULv	R3.xy__ = R1.xyyy, R8.yxxx
                          						    	MUL_CONST_0	R3.__z_ = C267.x, R8.y
4e: c8040801 00b0b0c6 91030afe	      ALU:	DOT2ADDv	R1.__z_ = C510.zzzz, R3.xyyy, C266.xyyy
4f: a8830303 00b0b088 8103090b	      ALU:	MULv	R3.xy__ = R3.xyyy, C265.xyyy
                          						    	MUL_CONST_0	R3.___w = C267.y, R8.x
      00006050 00002200     	EXEC_END ADDR(0x50) CNT(0x6) BOOL_ADDR(0x80)
50: c80c0803 0006ac00 e1030100	      ALU:	MULv	R3.__zw = R3.zzzw, R1.xxxy
51: c8030801 00c41900 e0030300	      ALU:	ADDv	R1.xy__ = R3.xzzz, R3.ywww
52: c8070800 00c0c000 e1000100	      ALU:	MULv	R0.xyz_ = R0.xyzz, R1.xyzz
53: c8070808 00c6b4c0 eb080200	      ALU:	MULADDv	R8.xyz_ = R0.xyzz, R8.zzzz, R2.xzyy
54: c8070808 00b46c00 a1081000	      ALU:	MULv	R8.xyz_ = R8.xzyy, C272.xxxx
55: c80f8000 00000000 e2080800	      ALU:	MAXv	export0 = R8, R8	; COLOR
      00000000 00000000     	NOP
