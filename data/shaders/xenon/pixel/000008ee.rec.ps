      00000000 0000c400     	ALLOC PARAM/PIXEL SIZE(0x0)
      00096005 00001200     	EXEC ADDR(0x5) CNT(0x6) BOOL_ADDR(0x80)
05: 100090a1 1f1fffc7 00004000	      FETCH:	SAMPLE	R9._x__ = R5.xyx CONST(0) ARBITRARY(2x4_SYM) LOCATION(CENTROID)
06: b0800006 00000083 e2060608	   (S)ALU:	ADD_CONST_0	R0.___w = C264.y, R2.w
07: 140c0605 00acac1b a1880901	      ALU:	MULv	R5.__zw = abs(R8).xxxy, C265.xxxy
08: 04810708 00b16c6c 0101fe08	      ALU:	MULv	R8.x___ = C257.yyyy, C510.xxxx
                          						    	ADD_PREVs	R7.___w = C264.xxxx
09: c8040609 01b1b16c ab090108	      ALU:	MULADDv	R9.__z_ = -R8.xxxx, R9.yyyy, C257.yyyy
0a: b41c090a 041bacc3 a0070508	      ALU:	ADDv	R10.__zw = -R7.wwww, C261.xxxy
                          						    	ADD_CONST_1	R9.x___ = C264.z, R3.w
      0000600b 00001200     	EXEC ADDR(0xb) CNT(0x6) BOOL_ADDR(0x80)
0b: b8180a07 00bebe43 d0000006	      ALU:	DOT3v	R7.___w = R0.zxyy, R0.zxyy
                          						    	SUB_CONST_0	R10.x___ = C262.x, R0.w
0c: b8230a08 046cb083 80090706	      ALU:	ADDv	R8.xy__ = -R9.xxxx, C263.xyyy
                          						    	SUB_CONST_0	R10._y__ = C262.y, R0.w
0d: 58830809 00b0b01b e1080887	      ALU:	MULv	R9.xy__ = R8.xyyy, R8.xyyy
                          						    	RECIPSQ_IEEE	R8.___w = abs(R7).wwww
0e: c8080600 00b3b3b1 f10a0a09	      ALU:	DOT2ADDv	R0.___w = R9.yyyy, R10.wyyy, R10.wyyy
0f: c8080607 006e6e6c f10a0a09	      ALU:	DOT2ADDv	R7.___w = R9.xxxx, R10.zxxx, R10.zxxx
10: 58140908 001b1b1b a1080187	      ALU:	MULv	R8.__z_ = R8.wwww, C257.wwww
                          						    	RECIPSQ_IEEE	R9.x___ = abs(R7).wwww
      05406011 00001200     	EXEC ADDR(0x11) CNT(0x6) BOOL_ADDR(0x80)
11: 582c0908 0006ac1b e1080080	      ALU:	MULv	R8.__zw = R8.zzzw, R0.xxxy
                          						    	RECIPSQ_IEEE	R9._y__ = abs(R0).wwww
12: c80f0600 00aaa600 e1080900	      ALU:	MULv	R0 = R8.zwxy, R9.zzxy
13: c8030605 00b0b000 e0000500	      ALU:	ADDv	R5.xy__ = R0.xyyy, R5.xyyy
14: 1028b0a1 1f1fffd9 00004000	      FETCH:	SAMPLE	R11.yw__ = R5.xyx CONST(2) VALID_ONLY ARBITRARY(2x4_SYM) LOCATION(CENTROID)
15: b83800a1 1f1fffc1 00004000	      FETCH:	SAMPLE	R0.yx__ = R5.zwz CONST(3) VALID_ONLY ARBITRARY(2x4_SYM) LOCATION(CENTROID)
16: 101850a1 1f1ff688 00004000	      FETCH:	SAMPLE	R5.xyzw = R5.xyx CONST(1) VALID_ONLY ARBITRARY(2x4_SYM) LOCATION(CENTROID)
      00026017 00001200     	EXEC ADDR(0x17) CNT(0x6) BOOL_ADDR(0x80)
17: c8070608 00c06c00 200c0000	   (S)ALU:	ADDv	R8.xyz_ = C268.xyzz, C256.xxxx
18: c8070607 00c0c000 e0080700	      ALU:	ADDv	R7.xyz_ = R8.xyzz, R7.xyzz
19: a8470d08 00c0c041 c006060a	      ALU:	ADDv	R8.xyz_ = R6.xyzz, R6.xyzz
                          						    	MUL_CONST_0	R13.__z_ = C266.x, R0.y
1a: c803060b 00b06cc6 8b0bfffe	      ALU:	MULADDv	R11.xy__ = C510.zzzz, R11.xyyy, C511.xxxx
1b: a8830d0d 00b0b080 c10b0b0a	      ALU:	MULv	R13.xy__ = R11.xyyy, R11.xyyy
                          						    	MUL_CONST_0	R13.___w = C266.y, R0.x
1c: c807060c 04141b00 a00dfe00	      ALU:	ADDv	R12.xyz_ = -R13.xzww, C510.wwww
      0000601d 00001200     	EXEC ADDR(0x1d) CNT(0x6) BOOL_ADDR(0x80)
1d: c8010606 026cb100 e00c0d00	      ALU:	ADDv	R6.x___ = R12.xxxx, -R13.yyyy
1e: a0430b00 00c5b06c e10c0486	      ALU:	MULv	R0.xy__ = R12.yzzz, R4.xyyy
                          						    	SQRT_IEEE	R11.__z_ = abs(R6).xxxx
1f: c8010601 00bebe00 f00b0100	      ALU:	DOT3v	R1.x___ = R11.zxyy, R1.zxyy
20: c8020601 00bebe00 f00b0200	      ALU:	DOT3v	R1._y__ = R11.zxyy, R2.zxyy
21: c8040601 00bebe00 f00b0300	      ALU:	DOT3v	R1.__z_ = R11.zxyy, R3.zxyy
22: c8010606 00bebe00 f0010100	      ALU:	DOT3v	R6.x___ = R1.zxyy, R1.zxyy
      00006023 00001200     	EXEC ADDR(0x23) CNT(0x6) BOOL_ADDR(0x80)
23: 581f0602 000dad6c e10a0986	      ALU:	MULv	R2 = R10.yxzw, R9.yxxy
                          						    	RECIPSQ_IEEE	R6.x___ = abs(R6).xxxx
24: c8070601 00be6c00 e1010600	      ALU:	MULv	R1.xyz_ = R1.zxyy, R6.xxxx
25: c8030606 001a6c00 e1000100	      ALU:	MULv	R6.xy__ = R0.zwww, R1.xxxx
26: c9020606 006fc5b1 f1020106	      ALU:	DOT2ADDv	R6._y__ = R6.yyyy, R2.wxxx, R1.yzzz CLAMP
27: c9010606 00b2c56c f1020106	      ALU:	DOT2ADDv	R6.x___ = R6.xxxx, R2.zyyy, R1.yzzz CLAMP
28: c8030606 006d6d00 e1000600	      ALU:	MULv	R6.xy__ = R0.yxxx, R6.yxxx
      00006029 00001200     	EXEC ADDR(0x29) CNT(0x6) BOOL_ADDR(0x80)
29: c8040600 006db0b1 910604fe	      ALU:	DOT2ADDv	R0.__z_ = C510.yyyy, R6.yxxx, C260.xyyy
2a: a8170201 00c0c045 e1080502	      ALU:	MULv	R1.xyz_ = R8.xyzz, R5.xyzz
                          						    	MUL_CONST_0	R2.x___ = C258.x, R6.y
2b: a82c0202 0071ac84 a1060302	      ALU:	MULv	R2.__zw = R6.yyyx, C259.xxxy
                          						    	MUL_CONST_0	R2._y__ = C258.y, R6.x
2c: c8030600 00c41900 e0020200	      ALU:	ADDv	R0.xy__ = R2.xzzz, R2.ywww
2d: 14070600 00c0c01b e1010005	      ALU:	MULv	R0.xyz_ = R1.xyzz, R0.xyzz
2e: c8070600 00c0c0c0 eb010700	      ALU:	MULADDv	R0.xyz_ = R0.xyzz, R1.xyzz, R7.xyzz
      0000102f 00002200     	EXEC_END ADDR(0x2f) CNT(0x1) BOOL_ADDR(0x80)
2f: 0c878000 00c06c1b a1000b06	      ALU:	MULv	export0.xyz_ = R0.xyzz, C267.xxxx	; COLOR
                          						    	MUL_PREVs	export0.___w = R6.wwww	; COLOR
      00000000 00000000     	NOP
