      09556006 00001200     	EXEC ADDR(0x6) CNT(0x6) BOOL_ADDR(0x80)
06: 1018a061 1f1ffe88 00004000	      FETCH:	SAMPLE	R10.xyz_ = R3.xyx CONST(1) VALID_ONLY ARBITRARY(2x4_SYM) LOCATION(CENTROID)
07: b8089061 1f1ffe88 00004000	      FETCH:	SAMPLE	R9.xyz_ = R3.zwz CONST(0) VALID_ONLY ARBITRARY(2x4_SYM) LOCATION(CENTROID)
08: 1060b061 1f1fffd9 00004000	      FETCH:	SAMPLE	R11.yw__ = R3.xyx CONST(6) ARBITRARY(2x4_SYM) LOCATION(CENTROID)
09: 10288061 1f1ffe88 00004000	      FETCH:	SAMPLE	R8.xyz_ = R3.xyx CONST(2) VALID_ONLY ARBITRARY(2x4_SYM) LOCATION(CENTROID)
0a: 10786061 1f1ff688 00004000	      FETCH:	SAMPLE	R6.xyzw = R3.xyx CONST(7) VALID_ONLY ARBITRARY(2x4_SYM) LOCATION(CENTROID)
0b: c8080401 006c1b00 2103fd00	   (S)ALU:	MULv	R1.___w = C259.xxxx, C509.wwww
      0000600c 00001200     	EXEC ADDR(0xc) CNT(0x6) BOOL_ADDR(0x80)
0c: c8080400 00bebe00 f0000000	      ALU:	DOT3v	R0.___w = R0.zxyy, R0.zxyy
0d: c8070407 00626200 e0040400	      ALU:	ADDv	R7.xyz_ = R4.zyxx, R4.zyxx
0e: c8070407 0062c000 e1070600	      ALU:	MULv	R7.xyz_ = R7.zyxx, R6.xyzz
0f: c8010404 0062c000 b008ff00	      ALU:	DOT3v	R4.x___ = R8.zyxx, C511.xyzz
10: c8030406 00b06cb1 8b0bfdfd	      ALU:	MULADDv	R6.xy__ = C509.yyyy, R11.xyyy, C509.xxxx
11: c8070408 0062c600 a108fe00	      ALU:	MULv	R8.xyz_ = R8.zyxx, C510.zzzz
      00006012 00001200     	EXEC ADDR(0x12) CNT(0x6) BOOL_ADDR(0x80)
12: 58270408 00c0621b e1080980	      ALU:	MULv	R8.xyz_ = R8.xyzz, R9.zyxx
                          						    	RECIPSQ_IEEE	R4._y__ = abs(R0).wwww
13: 14070400 00b1c06c c1040001	      ALU:	MULv	R0.xyz_ = R4.yyyy, R0.xyzz
14: c8080400 046d6db1 d10606fe	      ALU:	DOT2ADDv	R0.___w = C510.yyyy, -R6.yxxx, R6.yxxx
15: 0c210404 001b6c1b c10104fd	      ALU:	MULv	R4.x___ = R1.wwww, R4.xxxx
                          						    	MUL_PREVs	R4._y__ = C509.wwww
16: a0430604 00b0b11b a004fe80	      ALU:	ADDv	R4.xy__ = R4.xyyy, C510.yyyy
                          						    	SQRT_IEEE	R6.__z_ = abs(R0).wwww
17: a9140000 00bebe45 d0000602	      ALU:	DOT3v	R0.__z_ = R0.zxyy, R6.zxyy CLAMP
                          						    	MUL_CONST_0	R0.x___ = C258.x, R4.y
      00006018 00001200     	EXEC ADDR(0x18) CNT(0x6) BOOL_ADDR(0x80)
18: 40820a00 006c6cc6 a204fe00	      ALU:	MAXv	R0._y__ = R4.xxxx, C510.xxxx
                          						    	LOG_IEEE	R10.___w = R0.zzzz
19: 161f0400 00ac00c6 e1000a01	      ALU:	MULv	R0 = R0.xxxy, R10
                          						    	MAXs	R4.x___ = R1.zzzz CLAMP
1a: c8070400 00c06cc0 ab090000	      ALU:	MULADDv	R0.xyz_ = R0.xyzz, R9.xyzz, C256.xxxx
1b: 38870008 00c06c1b a108fc00	      ALU:	MULv	R8.xyz_ = R8.xyzz, C508.xxxx
                          						    	EXP_IEEE	R0.___w = R0.wwww
1c: 14070408 00c01b1b e1080006	      ALU:	MULv	R8.xyz_ = R8.xyzz, R0.wwww
1d: 0c870008 00c0621b a1080404	      ALU:	MULv	R8.xyz_ = R8.xyzz, C260.zyxx
                          						    	MUL_PREVs	R0.___w = R4.wwww
      0000201e 00001000     	EXEC ADDR(0x1e) CNT(0x2)
1e: 700e0404 00fc6c6c 81080506	      ALU:	MULv	R4._yzw = R8.xxyz, C261.xxxx
1f: c8070400 00c0c0b7 eb070004	      ALU:	MULADDv	R0.xyz_ = R4.wzyy, R7.xyzz, R0.xyzz
      00006020 00005600     	COND_PRED_EXEC ADDR(0x20) CNT(0x6) BOOL_ADDR(0x80) COND(1)
20: c8020404 186c6c00 21050400	      ALU:	MULv	R4._y__ = C261.xxxx, C260.xxxx COND(1)
21: c8070407 1abc6eb1 6cfe0101	      ALU:	CNDEv	R7.xyz_ = R1.yyyy, C510.xxyy, -R1.zxxx COND(1)
22: 17480401 19bebec6 f0060101	      ALU:	DOT3v	R1.___w = R6.zxyy, R1.zxyy CLAMP COND(1)
                          						    	MAXs	R4.__z_ = -R1.zzzz CLAMP
23: 15080404 18bec01b f0060701	      ALU:	DOT3v	R4.___w = R6.zxyy, R7.xyzz CLAMP COND(1)
24: 04140404 1b1bc66c e0040404	      ALU:	ADDv	R4.__z_ = R4.wwww, -R4.zzzz COND(1)
                          						    	ADD_PREVs	R4.x___ = -R4.xxxx
25: c8010404 18c6b16c ab04fc04	      ALU:	MULADDv	R4.x___ = R4.xxxx, R4.zzzz, C508.yyyy COND(1)
      00005026 00005600     	COND_PRED_EXEC ADDR(0x26) CNT(0x5) BOOL_ADDR(0x80) COND(1)
26: c8020404 18b16c00 e1040400	      ALU:	MULv	R4._y__ = R4.yyyy, R4.xxxx COND(1)
27: c8090404 186d1b00 a104ff00	      ALU:	MULv	R4.x__w = R4.yxxx, C511.wwww COND(1)
28: c8060404 181bc100 a1040400	      ALU:	MULv	R4._yz_ = R4.wwww, C260.yyzz COND(1)
29: c8060404 18b66c00 a1040500	      ALU:	MULv	R4._yz_ = R4.zzyy, C261.xxxx COND(1)
2a: c8070400 18c0b400 e0000400	      ALU:	ADDv	R0.xyz_ = R0.xyzz, R4.xzyy COND(1)
      00000000 0000c400     	ALLOC PARAM/PIXEL SIZE(0x0)
      0250602b 00001200     	EXEC ADDR(0x2b) CNT(0x6) BOOL_ADDR(0x80)
2b: c8030404 00b0b000 a1850700	      ALU:	MULv	R4.xy__ = abs(R5).xyyy, C263.xyyy
2c: 4c440403 006cc61b 2108fe02	      ALU:	MULv	R3.__z_ = C264.xxxx, C510.zzzz
                          						    	RECIP_IEEE	R4.__z_ = R2.wwww
2d: 10304081 1f1ffffb 00004000	      FETCH:	SAMPLE	R4.w___ = R4.xyx CONST(3) ARBITRARY(2x4_SYM) LOCATION(CENTROID)
2e: 90504061 1f1fffc7 00008000	      FETCH:	SAMPLE	R4._x__ = R3.xyz CONST(5) ARBITRARY(2x4_SYM) LOCATION(CENTROID)
2f: c8020404 00b16cb1 8b04fdfd	   (S)ALU:	MULADDv	R4._y__ = C509.yyyy, R4.yyyy, C509.xxxx
30: c80c0404 00c6ac00 e1040200	      ALU:	MULv	R4.__zw = R4.zzzz, R2.xxxy
      02406031 00001200     	EXEC ADDR(0x31) CNT(0x6) BOOL_ADDR(0x80)
31: c8030404 00b01a00 a104fe00	      ALU:	MULv	R4.xy__ = R4.xyyy, C510.zwww
32: b8230401 00b1b087 c10406fe	      ALU:	MULv	R1.xy__ = R4.yyyy, R6.xyyy
                          						    	SUB_CONST_0	R4._y__ = C510.y, R4.w
33: c80c0404 00acc686 ab01fd04	      ALU:	MULADDv	R4.__zw = R4.zzzy, R1.xxxy, C509.zzzz
34: b8481081 1f1ffe88 00004000	      FETCH:	SAMPLE	R1.xyz_ = R4.zwz CONST(4) VALID_ONLY ARBITRARY(2x4_SYM) LOCATION(CENTROID)
35: b8170401 00c0b184 810109fe	   (S)ALU:	MULv	R1.xyz_ = R1.xyzz, C265.yyyy
                          						    	SUB_CONST_0	R4.x___ = C510.y, R4.x
36: c8070404 016cc0c0 eb040001	      ALU:	MULADDv	R4.xyz_ = -R1.xyzz, R4.xxxx, R0.xyzz
      00003037 00002200     	EXEC_END ADDR(0x37) CNT(0x3) BOOL_ADDR(0x80)
37: c8070404 00c06cc0 ab040801	      ALU:	MULADDv	R4.xyz_ = R1.xyzz, R4.xyzz, C264.xxxx
38: c8070400 00c06c00 a1040900	      ALU:	MULv	R0.xyz_ = R4.xyzz, C265.xxxx
39: c80f8000 00000000 e2000000	      ALU:	MAXv	export0 = R0, R0	; COLOR
      00000000 00000000     	NOP
