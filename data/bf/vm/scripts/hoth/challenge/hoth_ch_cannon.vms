// vim: set syntax=c :

///////////////////////////////////
/*
    hoth_ch_cannon.vms

    Created By Kieran Teasdale
    Please do not modify without asking me!
    or comment where you have modified

*/
///////////////////////////////////

/////////////MAKE SURE TO INCLUDE A BFStorylevelVarProp in your level

boolean Skip = false;

int IsPlayerDead = 0;

// Declare any props so they can be used later
propRef generator = propRefFromName("generator");

// Declare Any Characters So They Can Be Used Later
chrRef player = chrRefFromName("player_0");

/////////////////////////////          INCLUDE DEFAULTS           /////////////////

callback void playerKilled(int killerId, int iResult, int iSpare)
{
    int iNumActive = BFObjectiveGetNumActive();
    int i = 0;

    propRef pChr;
    pChr = propRefFromInt(iSpare);

    propRef pKiller;
    pKiller = propRefFromInt(killerId);    

    if (isPlayerProp(pKiller) && iResult == 1)
    {
    	ChallengeAddScore(750);
    	AddVMDebugHUDMsg("Killed AT-AT Barge!", 1, "test_objective_message");
    }

 	for (i=0; i<iNumActive; i++)
    {
		int iActive = BFObjectiveGetNumForNthActive(i);
		if (lib_playerKilled(killerId, iResult, iSpare, iActive)) 
		{
	    	nextObjective(iActive);
		}
    }
    //if (lib_playerKilled(victimId, killerId, iOppTeam)) nextObjective();    
}

function void Trigger(char16 inTriggerProp)
{   
    int iResult = 0;
    int iNumActive = BFObjectiveGetNumActive();
    int i = 0;
    int iActive = 0;
    for (i=0; i<iNumActive; i++)
    {
        iActive = BFObjectiveGetNumForNthActive(i);
        iResult = lib_triggeredProp(inTriggerProp, iActive);
        iResult = ObjectiveTriggerTests(iActive, inTriggerProp, iResult);

        if (iResult >= 1) nextObjective(iActive);
    }
}

callback int triggeredProp(int inType, char16 inTriggerProp, int pId)
{   
    Trigger(inTriggerProp);     
    return 0;
}

function void nextObjective(int iObjNum) 
{    
    int result =   lib_nextObjective(iObjNum);

    if(result==1)
    {
	//if next objective returns 1 it has updated a core objective and automatically moved us onto the next
	//so do objective setup with current objective
	if (!Skip)
	{
	    int iObjective = BFObjectiveGetCurrent();//GetLevelVarInt("mObjective");
	    char16 cName = BFObjectiveGetName(iObjective);
	    ObjectiveSetup( cName, iObjective, BFObjectiveGetSub(iObjective));            
	}
    }

    if(result==2)
    {
	//if nextobjective returns 2 it has updated a bonus objective so we will want to 
	//objective setup with the objective we passed to next objective
	if (!Skip)
	{
	    char16 cName = BFObjectiveGetName(iObjNum);
	    ObjectiveSetup( cName, iObjNum, BFObjectiveGetSub(iObjNum));            
	}
    }
}

function void JumpToObjective(int iStartObj, boolean Skiping)
{       
    Skip = Skiping;
    ResetProps();

    if (Skip)
    {
	BFObjectiveSetJumpTo(iStartObj);
    }

    Skip = false;
    nextObjective(BFObjectiveGetCurrent());

    char16 tSpawn;
    tSpawn = LevelVarToChar16("mCurrentSpawner");
    if (propExists(propRefFromChar16(tSpawn)))
        propTeleportToProp(getPlayerPropRefFromID(GetPlayerId()), propRefFromChar16(tSpawn));        

    logStr("Jumped To Objective");
    logInt(BFObjectiveGetCurrent());

}

callback void ObjectiveTimeExpired(char16 objName)
{   
    //if (lib_ObjTimeExpired()) nextObjective();

    int objNum = 0;
    objNum = BFObjectiveGetNumber(objName);   
    if (lib_ObjTimeExpired(objNum))
    {
	nextObjective(objNum);
    }

}
callback void playerSpawned(char16 teamName, int playerId)
{
    //int iObjective = GetLevelVarInt("mObjective");
    logStr("teamName: ");
    logchar16(teamName);
}

callback void finiteSpawnerComplete(char16 propId) 
{
    AddVMDebugHUDMsg("FINITE SPAWNER IS DEADED", 1, "test_objective_message");
}

/////////////////////////////          DEFAULTS END            /////////////////

callback void gameHasStarted()
{           
}

function void ResetProps()
{
// e.g    disableTrigger(propRefFromName("DeathTrigger"));       
}

function void ScriptHasStarted()
{
    //SetLevelVarsBFStory("obj_Mus", "vmTrig");
    SetBFStoryPrefixes("obj_Hoth_Ch_B", "vmTrig");
 // obj_Mus is the link into the bf/mgrsetup/objectivesmgr.res file.
 // It will look for objectives in objectivesmgr: obj_Mus1, obj_Mus2 etc. so rename it for your level
 // vmTrig is the reference for trigger prop names in the editor, e.g. first trigger should be renamed to vmTrig1, then vmTrig2 etc
 // Remember to paste into each trigger props action variable:
 // propHasEnteredTriggerScript = "gamemodeTriggerSimple(triggerPropRef, thisPropRef);"

    ResetObjectives("mObjTmp", 2);

    //Reset CPs, Spawners, etc
    ResetProps();

    JumpToObjective(1, true);
}

function int ObjectiveTriggerTests(int iObjective, char16 inTriggerProp, int iResult) 
{
    int iSubObjective = BFObjectiveGetSub(iObjective);

    //e.g for an alternate route
    if (iObjective == 1)
    {
        if (iResult == 1) //For alternate route jump, else continue with no change
            JumpToObjective(10, true);
    }

    //No Change
        return iResult;
}

/////////////////////////////          OBJECTIVE TESTS            /////////////////

// We can test if certain objectives have been completed here, rather than trigger them immediately
// This is because sometimes it is much easier on the CPU to test here rather than set up triggers
// Also we can do complex objective tests here which aren't otherwise possible (e.g. if prop is destroyed)

function void ObjectiveTests(int iObjective) 
{
    //Tests for each game tick   
    int iSubObjective = BFObjectiveGetSub(iObjective);

    // For The Duration Of Objective 1 - Take Out The AT-AT's
    if (iObjective == 1)
    {
	    propRef player = getPlayerPropRefFromID(GetPlayerId());

		if (!propValid(player) && !IsPlayerDead)
		{
	   	 	IsPlayerDead = 1;
		}

		if ((propGetHealthFraction(generator)) <= 0.0f)
        {
            AddVMDebugHUDMsg("Generator Destroyed! Challenge Failed!", 1, "test_objective_message");
        	endOfGameWinText("Generator Destroyed! Challenge Failed!");
        	waitForGameTime(3.0f);
        	wholeScreenFade(3.0f, 1.0f, false); 	// Screen Fade Down To Black
        	waitForGameTime(3.0f);
        	ChallengeEnd();
        }

        if (IsPlayerDead) 
		{
			AddVMDebugHUDMsg("Challenge Failed!", 1, "test_objective_message");
        	endOfGameWinText("Challenge Failed!");
        	waitForGameTime(3.0f);
        	wholeScreenFade(3.0f, 1.0f, false); 	// Screen Fade Down To Black
        	waitForGameTime(3.0f);
	    	ChallengeEnd();
		}       
    }

    // For The Duration Of Objective 2 - Challenge Complete
    else if (iObjective == 2)
    {

    }
}

/////////////////////////////          OBJECTIVES            /////////////////

// MAIN OBJECTIVE SETUP FUNCTION (most of your code will go here)
// Set up what each objective actually is (the code for it anyway) and trigger events happening as player completes objectives
// Objective description strings and numbers are in mgrsetup/objectivesmgr.res + strings localisation file

function void ObjectiveSetup(char16 cObjectiveName, int iObjective, int iSubObjective)
{
	///////////////////////////////////////////////////////////////////////
	////////// OBJECTIVE 1 - Destroy As Many AT-AT's As Possible //////////
	///////////////////////////////////////////////////////////////////////   
    if (iObjective == 1) 
    { 
        if (iSubObjective == 1)
        {       
            SetObjectiveTimer(60, iObjective);   		// Objective Timer
        }
        else if (iSubObjective == 2)
        {       
	        // Spawn AT-AT Landing Barge
            SpawnAtatBargeWithDriverObjectives("theta_barge2", propRefFromName("lander2"), vector(0,0,0), "");
            SetObjectiveTimer(60, iObjective);   		// Objective Timer
        }
        else if (iSubObjective == 3)
        {       
	        // Spawn AT-AT Landing Barge
            SpawnAtatBargeWithDriverObjectives("theta_barge3", propRefFromName("lander3"), vector(0,0,0), "");
            SetObjectiveTimer(60, iObjective);   		// Objective Timer
        }
        else if (iSubObjective == 4)
        {     
	        // Spawn AT-AT Landing Barge  
            SpawnAtatBargeWithDriverObjectives("theta_barge4", propRefFromName("lander4"), vector(0,0,0), "");
            SetObjectiveTimer(60, iObjective);   		// Objective Timer	        
        }
        else if (iSubObjective == 5)
        {       
            // Spawn AT-AT Landing Barge
            SpawnAtatBargeWithDriverObjectives("theta_barge1", propRefFromName("lander1"), vector(0,0,0), "");
            SetObjectiveTimer(60, iObjective);   		// Objective Timer	        
        }
        else if (iSubObjective == 6)
        {       
	        // Spawn AT-AT Landing Barge
            SpawnAtatBargeWithDriverObjectives("theta_barge2", propRefFromName("lander2"), vector(0,0,0), "");
            SetObjectiveTimer(60, iObjective);   		// Objective Timer	        
        }
        else if (iSubObjective == 7)
        {       
	        // Spawn AT-AT Landing Barge
            SpawnAtatBargeWithDriverObjectives("theta_barge3", propRefFromName("lander3"), vector(0,0,0), "");
            SetObjectiveTimer(60, iObjective);   		// Objective Timer	        
        }
        else if (iSubObjective == 8)
        {       
	        // Spawn AT-AT Landing Barge
            SpawnAtatBargeWithDriverObjectives("theta_barge4", propRefFromName("lander4"), vector(0,0,0), "");
            SetObjectiveTimer(60, iObjective);   		// Objective Timer	        
        }
        else if (iSubObjective == 9)
        {       
	        // Spawn AT-AT Landing Barge
            SpawnAtatBargeWithDriverObjectives("theta_barge1", propRefFromName("lander1"), vector(0,0,0), "");
            SetObjectiveTimer(60, iObjective);   		// Objective Timer	        
        }
        else if (iSubObjective == 10)
        {       
	        // Spawn AT-AT Landing Barge
            SpawnAtatBargeWithDriverObjectives("theta_barge2", propRefFromName("lander2"), vector(0,0,0), "");
            SetObjectiveTimer(60, iObjective);   		// Objective Timer	        
        }
        else if (iSubObjective == 11)
        {       
	        // Spawn AT-AT Landing Barge
            SpawnAtatBargeWithDriverObjectives("theta_barge3", propRefFromName("lander3"), vector(0,0,0), "");
            SetObjectiveTimer(60, iObjective);   		// Objective Timer	        
        }
        else if (iSubObjective == 12)
        {       
	        // Spawn AT-AT Landing Barge
            SpawnAtatBargeWithDriverObjectives("theta_barge4", propRefFromName("lander4"), vector(0,0,0), "");
            SetObjectiveTimer(120, iObjective);   		// Objective Timer	        
        }
        else
        { 
	        SetPropRefInvincible(propRefFromName("impstrdstryr"), true); // Make Star Destroyer Invincible For Safety

	        AddVMDebugHUDMsg("Get Spawning Chumps!", 1, "test_objective_message");      

	        // Team 1 (Enemy) Battle Commands  
        	BFNPCTeamObjectiveSetType(cObjectiveName, 1, k_objtype_attack_prop);
        	BFNPCTeamObjectiveSetTargetProp(cObjectiveName, 1, generator, 75, 110);  

            // Spawn AT-AT Landing Barges
            SpawnAtatBargeWithDriverObjectives("theta_barge1", propRefFromName("lander1"), vector(0,0,0), "");

            SetObjectiveTimer(2, iObjective); 			// Objective Timer
            SetNumSubObjectives(12, iObjective); 		// Set Number Of Sub-Objectives
        }
    } 

    ///////////////////////////////////////////////////////////////
    ////////// OBJECTIVE 2 - Defend The Shield Generator //////////
    ///////////////////////////////////////////////////////////////

    else if (iObjective == 2) 
    { 
	    if (iSubObjective == 1)
        { 
        	wholeScreenFade(3.0f, 1.0f, false); 	// Screen Fade Down To Black
        	SetObjectiveTimer(3, iObjective); 		// Objective Timer
    	}
	    else if (iSubObjective == 2)
        {
	    	ChallengeEnd();
    	}
    	else
    	{
        	AddVMDebugHUDMsg("Challenge Complete!", 1, "test_objective_message");
        	endOfGameWinText("Challenge Complete!");
        	SetObjectiveTimer(3, iObjective); 			// Objective Timer
        	SetNumSubObjectives(2, iObjective); 		// Set Number Of Sub-Objectives
    	}
    }    
}

AllowCallback(CALLBACK_PlayerSpawned, playerSpawned);
AllowCallback(CALLBACK_PlayerKilledBF, playerKilled);
AllowCallback(CALLBACK_TriggeredProp, triggeredProp);
AllowCallback(CALLBACK_ObjectiveTimeExpired, ObjectiveTimeExpired);
AllowCallback(CALLBACK_GameHasStarted, gameHasStarted);
AllowCallback(CALLBACK_FSpawnerComplete, finiteSpawnerComplete);

///////////////This Script Actions

ChallengeBegin();

wholeScreenFade(0.0f, 1.0f, false); 		// Screen Set To Black For Fade At Level Start
	        
waitForGameTime(0.1f);

ScriptHasStarted(); //Do any setups
ChallengeBegin();
wholeScreenFade(3.0f, 0.0f, false); 		// Screen Fade In From Black For Level Start

//Main game loop
while(1)
{
    int iNumActive = BFObjectiveGetNumActive();
    int i = 0;

    for (i=0; i<iNumActive; i++)
    {
		int iObjective = BFObjectiveGetNumForNthActive(i);
		ObjectiveTests(iObjective);

		logStr("tick");
		logInt(iObjective);

    }

    waitForGameTime(1.0f);
}