// vim: set syntax=c :

///////////////////////////////////
/*

Coruscant Story Mode

*/
///////////////////////////////////

//Global declarations

propRef shield     = propRefFromName("cisivshld1");
boolean Skip = false;
boolean HasActivatedStarFighter = false;
propRef cruiserRef = propRefFromName("cruisership2S"); 
int destroyed = 0;
int gunconsole1_destroyed = 0;
int gunconsole2_destroyed = 0;
int gunconsole3_destroyed = 0;
int reactorconsole_destroyed = 0;
int reactor_destroyed = 0;
int turret1_destroyed = 0;
int turret2_destroyed = 0;
int escape_pod_launched = 0;
int droideka1_destroyed =0;
int droideka2_destroyed =0;
int droideka3_destroyed =0;
int obj4turret1_destroyed = 0;
int obj4turret2_destroyed = 0;
int obj4turret3_destroyed = 0;
int obj4turret4_destroyed = 0;
int obj4turret5_destroyed = 0;
int obj4turret6_destroyed = 0;
int obj4turret7_destroyed = 0;
int obj4turret8_destroyed = 0;
int obj4turret9_destroyed = 0;
int obj4turret10_destroyed = 0;
int obj4turret11_destroyed = 0;

int SpawnedInAATs = 0;
int spawnedObjectiveTenAI = 0;
int CatchTen = 0;
int CatchFifteen = 0;
int SpawnedInTransports = 0;

int ActivatedBonusObjectiveA = 0;
int ActivatedBonusObjectiveB = 0;
int ActivatedBonusObjectiveC = 0;
int ActivatedBonusObjectiveD = 0;
int ActivatedBonusObjectiveE = 0;
int ActivatedBonusObjectiveF = 0;
int ActivatedBonusObjectiveG = 0;
int ActivatedBonusObjectiveH = 0;
int ActivatedBonusObjectiveI = 0;

int CompletedBonusObjectiveG = 0;

char16 bonusA = StringToChar16("obj_Cor10");
char16 bonusB = StringToChar16("obj_Cor11");
char16 bonusC = StringToChar16("obj_Cor12");
char16 bonusD = StringToChar16("obj_Cor13");
char16 bonusE = StringToChar16("obj_Cor14");
char16 bonusF = StringToChar16("obj_Cor15");
char16 bonusG = StringToChar16("obj_Cor16");
char16 bonusH = StringToChar16("obj_Cor17");
char16 bonusI = StringToChar16("obj_Cor18");
char16 bonusJ = StringToChar16("obj_Cor19");
boolean bEndLevel = false;
propRef LAAT;
propRef Rep1;
propRef Rep2;
propRef Cis1;
propRef Cis2;
propRef X1Strike;

propRef LAATSpline;
propRef ChaseSpline1;
propRef ChaseSpline2;
propRef X1Spline;
propRef p = getPlayerPropRefFromID(GetPlayerId());

///////////// Include Defaults //////////////////////////////////////////////

callback void playerKilled(int victimId, int killerId, int iOppTeam)
{
    int iNumActive = BFObjectiveGetNumActive();
    int i = 0;

    for (i=0; i<iNumActive; i++)
    {
	int iActive = BFObjectiveGetNumForNthActive(i);
	if (lib_playerKilled(victimId, killerId, iOppTeam, iActive)) 
	{
	    nextObjective(iActive);
	}
    }
}
function void Trigger(char16 inTriggerProp)
{    
    int iResult = 0;
    int iNumActive = BFObjectiveGetNumActive();
    int i = 0;
    int iActive = 0;
    for (i=0; i<iNumActive; i++)
    {
	iActive = BFObjectiveGetNumForNthActive(i);
	iResult = lib_triggeredProp(inTriggerProp, iActive);
	iResult = ObjectiveTriggerTests(iActive, inTriggerProp, iResult);

	if (iResult >= 1) nextObjective(iActive);
    }
}


callback int triggeredProp(int inType, char16 inTriggerProp, int pId)
{    
    int iNumActive = BFObjectiveGetNumActive();

    int i = 0;
    int iActive = 0;
    Trigger(inTriggerProp);   
    for (i=0; i<iNumActive; i++)
    {
	iActive = BFObjectiveGetNumForNthActive(i);
	int iSub = BFObjectiveGetSub(i);
	
	if (iActive == 8)
	{
	    if (!char16cmp(inTriggerProp, "EscapePod1")||!char16cmp(inTriggerProp, "EscapePod2")||!char16cmp(inTriggerProp, "EscapePod3")||!char16cmp(inTriggerProp, "EscapePod4")||!char16cmp(inTriggerProp, "EscapePod5")||!char16cmp(inTriggerProp, "EscapePod6"))
	    {
		JumpToObjective(40, true);
	    }
	}	
    }
    return 0;
}

//int iObjective = BFObjectiveGetCurrent();//GetLevelVarInt("mObjective");
//int iSubObjective = BFObjectiveGetSub(iObjective);//GetLevelVarInt("mSubObjective");       
function void ObjectiveSetupCheck()
{
    int iTempObj = GetLevelVarInt("iObjLV");
    
    if (iTempObj != -1)
    {
        char16 cName = BFObjectiveGetName(iTempObj);
        if (ObjectiveSetup(cName, iTempObj, BFObjectiveGetSub(iTempObj)))
            SetLevelVarInt("iObjLV", -1);

        waitForGameTime(0.1f);        
    }
}

function void SetObjectiveSetup(int iObj)
{
    logStr("SetObjectiveSetup Called");
    logInt(iObj);
    SetLevelVarInt("iObjLV", iObj);
}

function void nextObjective(int inObjNum) 
{    
    int result = lib_nextObjective(inObjNum);

    if(result == 1)
    {
        //if next objective returns 1 it has updated a core objective and automatically moved us onto the next
        //so do objective setup with current objective
        if (!Skip)
        {
            SetObjectiveSetup(BFObjectiveGetCurrent());
        }
    }

    if(result == 2)
    {
        //if nextobjective returns 2 it has updated a bonus objective so we will want to 
        //objective setup with the objective we passed to next objective
        if (!Skip)
        {
            SetObjectiveSetup(inObjNum);
        }
    }
}

function void JumpToObjective(int iStartObj, boolean Skiping)
{       
    SetNumSubObjectives(0, iStartObj);
    BFObjectiveSetJumpTo(iStartObj);
    	
    nextObjective(BFObjectiveGetCurrent());
    
    char16 tSpawn;
    tSpawn = LevelVarToChar16("mCurrentSpawner");
    if (propExists(propRefFromChar16(tSpawn)))
	propTeleportToProp(getPlayerPropRefFromID(GetPlayerId()), propRefFromChar16(tSpawn));        
    
    logStr("Jumped To Objective");
    logInt(BFObjectiveGetCurrent());
}

callback void ObjectiveTimeExpired(char16 objName)
{
    int objNum = 0;
    objNum = BFObjectiveGetNumber(objName);   
    if (lib_ObjTimeExpired(objNum))
    {
	nextObjective(objNum);
    }
}

callback void playerSpawned(char16 teamName, int playerId)
{
    propRef p = getPlayerPropRefFromID(playerId);    
}

callback void finiteSpawnerComplete(char16 propId) 
{

}

callback void shipReachedScriptedSplineSegment(propRef ship, propRef spline, int segment)
{
    if((segment == 2) && (X1Strike == ship))
    {
	BFShipStartScriptedFiring(ship, 2, 2.5f);
    }

    else if(segment == 1)
    {
	BFShipStartScriptedFiring(ship, 1, 3.5f);
    }
}

/////// Defaults END /////////////////////////////////////////////


callback void gameHasStarted()
{           
}

function void ScriptHasStarted()
{
    //SetLevelVarsBFStory("obj_Cor", "corTrg"); //Objective and trigger name for the level.
    SetBFStoryPrefixes("obj_Cor", "corTrg");

    ResetObjectives("mObjTmp", 41);
    
    SetPropRefInvincible(propRefFromName("rep_venator1"), true);
    SetPropRefInvincible(propRefFromName("rep_venator2"), true);
    SetPropRefInvincible(propRefFromName("rep_venator3"), true);
    SetPropRefInvincible(propRefFromName("rep_venator4"), true);
    SetPropRefInvincible(propRefFromName("repfrig1"), true);
    SetPropRefInvincible(propRefFromName("repfrig2"), true);
    SetPropRefInvincible(propRefFromName("cruisership2S"), true);
    SetPropRefInvincible(propRefFromName("cisfrig2_"), true);
    SetPropRefInvincible(propRefFromName("cisfrig3_"), true);
    SetPropRefInvincible(propRefFromName("cisfrig6_"), true);
    SetPropRefInvincible(propRefFromName("cisfrig9_"), true);
    SetPropRefInvincible(propRefFromName("cisfrig7_"), true);
    SetPropRefInvincible(propRefFromName("cisfrig5_"), true);
    SetPropRefInvincible(propRefFromName("cisfrig8_"), true);
    SetPropRefInvincible(propRefFromName("cisfrig1_"), true);
    SetPropRefInvincible(propRefFromName("ciscruiser1_"), true);
    SetPropRefInvincible(propRefFromName("commander_"), true);
    SetPropRefInvincible(propRefFromName("deadclone_"), true);
    SetPropRefInvincible(propRefFromName("magna_"), true);
    SetPropRefInvincible(propRefFromName("Obj4Turret1"), true);
    SetPropRefInvincible(propRefFromName("Obj4Turret2"), true);
    SetPropRefInvincible(propRefFromName("Obj4Turret3"), true);
    SetPropRefInvincible(propRefFromName("Obj4Turret4"), true);
    SetPropRefInvincible(propRefFromName("Obj4Turret5"), true);
    SetPropRefInvincible(propRefFromName("Obj4Turret6"), true);
    SetPropRefInvincible(propRefFromName("Obj4Turret7"), true);
    SetPropRefInvincible(propRefFromName("Obj4Turret8"), true);
    SetPropRefInvincible(propRefFromName("Obj4Turret9"), true);
    SetPropRefInvincible(propRefFromName("Obj4Turret10"), true);
    SetPropRefInvincible(propRefFromName("Obj4Turret11"), true);
    SetPropRefInvincible(propRefFromName("rep_arc1701"), true);
    SetPropRefInvincible(propRefFromName("rep_arc1702"), true);
    SetPropRefInvincible(propRefFromName("grndsqd01"), true);
    SetPropRefInvincible(propRefFromName("grndsqd02"), true);
    SetPropRefInvincible(propRefFromName("grndsqd03"), true);
    SetPropRefInvincible(propRefFromName("grndsqd04"), true);
//    JumpToObjective(1, true); //start objective
    if (BFObjectiveGetCurrent() == 0)
    {
	JumpToObjective(1, true);
    }
    else
    {
	JumpToObjective(BFObjectiveGetCurrent(), true);
    }
}

function int ObjectiveTriggerTests(int iObjective, char16 inTriggerProp, int iResult) 
{
    int iSubObjective = BFObjectiveGetSub(iObjective);

    if (iResult == 0)
    {
	if ((iObjective >= 1) && (Char16Cmp(inTriggerProp, "corTrg10") == 0)&& !ActivatedBonusObjectiveA)
	{
//	    BFObjectiveAddBonus(BonusA, 10);
//	    AddVMDebugHUDMsg("Bonus Objective A", 1, "test_objective_message");
	    ActivatedBonusObjectiveA = 1;
	    ObjectiveSetup(BonusA, 10, 0);
	}
	else if ((iObjective>=1 ) && (Char16Cmp(inTriggerProp, "corTrg11") == 0) && !ActivatedBonusObjectiveB)
	{
//	    BFObjectiveAddBonus(BonusB, 11);
//	    AddVMDebugHUDMsg("Bonus Objective B", 1, "test_objective_message");
	    ActivatedBonusObjectiveB =1;
	    ObjectiveSetup(BonusB, 11, 0);
	}
	else if ((iObjective >= 3) && (Char16Cmp(inTriggerProp, "corTrg15") == 0)&& (!ActivatedBonusObjectiveF))
	{
//	    BFObjectiveAddBonus(BonusF, 15);
//	    AddVMDebugHUDMsg("Bonus Objective F", 1, "test_objective_message");
	    forceTriggerTriggered(propRefFromName("southGateTrig_"));
	    ActivatedBonusObjectiveF = 1;
	    ObjectiveSetup(BonusF, 15, 0);
	}
	else if ((iObjective >= 5) && (Char16Cmp(inTriggerProp, "corTrg18") == 0)&& !ActivatedBonusObjectiveI) 
	{
//	    BFObjectiveAddBonus(BonusI, 18);
//	    AddVMDebugHUDMsg("Bonus Objective I", 1, "test_objective_message");
	    ActivatedBonusObjectiveI = 1;
	    ObjectiveSetup(BonusI, 18, 0);
	}
	else if ((iObjective == 2) && (Char16Cmp(inTriggerProp, "corTrg2_1") == 0))
	{
	    nextObjective(iObjective);
	}
    }    
    else if (iResult >= 1)
    {
        AddVMDebugHUDMsg("Obj ", iObjective, "test_objective_message");
	AddVMDebugHUDMsg("Sub ", iSubObjective, "test_objective_message");

	if (iObjective == 6)
	{
	    AddVMDebugHUDMsg("Obj6", 0, "test_objective_message");
	    if (iSubObjective == 0)
	    {
		AddVMDebugHUDMsg("Obj6_1", 0, "test_objective_message");
		if (iResult == 2)
		{
		    AddVMDebugHUDMsg("SUCCESS ", 0, "test_objective_message");
		    BFObjectiveSetSub(iObjective, 1);
		}
	    }
	}
    }

    AddVMDebugHUDMsg("Result ", iResult, "test_objective_message");
    
    return iResult;
}

function void ObjectiveTests(int iObjective) 
{
//    int iObjective = BFObjectiveGetCurrent();//GetLevelVarInt("mObjective");
    int iSubObjective = BFObjectiveGetSub(iObjective);//GetLevelVarInt("mSubObjective");

    if ((iObjective <= 2) && IsPlayerState("stateRemote") && !ActivatedBonusObjectiveB)
    {
	BFObjectiveAddBonus(BonusB, 11);
	AddVMDebugHUDMsg("Bonus Objective B", 1, "test_objective_message");
	ActivatedBonusObjectiveB = 1;
	ObjectiveSetup(BonusB, 11, 0);
    }
    
    else if ((iObjective >= 2) && IsPlayerState("stateIonCannon") && !ActivatedBonusObjectiveD)
    {
	ActivatedBonusObjectiveD = 1;
	ObjectiveSetup(BonusD, 13, 0);
    }

    if (iObjective == 1)
    {
	lib_SpawnActiveVehicleG(propRefFromName("ARCSpwns"), propRefFromName("lvlStartDOF"), "rep_clonetrooper_npc_story", "rep_starfighter", 50, 1);
	waitForGameTime(0.1f);
	lib_SpawnActiveVehicleG(propRefFromName("VSpwns"), propRefFromName("lvlStartDOF"), "rep_clonetrooper_npc_story", "rep_vwing", 50, 1);
	waitForGameTime(0.1f);
	lib_SpawnActiveVehicleG(propRefFromName("DroidSpwns"), propRefFromName("lvlStartDOF"), "cis_battledroid_npc_story", "cis_droidfighter", 50, 1);
	waitForGameTime(0.1f);
	lib_SpawnActiveVehicleG(propRefFromName("TriSpwns"), propRefFromName("lvlStartDOF"), "cis_battledroid_npc_story", "cis_tri_trail", 50, 1);
	waitForGameTime(0.1f);
	propRef g = propRefFromName("Spwn1-1");
	propRef p0 = GetNthPropFromGroup(g, 0);
    	
	if (propExists(p0))
	{
	    waitForGameTime(20.f);
	    propKill(p0);
	}
/*	else if (propExists(p1))
	{
	    waitForGameTime(15.f);
	    propKill(p1);
	}*/
    }

    else
    {
	if ((iObjective == 4) || (iObjective == 5))
	{
	    lib_SpawnActiveVehicleG(propRefFromName("repSpaceArc"), propRefFromName("SpaceArcDOF_"), "rep_clonetrooper_npc_story", "rep_arc170", 50, 3);
	    waitForGameTime(0.1f);
	    lib_SpawnActiveVehicleG(propRefFromName("repSpaceJedi"), propRefFromName("SpaceJediDOF_"), "rep_clonetrooper_npc_story", "rep_starfighter", 50, 4);
	    waitForGameTime(0.1f);
	    lib_SpawnActiveVehicleG(propRefFromName("repSpaceV"), propRefFromName("SpaceVDOF_"), "rep_clonetrooper_npc_story", "rep_vwing", 50, 4);
	    waitForGameTime(0.1f);
	    lib_SpawnActiveVehicleG(propRefFromName("cisSpaceTri"), propRefFromName("SpaceTriDOF_"), "cis_battledroid_npc_story", "cis_tri_trail", 50, 8);
	    waitForGameTime(0.1f);
	    lib_SpawnActiveVehicleG(propRefFromName("cisSpaceDroid"), propRefFromName("SpaceDroidDOF_"), "cis_battledroid_npc_story", "cis_droidfighter", 50, 8);
	    waitForGameTime(0.1f);
	    lib_SpawnActiveVehicleG(propRefFromName("cisSpaceDroid2"), propRefFromName("SpaceDroid2DOF_"), "cis_battledroid_npc_story", "cis_droidfighter", 50, 8);
	    waitForGameTime(0.1f);
	}
    }

    if ((iObjective <= 3) && (!HasActivatedStarFighter))
    {
	if (IsPlayerInVehicle("STR_VEHICLE_NAME_REP_STARFIGHTER") || IsPlayerInVehicle("STR_VEHICLE_NAME_REP_VWING") || IsPlayerInVehicle("STR_VEHICLE_NAME_REP_ARC170") || IsPlayerInVehicle("STR_VEHICLE_NAME_REP_GUNSHIP"))
	{
	    AddVMDebugHUDMsg("PlayerIsInShip", 1, "test_objective_message");
	    HasActivatedStarFighter = true;
	    waitForGameTime(0.1f);
	    JumpToObjective(4, iObjective);	    
	}
    }

    if ((iObjective == 4) && (IsPlayerInVehicle("STR_VEHICLE_NAME_REP_ARC170")))
    {
	nextObjective(iObjective);
    }
/*
    if ((iObjective == 4) && (!ActivatedBonusObjectiveF))
    {
	BFObjectiveAddBonus(BonusF, 15);
	AddVMDebugHUDMsg("Bonus Objective F", 1, "test_objective_message");
	forceTriggerTriggered(propRefFromName("southGateTrig_"));
	ActivatedBonusObjectiveF = 1;
	ObjectiveSetup(BonusF, 15, 0);
    }

    else if ((iObjective == 5) && (HasActivatedStarFighter) && (!ActivatedBonusObjectiveG))
    {
	ActivatedBonusObjectiveG = 1;
	BFObjectiveAddBonus(BonusG, 16);
	ObjectiveSetup(BonusG, 16, 0);
    }
*/    
    else
    {
	if (iObjective == 5)
	{
	    if (iSubObjective == 2)
	    {
		if (!IsPlayerInVehicle("STR_VEHICLE_NAME_REP_STARFIGHTER"))
		{
		    AddVMDebugHUDMsg("Nice Landing X2!", 1, "test_objective_message"); 
		    nextObjective(iObjective);
		}
	    }
	}
    }
    
    if (iObjective == 6)
    {
	if (iSubObjective == 3)
	{
	    if (!droideka1_destroyed && !propValid(propRefFromName("reacDDeka1")))
	    {
		droideka1_destroyed = 1;
	    }
	    if (!droideka2_destroyed && !propValid(propRefFromName("reacDDeka2")))
	    {
		droideka2_destroyed = 1;
	    }
	    if (!droideka3_destroyed && !propValid(propRefFromName("reacDDeka3")))
	    {
		droideka3_destroyed = 1;
	    }
	    if (droideka1_destroyed && droideka2_destroyed && droideka3_destroyed)
	    { 
		nextObjective(iObjective);
	    }
	}
    }

    else if (iObjective == 7)
    {
	reactorconsole_destroyed = 1;
	propSetVisible(0, shield);	
    }
    
    else if (iObjective == 7 && !reactor_destroyed && !propValid(propRefFromName("cisivreact1")))
    {
	reactor_destroyed = 1;
	propSetVisible(0, shield);
	nextObjective(iObjective);
    }
    else if ((iObjective == 10) && (!spawnedObjectiveTenAI))
    {
	ActivateSpawner("Spwn-10");
	spawnedObjectiveTenAI = 1;
    }

    else if ((iObjective == 10) && (spawnedObjectiveTenAI) && (!CatchTen))
    {	
	CatchTen = 1;
    	SetObjectiveKillSpawners(1, iObjective);
    }

    else if ((iObjective == 11) && (!SpawnedInTransports))
    {
	SpawnedInTransports =1;
	AddVMDebugHUDMsg("Destroy transport gameplay here", 1, "test_objective_message");
    }
    else if ((iObjective == 13) && (ActivatedBonusObjectiveD) && !propExists(propRefFromName("cisfrig1_")))
    {
	nextObjective(iObjective);
    }
    else if (iObjective == 14)
    {
	if ((!SpawnedInAATs))
	{
	    AddGunner(3, propRefFromName("Spwn-14"));
	    AddGunner(4, propRefFromName("Spwn-14"));
	    AddAAT(3, propRefFromName("Spwn-14"));
	    AddAAT(4, propRefFromName("Spwn-14"));

	    SpawnedInAATs = 1;
	}
	else
	{
	    propRef g = propRefFromName("Spwn-14");
	    propRef p0 = GetNthPropFromGroup(g, 0);
	    propRef p1 = GetNthPropFromGroup(g, 1);
	    propRef p2 = GetNthPropFromGroup(g, 2);
	    propRef p3 = GetNthPropFromGroup(g, 3);	    

	    if ((!propExists(p0)) && (!propExists(p1)) && (!propExists(p2)) && (!propExists(p3)))
	    {
		nextObjective(iObjective);
	    }
	}
    }
    else if (iObjective == 15) 
    {
	if (!turret1_destroyed && !propValid(propRefFromName("H_Tur_Veh1_")))
	{
	    turret1_destroyed = 1;
	}

	if (!turret2_destroyed && !propValid(propRefFromName("H_Tur_Veh2_")))
	{
	    turret2_destroyed = 1;
	}

	if (turret1_destroyed && turret2_destroyed)
	{
	    nextObjective(iObjective);
	}
    }        
    else if (iObjective == 16)
    {
	if (!obj4turret1_destroyed && !propValid(propRefFromName("Obj4Turret1")))
	{
	    obj4turret1_destroyed = 1;
	}
	else if (!obj4turret2_destroyed && !propValid(propRefFromName("Obj4Turret2")))
	{
	    obj4turret2_destroyed = 1;
	}
	else if (!obj4turret3_destroyed && !propValid(propRefFromName("Obj4Turret3")))
	{
	    obj4turret3_destroyed = 1;
	}
	else if (!obj4turret4_destroyed && !propValid(propRefFromName("Obj4Turret4")))
	{
	    obj4turret4_destroyed = 1;
	}
	else if (!obj4turret5_destroyed && !propValid(propRefFromName("Obj4Turret5")))
	{
	    obj4turret5_destroyed = 1;
	}
	else if (!obj4turret6_destroyed && !propValid(propRefFromName("Obj4Turret6")))
	{
	    obj4turret6_destroyed = 1;
	}
	else if (!obj4turret7_destroyed && !propValid(propRefFromName("Obj4Turret7")))
	{
	    obj4turret7_destroyed = 1;
	}
	else if (!obj4turret8_destroyed && !propValid(propRefFromName("Obj4Turret8")))
	{
	    obj4turret8_destroyed = 1;
	}
	else if (!obj4turret9_destroyed && !propValid(propRefFromName("Obj4Turret9")))
	{
	    obj4turret9_destroyed = 1;
	}
	else if (!obj4turret10_destroyed && !propValid(propRefFromName("Obj4Turret10")))
	{
	    obj4turret10_destroyed = 1;
	}
	else if (!obj4turret11_destroyed && !propValid(propRefFromName("Obj4Turret11")))
	{
	    obj4turret11_destroyed = 1;
	}
	else if (obj4turret1_destroyed && obj4turret2_destroyed && obj4turret3_destroyed && obj4turret4_destroyed 
		&&obj4turret5_destroyed && obj4turret6_destroyed && obj4turret7_destroyed && obj4turret8_destroyed 
		&& obj4turret9_destroyed && obj4turret10_destroyed && obj4turret11_destroyed)
	{ 
	    nextObjective(iObjective);
	}
    }
    else if (iObjective == 17)
    {
	int count = CountMultipleAttachedProps(cruiserRef);
	AddVMDebugHUDMsg("count ", count, "test_objective_message");
	if (count <= 5)
	{
	    nextObjective(iObjective);
	}
	else
	{
	}
    }
    else if (iObjective == 18)
    {
	if (!gunconsole1_destroyed && !propValid(propRefFromName("cisivcon1")))
	{
	    gunconsole1_destroyed = 1;
	}

	if (!gunconsole2_destroyed && !propValid(propRefFromName("cisivcon3")))
	{
	    gunconsole2_destroyed = 1;
	}

	if (!gunconsole3_destroyed && !propValid(propRefFromName("cisivcon4")))
	{
	    gunconsole3_destroyed = 1;
	}

	if (gunconsole1_destroyed && gunconsole2_destroyed && gunconsole3_destroyed)
	{ 
	    logStr("NextObjective called in objectivetests:");
	    logInt(iObjective);
	    nextObjective(iObjective);
	}
    }
}

///////////////////////////////////////// OBJECTIVES

function void AddAAT(int i, propRef pGroup)
{
    propRef pGunner;
    char16 cName;
    cName = StringCatInt("aatgun", i, "_");
    pGunner = SpawnCharacterBF("cis_battledroid_npc_story", propRefFromChar16(cName), vector(0, 0, 0));
    cName = StringCatInt("aatDOF", i, "_");
    propRef pTank;
    pTank = SpawnAIVehicleWithObjectives(propRefFromChar16(cName), "cis_battledroid_npc_story", "cis_aat_reduced_npc_damage", 0, false, k_seatPos_driver, StringToChar16(""));
    PassengerVehicleBF(pGunner, pTank, false);
    SetAICanDrive(pTank, false);
    addPropToGroup(pGroup, pTank);
    waitForGameTime(0.1f);
}

function void AddHailfire(int i, propRef pGroup)
{
    char16 cName;
    cName = StringCatInt("GunnerDOF", i, "_");
    propRef pHailfire;
    pHailfire = SpawnAIVehicleWithObjectives(propRefFromChar16(cName), "cis_battledroid_npc_story", "cis_hailfire", 0, false, k_seatPos_driver, StringToChar16(""));
    SetAICanDrive(pHailfire, true);
    addPropToGroup(pGroup, pHailfire);
    waitForGameTime(0.1f);
}

function void AddGunner(int i, propRef pGroup)
{
    char16 cName;
    cName = StringCatInt("GunnerDOF", i, "_");
    propRef pGunnerOnly;
    pGunnerOnly = SpawnAIVehicleWithObjectives(propRefFromChar16(cName), "cis_battledroid_npc_story", "cis_aat_reduced_npc_damage", 0, false, k_seatPos_passenger, StringToChar16(""));
    SetAICanDrive(pGunnerOnly, false);
    addPropToGroup(pGroup, pGunnerOnly);
    waitForGameTime(0.1f);
}

function void AddStap(int i, propRef pGroup)
{
    char16 cName;
    cName = StringCatInt("stapDOF", i, "_");
    propRef pStap;
    pStap = SpawnAIVehicleWithObjectives(propRefFromChar16(cName), "cis_battledroid_npc_story", "cis_stap", 0, false, k_seatPos_driver, StringToChar16(""));
    SetAICanDrive(pStap, true);
    addPropToGroup(pGroup, pStap);
    waitForGameTime(0.1f);
}
	    
function void WingMan(propRef pGroup)
{
    logStr("WingMan Request");
    propRef npc;
    int iAlive = 0;
    int iCount = 0;
    int iNumProps = propGroupGetNumOfProps(pGroup);
    int iPlayer = (GetPlayerId());

    int i = 0;
   // while ((iAlive == 0)&&(iCount < iNumProps))
    
    for (i=0; i<propGroupSpCountAliveSpawnedProps(npc); i++)
    {
	npc = GetPropFromGroupSpawner(pGroup, i, 0);
	if (propExists(npc))
	{
	    logStr("Found someone who is alive");
	    break;
	}
	waitForGameTime(0.1f);
    }
   
    if (propExists(npc)) 
    {
	logStr("Setting Guy To be My Wingman");
        chrRef wing;
	wing = chrRefFromPropRef(npc);
        BFSetFlyingAIFollowPlayer(wing, iPlayer);
    }
}

function boolean ObjectiveSetup(char16 cObjectiveName, int iObjective, int iSubObjective)
{
    if (iObjective == 1)  // Destroy the shield generator
    {
	if (iSubObjective == 1)
	{
	    lib_SetupGroupZone(cObjectiveName, "Guard", "Guard", "", k_objtype_hold_area);
	    lib_SetupGroupZone(cObjectiveName, "clubT", "clubT", "", k_objtype_clear_area);
	    lib_SetupGroupZone(cObjectiveName, "NTower_SPG_", "North Tower", "", k_objtype_hold_area);
	    lib_SetupGroupZone(cObjectiveName, "Generator_SPG_", "Generator", "Generator", k_objtype_hold_area);
	    lib_SetupGroupZone(cObjectiveName, "bridge_SPG_", "Bridge", "Bridge", k_objtype_clear_area);
	    waitForGameTime(0.1f);	    
	    BFNPCTeamObjectiveSetTrackTargets (cObjectiveName, 1, false);
	    BFNPCTeamObjectiveSetTrackTargets (cObjectiveName, 0, false);

	    SetObjectiveTriggered(true, iObjective);	    
	}

	else if (iSubObjective == 2)
	{

	    X1Strike = SpawnAIVehicle(propRefFromName("X1DOF_"), "rep_clonetrooper_npc_story", "rep_starfighter", 0, false, k_seatPos_driver);
	    X1Spline = propRefFromName("X1Spline_");
	    BFShipFollowScriptedSplineNoAvoidance(X1Strike, X1Spline);
	    waitForGameTime(0.1f);    

	    spawnGroupSetActive(propRefFromName("Spwn-2"), true);
	    
	    SetObjectiveTimer(1, iObjective);
	}
	    
	else
	{
	    BFAddFlyingAIPatrolZone(vector(228.5f, 354.4f, 177.63f),500.0);

	    lib_SetupTeamZone(cObjectiveName, 1, "Obj-1 Target", "", k_objtype_clear_area);
	    lib_SetupTeamZone(cObjectiveName, 0, "Obj-1 Target", "", k_objtype_hold_area);
	    lib_SetupGroupZone(cObjectiveName, "NTower_SPG_", "North Tower", "North Tower", k_objtype_hold_area);
	    lib_SetupGroupZone(cObjectiveName, "Generator_SPG_", "Generator", "Generator", k_objtype_hold_area);
	    lib_SetupGroupZone(cObjectiveName, "bridge_SPG_", "Bridge", "Bridge", k_objtype_clear_area);

	    AddGunner(1, propRefFromName("Spwn1-1"));
//	    AddGunner(2, propRefFromName("Spwn1-1"));
	    waitForGameTime(0.1f);	    
	    propRef tank1;
	    tank1 = SpawnPropFromTemplate("cis_aat", propRefFromName("GunnerDOF2_"), vector(0, 0, 0));
	    SetAICanDrive(tank1, false);
	    LAAT = SpawnAIVehicle(propRefFromName("LAATDOF"), "rep_clonetrooper_npc_story", "rep_gunship", 0, false, k_seatPos_driver);
	    LAATSpline = propRefFromName("LAATSpline");
	    BFShipFollowScriptedSplineNoAvoidance(LAAT, LAATSpline);
	    waitForGameTime(0.1f);
	    Rep1 = SpawnAIVehicle(propRefFromName("repChaseDOF1_"), "rep_clonetrooper_npc_story", "rep_starfighter", 0, false, k_seatPos_driver);
	    ChaseSpline1 = propRefFromName("Chase1");
	    BFShipFollowScriptedSplineNoAvoidance(Rep1, ChaseSpline1);
	    waitForGameTime(0.1f);
	    Rep2 = SpawnAIVehicle(propRefFromName("repChaseDOF2_"), "rep_clonetrooper_npc_story", "rep_starfighter", 0, false, k_seatPos_driver);
	    ChaseSpline2 = propRefFromName("Chase2");
	    BFShipFollowScriptedSplineNoAvoidance(Rep2, ChaseSpline2);
	    waitForGameTime(0.1f);    
	    Cis1 = SpawnAIVehicle(propRefFromName("drdChaseDOF1_"), "cis_battledroid_npc_story", "cis_tri_trail", 0, false, k_seatPos_driver);
	    BFShipFollowScriptedSplineNoAvoidance(Cis1, ChaseSpline1);
	    waitForGameTime(0.1f);
	    Cis2 = SpawnAIVehicle(propRefFromName("drdChaseDOF2_"), "cis_battledroid_npc_story", "cis_tri_trail", 0, false, k_seatPos_driver);
	    BFShipFollowScriptedSplineNoAvoidance(Cis2, ChaseSpline2);
	    waitForGameTime(0.5f);
	    chrAIJoinGroup( propRefFromName("grndsqd01"), "player");
	    chrAIJoinGroup( propRefFromName("grndsqd02"), "player");	
	    SetNumSubObjectives(2, iObjective);
	    SetObjectiveTimer(5, iObjective);
	}
    }

    else if (iObjective == 2) // Defend against the CIS counter attack
    {
	spawnGroupSetActive(propRefFromName("mysqd1_"), true); //spawn in my squad
	
	lib_SetupTeamZone(cObjectiveName, 1, "Obj-2 Home", "", k_objtype_clear_area);
	lib_SetupTeamZone(cObjectiveName, 0, "Obj-2 Home", "", k_objtype_clear_area);
	spawnGroupSetActive(propRefFromName("Guard"), false);
	waitForGameTime(0.1f);
	lib_SetupGroupZone(cObjectiveName, "SBD_ST_SPG_", "STApproach", "", k_objtype_hold_area);
	lib_SetupGroupZone(cObjectiveName, "enemy3_", "rightsideH", "", k_objtype_hold_area);
	lib_SetupGroupZone(cObjectiveName, "left_SPG_", "leftsideH", "", k_objtype_hold_area);
	waitForGameTime(0.1f);
	lib_SetupGroupZone(cObjectiveName, "garden_SPG_", "altcentreH", "", k_objtype_hold_area);
	lib_SetupGroupZone(cObjectiveName, "southback_", "southbackH", "", k_objtype_hold_area);
	lib_SetupGroupZone(cObjectiveName, "final_SPG_", "repFin", "", k_objtype_hold_area);
	SetPropRefInvincible(propRefFromName("repfrig1"), true);

	BFNPCGroupObjectiveSetTargetProp(cObjectiveName, "Generator_SPG_", p , 10.f, 20.f);
	BFNPCGroupObjectiveSetType(cObjectiveName, "Generator_SPG_", k_objtype_attack_prop);
	waitForGameTime(0.1f);
//	BFObjectiveAddBonus(BonusE, 14);

	propRef tank2;
	propRef tank3;
	propRef tank4;
	propRef tank5;
	tank2 = SpawnPropFromTemplate("cis_aat", propRefFromName("GunnerDOF3_"), vector(0, 0, 0));
	tank3 = SpawnPropFromTemplate("cis_aat", propRefFromName("GunnerDOF4_"), vector(0, 0, 0));
	tank4 = SpawnPropFromTemplate("cis_hailfire", propRefFromName("aatDOF3_"), vector(0, 0, 0));
	tank5 = SpawnPropFromTemplate("cis_hailfire", propRefFromName("aatDOF4_"), vector(0, 0, 0));
	SetAICanDrive(tank2, false);
	SetAICanDrive(tank3, false);
	SetAICanDrive(tank4, false);
	SetAICanDrive(tank5, false);
	waitForGameTime(0.1f);	
	chrReplenishInventoryItemsOfType(p, "AMMO");
	propRef cisfrig1 = propRefFromName("cisfrig1_");
	propKill(cisfrig1);

	SetObjectiveKillSpawners(1, iObjective);	
    }

    else if (iObjective == 3) // Fight to the south tower
    {
//	CheckPointSave();

        spawnGroupSetActive(propRefFromName("regroup_SPG_"), true);
	spawnGroupSetActive(propRefFromName("underpass_SPG_"), true);
	spawnGroupSetActive(propRefFromName("Spwn-1"), false);	
	lib_SetupGroupZone(cObjectiveName, "regroup_SPG_", "underpass", "", k_objtype_clear_area);
	lib_SetupTeamZone(cObjectiveName, 1, "underpass", "", k_objtype_hold_area);
	lib_SetupTeamZone(cObjectiveName, 0, "underpass", "", k_objtype_clear_area);
	waitForGameTime(0.1f);
	lib_SetupGroupZone(cObjectiveName, "SBD_ST_SPG_", "STApproach", "", k_objtype_clear_area);
	lib_SetupGroupZone(cObjectiveName, "enemy3_", "rightsideH", "", k_objtype_hold_area);
	lib_SetupGroupZone(cObjectiveName, "left_SPG_", "leftsideH", "", k_objtype_hold_area);
	waitForGameTime(0.1f);	
	lib_SetupGroupZone(cObjectiveName, "garden_SPG_", "altcentreH", "", k_objtype_hold_area);
	lib_SetupGroupZone(cObjectiveName, "southback_", "southbackH", "", k_objtype_hold_area);
	lib_SetupGroupZone(cObjectiveName, "final_SPG_", "repFin", "", k_objtype_clear_area);
	spawnGroupSetActive(propRefFromName("Spwn-2"), false);
	spawnGroupSetActive(propRefFromName("mysqd1_"), false);
	waitForGameTime(0.1f);
	KillNPCsInZone(zoneRefFromName("Obj-1 Home"));	
	KillNPCsInZone(zoneRefFromName("North Tower"));	
	KillNPCsInZone(zoneRefFromName("Generator"));
	KillNPCsInZone(zoneRefFromName("Bridge"));	
	KillNPCsInZone(zoneRefFromName("Generator"));
	waitForGameTime(0.1f);	
	chrAIJoinGroup( propRefFromName("grndsqd03"), "player" );
	chrAIJoinGroup( propRefFromName("grndsqd04"), "player" );
	chrReplenishInventoryItemsOfType(p, "AMMO");

//	BFObjectiveRemoveBonus(BonusB, 11);
	
	SetObjectiveTriggered(true, iObjective);

    }

    else if (iObjective == 4) // Join the attack on the CIS cruiser.
    {
	SetPropRefInvincible(propRefFromName("cisfrig5_"), false);
	SetPropRefInvincible(propRefFromName("cisfrig8_"), false);	    
//	BFNPCGroupObjectiveSetTargetProp(cObjectiveName, "cisSpaceDroid2", p , 100.f, 500.f);
//	BFNPCGroupObjectiveSetType(cObjectiveName, "cisSpaceDroid2", k_objtype_attack_prop);
//	BFNPCGroupObjectiveSetTargetProp(cObjectiveName, "cisSpaceTri", p , 100.f, 500.f);
//	BFNPCGroupObjectiveSetType(cObjectiveName, "cisSpaceTri", k_objtype_attack_prop);

//	BFNPCGroupObjectiveSetTargetProp(cObjectiveName, "repSpaceV", p , 100.f, 500.f);
//	BFNPCGroupObjectiveSetType(cObjectiveName, "repSpaceV", k_objtype_defend_prop);
//	BFNPCGroupObjectiveSetTargetProp(cObjectiveName, "repSpaceJedi", p , 100.f, 500.f);
//	BFNPCGroupObjectiveSetType(cObjectiveName, "repSpaceJedi", k_objtype_defend_prop);

	propSetCanBeActivated(propRefFromName("corTrg16"),true);
	BFKillAllNPCsFromSpawner("enemy3_");
	waitForGameTime(0.1f);
	BFKillAllNPCsFromSpawner("left_SPG_");
	waitForGameTime(0.1f);
	BFKillAllNPCsFromSpawner("garden_SPG_");
	waitForGameTime(0.1f);
	BFKillAllNPCsFromSpawner("southback_");
	waitForGameTime(0.1f);
	BFKillAllNPCsFromSpawner("Guard");
	waitForGameTime(0.1f);
	BFKillAllNPCsFromSpawner("mysqd1_");
	waitForGameTime(0.1f);
	BFKillAllNPCsFromSpawner("Spwn-1");
	waitForGameTime(0.1f);
	BFKillAllNPCsFromSpawner("Spwn-2");

	spawnGroupSetActive(propRefFromName("regroup_SPG_"), false);
	spawnGroupSetActive(propRefFromName("underpass_SPG_"), false);
	KillNPCsInZone(zoneRefFromName("underpass"));		
	lib_SetupTeamZone(cObjectiveName, 1, "STApproach", "", k_objtype_hold_area);
	lib_SetupTeamZone(cObjectiveName, 0, "STApproach", "", k_objtype_clear_area);
	chrReplenishInventoryItemsOfType(p, "AMMO");
	waitForGameTime(0.1f);

	BFAddFlyingAIPatrolZone(vector(1500.5f, 1400.4f, 585.63f),450.0f);
    }

    else if (iObjective == 5) // Board the cruiser
    {
	if (iSubObjective == 1)
	{
            SetObjectiveTriggered(true, iObjective);
	    propRef pVen = propRefFromName("repvenator2");
	    propKill(pVen);
	    BFKillAllNPCsFromSpawner("SBD_ST_SPG_");
	    BFKillAllNPCsFromSpawner("final_SPG_");
	    BFKillAllNPCsFromSpawner("Turret");
	    BFKillAllNPCsFromSpawner("Generator_SPG_");	   
	    BFKillAllNPCsFromSpawner("NTower_SPG_");	 	    
	    BFKillAllNPCsFromSpawner("heroes");
	    
	    waitForGameTime(0.1f);
	    WingMan(propRefFromName("repSpaceArc"));

	    BFKillAllNPCsFromSpawner("underpass_SPG_");
	    spawnGroupSetActive(propRefFromName("SBD_ST_SPG_"), false);
	    spawnGroupSetActive(propRefFromName("regroup_SPG_"), false);
	    spawnGroupSetActive(propRefFromName("final_SPG_"), false);	
	}
	else if (iSubObjective == 2)
	{
	    
	    lib_SetupTeamZone(cObjectiveName, 1, "hangerHome", "", k_objtype_hold_area);
	    lib_SetupTeamZone(cObjectiveName, 0, "hangerHome", "", k_objtype_clear_area);
	    
            spawnGroupSetActive(propRefFromName("Hanger_SPG_"), true); // spawn in units
            spawnGroupSetActive(propRefFromName("Snipe_SPG_"), true); // spawn in units
  
	    
	    BFKillAllNPCsFromSpawner("SBD_ST_SPG_");
	    BFKillAllNPCsFromSpawner("Block1_SPG_");
	    BFKillAllNPCsFromSpawner("final_SPG_");
	    BFKillAllNPCsFromSpawner("Turret");
	    BFKillAllNPCsFromSpawner("Generator_SPG_");	   
	    BFKillAllNPCsFromSpawner("NTower_SPG_");	 	    
	    BFKillAllNPCsFromSpawner("heroes");
	}

	else
	{
	    propRef cisfrig5_  = propRefFromName("cisfrig5_");
	    propKill(cisfrig5_);
	    waitForGameTime(0.1f);
	    WingMan(propRefFromName("repSpaceV"));
	    SetPropRefInvincible(propRefFromName("repvenator2"), false);    
	    BFKillAllNPCsFromSpawner("underpass_SPG_");
	    BFKillAllNPCsFromSpawner("Block1_SPG_");
//	    BFObjectiveAddBonus(BonusH, 17);
//	    ObjectiveSetup(BonusH, 17, 0);
//	    BFObjectiveRemoveBonus(BonusE, 14);
//	    BFObjectiveRemoveBonus(BonusA, 10);  
//	    BFObjectiveRemoveBonus(BonusF, 15);	    
//	    BFNPCGroupObjectiveSetTargetProp(cObjectiveName, "cisSpaceDroid2", p , 100.f, 500.f);
//	    BFNPCGroupObjectiveSetType(cObjectiveName, "cisSpaceDroid2", k_objtype_attack_prop);
//	    BFNPCGroupObjectiveSetTargetProp(cObjectiveName, "cisSpaceTri", p , 100.f, 500.f);
//	    BFNPCGroupObjectiveSetType(cObjectiveName, "cisSpaceTri", k_objtype_attack_prop);

	    BFAddFlyingAIPropCentricPatrolZone(propRefFromName("player_0"), 500.0f);
	    waitForGameTime(0.1f);
	    
//	    BFNPCGroupObjectiveSetTargetProp(cObjectiveName, "repSpaceV", p , 100.f, 500.f);
//	    BFNPCGroupObjectiveSetType(cObjectiveName, "repSpaceV", k_objtype_defend_prop);
//	    BFNPCGroupObjectiveSetTargetProp(cObjectiveName, "repSpaceJedi", p , 100.f, 500.f);
//	    BFNPCGroupObjectiveSetType(cObjectiveName, "repSpaceJedi", k_objtype_defend_prop);
	    BFRemoveFlyingAIPatrolZone(vector(228.5f, 354.4f, 177.63f));
	    BFKillAllNPCsFromSpawner("regroup_SPG_");

	    

	    
	    SetNumSubObjectives(2, iObjective);
	    SetObjectiveTimer(7, iObjective);
	}
    }
    else if (iObjective == 6) // Fight to the reactor room
    {
	if (iSubObjective == 1)
	{	    
	    spawnGroupSetActive(propRefFromName("Gun_SPG_"), true);
	    lib_SetupTeamZone(cObjectiveName, 1, "GunHome", "", k_objtype_hold_area);
	    lib_SetupTeamZone(cObjectiveName, 0, "GunHome", "", k_objtype_clear_area);
	    spawnGroupSetActive(propRefFromName("Ion"), true);
	    lib_SetupGroupZone(cObjectiveName, "Ion", "Ion", "Ion", k_objtype_clear_area);
	    lib_SetupGroupZone(cObjectiveName, "Spwn-13", "Ion", "Ion", k_objtype_hold_area);


	    SetObjectiveTriggered(true, iObjective);
	}
	else if (iSubObjective == 2)
	{
	    spawnGroupSetActive(propRefFromName("AirCon1_SPG_"), true);
	    spawnGroupSetActive(propRefFromName("AirCon2_SPG_"), true);
	    spawnGroupSetActive(propRefFromName("AirCon3_SPG_"), true); 
	    spawnGroupSetActive(propRefFromName("Jet_SPG_"), true);

	    BFNPCTeamObjectiveSetTrackTargets (cObjectiveName, 1, false);
	    BFNPCTeamObjectiveSetTrackTargets (cObjectiveName, 0, false);

	    lib_SetupTeamZone(cObjectiveName, 1, "jetroom", "repTgt", k_objtype_hold_area);
	    lib_SetupTeamZone(cObjectiveName, 0, "rephold", "repTgt", k_objtype_hold_area);

	    spawnGroupSetActive(propRefFromName("myteam_"), true);

	    lib_SetupGroupZone(cObjectiveName, "myteam_", "reactor", "repassault", k_objtype_hold_area);

	    SetObjectiveTriggered(true, iObjective);
	}

	else if (iSubObjective == 3)
	{
	    BFNPCTeamObjectiveSetTrackTargets (cObjectiveName, 1, false);
	    BFNPCTeamObjectiveSetTrackTargets (cObjectiveName, 0, false);
//	    BFObjectiveRemoveBonus(BonusI, 18);
	}

	else
	{
	    SetObjectiveTriggered(true, iObjective);
	    chrReplenishInventoryItemsOfType(p, "AMMO");

	    lib_SetupTeamZone(cObjectiveName, 1, "GunHome", "", k_objtype_clear_area);
	    lib_SetupTeamZone(cObjectiveName, 0, "GunHome", "", k_objtype_clear_area);
	    BFRemoveFlyingAIPropCentricPatrolZone(p);	      
//	    BFObjectiveRemoveBonus(BonusH, 17);	  
//	    BFObjectiveRemoveBonus(BonusG, 16);	  	    
	    AddGunner(5, propRefFromName("Spwn-13"));
	    
	    propRef tank6;
	    tank6 = SpawnPropFromTemplate("cis_hailfire", propRefFromName("GunnerDOF6_"), vector(0, 0, 0));
	    
	    BFKillAllNPCsFromSpawner("Snipe_SPG_");
	    BFKillAllNPCsFromSpawner("ARCSpwns");
	    BFKillAllNPCsFromSpawner("VSpwns");
	    BFKillAllNPCsFromSpawner("DroidSpwns");
	    BFKillAllNPCsFromSpawner("TriSpwns");
	    BFKillAllNPCsFromSpawner("repSpaceArc");
	    BFKillAllNPCsFromSpawner("repSpaceJedi");
	    BFKillAllNPCsFromSpawner("repSpaceV");
	    BFKillAllNPCsFromSpawner("cisSpaceTri");
	    BFKillAllNPCsFromSpawner("cisSpaceDroid");
	    BFKillAllNPCsFromSpawner("cisSpaceDroid2");


	    ionCannonSetRandomFiringEnabled(propRefFromName("space2ground2"), false);
	    ionCannonSetRandomFiringEnabled(propRefFromName("space2ground3"), false);
	    ionCannonSetRandomFiringEnabled(propRefFromName("space2ground4"), false);
	    ionCannonSetRandomFiringEnabled(propRefFromName("space2ground5"), false);
	    ionCannonSetRandomFiringEnabled(propRefFromName("space2ground6"), false);
	    ionCannonSetRandomFiringEnabled(propRefFromName("space2ground7"), false);
	    ionCannonSetRandomFiringEnabled(propRefFromName("space2ground8"), false);
	    ionCannonSetRandomFiringEnabled(propRefFromName("space2ground9"), false);
	    ionCannonSetRandomFiringEnabled(propRefFromName("space2ground10"), false);
	    ionCannonSetRandomFiringEnabled(propRefFromName("space2ground11"), false);
	    ionCannonSetRandomFiringEnabled(propRefFromName("space2ground12"), false);
	    ionCannonSetRandomFiringEnabled(propRefFromName("space2ground13"), false);
	    ionCannonSetRandomFiringEnabled(propRefFromName("space2ground14"), false);
	    ionCannonSetRandomFiringEnabled(propRefFromName("space2ground15"), false);
	    ionCannonSetRandomFiringEnabled(propRefFromName("space2ground16"), false);
	    ionCannonSetRandomFiringEnabled(propRefFromName("space2ground17"), false);
	    ionCannonSetRandomFiringEnabled(propRefFromName("space2ground18"), false);
	    
	    SetNumAltRoutes(1, iObjective);
	    SetNumSubObjectives(3, iObjective);
	}
    }

    else if (iObjective == 7) // Destroy the ships reactor
    {
	spawnGroupSetActive(propRefFromName("enemy_brg_"), true); // spawn in enemies and friendly units.
	
	lib_SetupGroupZone(cObjectiveName, "myteam_", "reactor", "repassault", k_objtype_hold_area);
	lib_SetupGroupZone(cObjectiveName, "enemy_brg_", "reactor", "reactorTgt", k_objtype_clear_area);
    }
    
    else if (iObjective == 8) // Escape from the ship in an escape pod.
    {
        spawnGroupSetActive(propRefFromName("Escape_SPG_"), true); // spawn in enemies and friendly units.
	
	lib_SetupTeamZone(cObjectiveName, 1, "backcorridor", "escape", k_objtype_hold_area);
	lib_SetupTeamZone(cObjectiveName, 0, "escape", "escape", k_objtype_clear_area);	
	
	BFKillAllNPCsFromSpawner("Jet_SPG_");
	BFKillAllNPCsFromSpawner("AirCon1_SPG_");
	BFKillAllNPCsFromSpawner("AirCon2_SPG_");
	BFKillAllNPCsFromSpawner("AirCon3_SPG_");
	
	// Allow the escape pods to be used
	propSetCanBeActivated(propRefFromName("EscapePod1"), true);
	propSetCanBeActivated(propRefFromName("EscapePod2"), true);
	propSetCanBeActivated(propRefFromName("EscapePod3"), true);
	propSetCanBeActivated(propRefFromName("EscapePod4"), true);
	propSetCanBeActivated(propRefFromName("EscapePod5"), true);
	propSetCanBeActivated(propRefFromName("EscapePod6"), true);
	
	SetPropRefInvincible(propRefFromName("cruisership2S"), false);
	
	propHealthReduceToFractionWithUniformDamage(propRefFromName("cruisership2S"), 0.25);
	
	propRef ciscorsld1_ = propRefFromName("ciscorsld1_");
	propDelete (ciscorsld1_); 

	
	//enable the trigger to escape the ship.
	enableTrigger(propRefFromName("eventTrig10_"));
        SetObjectiveTimer(45, iObjective); //timer to escape the ship.
    }

    else if (iObjective == 9) // MISSION FAILED 
    {
	AddVMDebugHUDMsg("Mission Failed", 1, "test_objective_message");
	
	propRef player = getPlayerPropRefFromID(GetPlayerId());
	propKill (player);
	propKill (propRefFromName("cruisership2S"));
	
    }

    else if (iObjective == 10) //Bonus Objective A - Clear the Outlander Club
    {
    }
    else if (iObjective == 11) // Bonus Objective B - Destroy the Droid Gunships
    {
    }
    else if (iObjective == 12) //Bonus Objective C - Support the Jedi
    { 	
    }
    else if (iObjective == 13) // Bonus Objective D - Repair and activate the ground to space Ion Cannon
    {

    }
    else if (iObjective == 14) // Bonus Objective E - Destroy the approaching AAT tanks.
    {
    }
    else if (iObjective == 15) // Bonus Objective F - Destroy the gun turrets at the south tower
    {
    }
    else if (iObjective == 16) // Bonus Objective G - Destroy the tower guns.
    {
	SetPropRefInvincible(propRefFromName("Obj4Turret1"), false);
	SetPropRefInvincible(propRefFromName("Obj4Turret2"), false);
	SetPropRefInvincible(propRefFromName("Obj4Turret3"), false);
	SetPropRefInvincible(propRefFromName("Obj4Turret4"), false);
	SetPropRefInvincible(propRefFromName("Obj4Turret5"), false);
	SetPropRefInvincible(propRefFromName("Obj4Turret6"), false);
	SetPropRefInvincible(propRefFromName("Obj4Turret7"), false);
	SetPropRefInvincible(propRefFromName("Obj4Turret8"), false);
	SetPropRefInvincible(propRefFromName("Obj4Turret9"), false);
	SetPropRefInvincible(propRefFromName("Obj4Turret10"), false);
	SetPropRefInvincible(propRefFromName("Obj4Turret11"), false);
    }
    else if (iObjective == 17) // Bonus Objective H - Destroy the Cruiser's exterior guns
    {
    }
    else if (iObjective == 18) // Bonus Objective I - Destroy the turret controls.
    {
    }
    else if (iObjective == 30)  //sneak-er-iffic jump objective as alternative route to the south tower.
    {
	if (iSubObjective == 1)
	{
	    JumptoObjective (6, true);	//jump back to normal objectives.
	}
	
	else
	{
	    SetObjectiveTriggered(true, iObjective); 
	    
	    SetNumSubObjectives (1, iObjective);
	}
    }
    
    else if (iObjective == 40) //sneaky jump - If player reaches an escape pod in time. 
    {
	if (iSubObjective == 1)
	{
	    propKill (propRefFromName("cruisership2S"));
	    propRef p = getPlayerPropRefFromID(GetPlayerId());
	    BFSetVehicleViewMode(p, 3); 
	    BFLockCamera(true);
	    SetObjectiveTimer(10, iObjective);
	}
	
	else if (iSubObjective == 2)
	{
	    BFLockCamera(false);
	    CompleteLevel();
	}
	    
	else
	{
	    // Remove all Escape Pod arrows
	    propRef p = getPlayerPropRefFromID(GetPlayerId());
	    BFSetVehicleViewMode(p, 3); 
	    BFLockCamera(true);
	    SetObjectiveTimer(5,iObjective); //Give pod time to distance from ship before it blows

	    SetNumSubObjectives(2, iObjective);
	}
    }	
    return true;  
}

AllowCallback(CALLBACK_PlayerSpawned, playerSpawned);
AllowCallback(CALLBACK_PlayerKilledBF, playerKilled);
AllowCallback(CALLBACK_TriggeredProp, triggeredProp);
AllowCallback(CALLBACK_ObjectiveTimeExpired, ObjectiveTimeExpired);
AllowCallback(CALLBACK_GameHasStarted, gameHasStarted);
AllowCallback(CALLBACK_FSpawnerComplete, finiteSpawnerComplete);
AllowCallback(CALLBACK_ShipReachedScriptedSplineSegment, shipReachedScriptedSplineSegment);


///////////////This Script Actions

waitForGameTime(1.0f);

ScriptHasStarted(); //Do any setups

while(!bEndLevel)
{
    int iNumActive = BFObjectiveGetNumActive();
    int i = 0;

    ObjectiveSetupCheck();

    for (i=0; i<iNumActive; i++)
    {
        int iObjective = BFObjectiveGetNumForNthActive(i);
        ObjectiveTests(iObjective);        
        waitForGameTime(0.01f);
    }

    waitForGameTimeOrLVChange(1.0f, "iObjLV");
 
    logStr("tick");
    logInt(iObjective);    
}


