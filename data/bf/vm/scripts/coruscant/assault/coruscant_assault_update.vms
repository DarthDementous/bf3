// vim: set syntax=c :

//////////////////////////////////////////
//
//    Coruscant Assault (Updated Design)
//
//////////////////////////////////////////

/////////////MAKE SURE TO INCLUDE A BFStorylevelVarProp in your level

int m_attackingTeamNum = 0;
int m_defendingTeamNum = 1;

int destroyed = 0;
int gunconsole1_destroyed = 0;
int gunconsole2_destroyed = 0;
int gunconsole3_destroyed = 0;
int reactorconsole_destroyed = 0;
int reactor_destroyed = 0;

//Declare the CPs
propRef attk_phase1_cp = propRefFromName( "AttkPhase1_CP_" );
propRef def_phase1_cp = propRefFromName( "DefPhase1_CP_" );
propRef attk_phase2_cp = propRefFromName( "AttkPhase2_CP_" );
propRef def_phase2_cp = propRefFromName( "DefPhase2_CP_" );
propRef attk_phase3_cp = propRefFromName( "AttkPhase3_CP_" );
propRef def_phase3_cp = propRefFromName( "DefPhase3_CP_" );
propRef attk_phase4_cp = propRefFromName( "AttkPhase4_CP_" );
propRef def_phase4_cp = propRefFromName( "DefPhase4_CP_" );
propRef attk_phase5_cp = propRefFromName( "AttkPhase5_CP_" );
propRef def_phase5_cp = propRefFromName( "DefPhase5_CP_" );
propRef attk_phase6_cp = propRefFromName( "AttkPhase6_CP_" );
propRef def_phase6_cp = propRefFromName( "DefPhase6_CP_" );
propRef attk_phase7_cp = propRefFromName( "AttkPhase7_CP_" );
propRef def_phase7_cp = propRefFromName( "DefPhase7_CP_" );
propRef attk_phase8_cp = propRefFromName( "AttkPhase8_CP_" );
propRef def_phase8_cp = propRefFromName( "DefPhase8_CP_" );
propRef attk_phase9_cp = propRefFromName( "AttkPhase9_CP_" );
propRef def_phase9_cp = propRefFromName( "DefPhase9_CP_" );

// BUTTON TRIGGERS
// Temporary button
propRef club_trigger = propRefFromName( "VMTrig2" );
// Temporary Ion Cannon
propRef ion_trigger = propRefFromName( "VMTrig3" );
// Reactor shield propref
propRef shield     = propRefFromName("cisivshld1");
// Ground barricade propref
propRef barricade     = propRefFromName("sshield1_");
// CIS Cruiser
propRef cruiser = propRefFromName("cruisership2S");
// Ion Cannon Controls
propRef ion_controls = propRefFromName("test_cannon1_");


boolean Skip = false;

///////////// Include Defaults //////////////////////////////////////////////

callback void playerKilled(int victimId, int killerId, int iOppTeam)
{
    int iNumActive = BFObjectiveGetNumActive();
    int i = 0;

    for (i=0; i<iNumActive; i++)
    {
	int iActive = BFObjectiveGetNumForNthActive(i);
	if (lib_playerKilled(victimId, killerId, iOppTeam, iActive)) 
	{
	    logStr("NextObjective called in playerkilled");
	    logInt(iActive);
	    nextObjective(iActive);
	}
    }
}

callback int triggeredProp(int inType, char16 inTriggerProp, int pId)
{  

    int iNumActive = BFObjectiveGetNumActive();
    int i = 0;
    int iActive = 0;

    for (i=0; i<iNumActive; i++)
    {
	iActive = BFObjectiveGetNumForNthActive(i);  
	// Check if the player has got into an escape pod
	if (iActive == 9)
	{
	    if (!char16cmp(inTriggerProp, "EscapePod1")||!char16cmp(inTriggerProp, "EscapePod2")||!char16cmp(inTriggerProp, "EscapePod3")||!char16cmp(inTriggerProp, "EscapePod4")||!char16cmp(inTriggerProp, "EscapePod5")||!char16cmp(inTriggerProp, "EscapePod6"))
	    {
		nextObjective(iActive);
	    }
	}
	else if (lib_triggeredProp(inTriggerProp, iActive) >= 1)
	{
	    nextObjective(iActive);
	}
    }

    return 0;
}

function void nextObjective(int inObjNum) 
{    
    int result =   lib_nextObjective(inObjNum);

    if(result==1)
    {
	//if next objective returns 1 it has updated a core objective and automatically moved us onto the next
	//so do objective setup with current objective
	if (!Skip)
	{
	    int iObjective = BFObjectiveGetCurrent();//GetLevelVarInt("mObjective");
	    char16 cName = BFObjectiveGetName(iObjective);
	    ObjectiveSetup( cName, iObjective, BFObjectiveGetSub(iObjective));            
	}
    }

    if(result==2)
    {
	//if nextobjective returns 2 it has updated a bonus objective so we will want to 
	//objective setup with the objective we passed to next objective
	if (!Skip)
	{
	    char16 cName = BFObjectiveGetName(inObjNum);
	    ObjectiveSetup( cName, inObjNum, BFObjectiveGetSub(inObjNum));            
	}
    }
}

function void JumpToObjective(int iStartObj, boolean Skiping)
{    
    Skip = Skiping;

    BFObjectiveSetJumpTo(iStartObj);
    nextObjective(BFObjectiveGetCurrent());
    
    /*
    while (GetLevelVarInt("mObjective") < iStartObj)
    {
        if (GetLevelVarInt("mObjective") == iStartObj-1) Skip = false;
        nextObjective();
    }
*/
    logStr("Jumped To Objective");
    logInt(BFObjectiveGetCurrent());
    Skip = false;
}

callback void ObjectiveTimeExpired(char16 objName)
{   
    int objNum = 0;
    objNum = BFObjectiveGetNumber(objName); 
    if (lib_ObjTimeExpired(objNum)) 
    {
        if (objNum== 9) 
        {
            Skip = true;
            nextObjective(objNum);
            Skip = false;
            nextObjective(objNum);
        }
        else
        {
            nextObjective(objNum);
        }
    }
}

callback void playerSpawned(char16 teamName, int playerId)
{
    propRef p = getPlayerPropRefFromID(playerId);    
}

callback void finiteSpawnerComplete(char16 propId) 
{

}


/////// Defaults END /////////////////////////////////////////////




callback void gameHasStarted()
{           
    // Let the gamemode know which team is attacking and which is defending
    BFSetAssaultTeamNumbers( m_attackingTeamNum, m_defendingTeamNum );  

    // Reset the spawners
    setTeamOfSpawnPropGroup( "AttkPhase1_SG_", -1 );
    setTeamOfSpawnPropGroup( "AttkPhase2_SG_", -1 );
    setTeamOfSpawnPropGroup( "AttkPhase3_SG_", -1 );
    setTeamOfSpawnPropGroup( "AttkPhase4_SG_", -1 );
    setTeamOfSpawnPropGroup( "AttkPhase5_SG_", -1 );
    setTeamOfSpawnPropGroup( "AttkPhase6_SG_", -1 );
    setTeamOfSpawnPropGroup( "AttkPhase7_SG_", -1 );
    setTeamOfSpawnPropGroup( "AttkPhase8_SG_", -1 );
    setTeamOfSpawnPropGroup( "AttkPhase9_SG_", -1 );
    setTeamOfSpawnPropGroup( "DefPhase1_SG_", -1 );
    setTeamOfSpawnPropGroup( "DefPhase2_SG_", -1 );
    setTeamOfSpawnPropGroup( "DefPhase3_SG_", -1 );
    setTeamOfSpawnPropGroup( "DefPhase4_SG_", -1 );
    setTeamOfSpawnPropGroup( "DefPhase5_SG_", -1 );
    setTeamOfSpawnPropGroup( "DefPhase5_SG_", -1 );
    setTeamOfSpawnPropGroup( "DefPhase6_SG_", -1 );
    setTeamOfSpawnPropGroup( "DefPhase7_SG_", -1 );
    setTeamOfSpawnPropGroup( "DefPhase8_SG_", -1 );
    setTeamOfSpawnPropGroup( "DefPhase9_SG_", -1 );

    // Make all CP's Neutral
    commandPostSetTeam(attk_phase1_cp, -1); 
    commandPostSetTeam(attk_phase2_cp, -1); 
    commandPostSetTeam(attk_phase3_cp, -1); 
    commandPostSetTeam(attk_phase4_cp, -1); 
    commandPostSetTeam(attk_phase5_cp, -1); 
    commandPostSetTeam(attk_phase6_cp, -1); 
    commandPostSetTeam(attk_phase7_cp, -1); 
    commandPostSetTeam(attk_phase8_cp, -1); 
    commandPostSetTeam(attk_phase9_cp, -1); 
    commandPostSetTeam(def_phase1_cp, -1); 
    commandPostSetTeam(def_phase2_cp, -1); 
    commandPostSetTeam(def_phase3_cp, -1); 
    commandPostSetTeam(def_phase4_cp, -1); 
    commandPostSetTeam(def_phase5_cp, -1); 
    commandPostSetTeam(def_phase6_cp, -1); 
    commandPostSetTeam(def_phase7_cp, -1); 
    commandPostSetTeam(def_phase8_cp, -1); 
    commandPostSetTeam(def_phase9_cp, -1); 

    // Make all the CP's invisible?
    PropSetVisible(0, attk_phase1_cp);
    PropSetVisible(0, attk_phase2_cp);
    PropSetVisible(0, attk_phase3_cp);
    PropSetVisible(0, attk_phase4_cp);
    PropSetVisible(0, attk_phase5_cp);
    PropSetVisible(0, attk_phase6_cp);
    PropSetVisible(0, attk_phase7_cp);
    PropSetVisible(0, attk_phase8_cp);
    PropSetVisible(0, attk_phase9_cp);
    PropSetVisible(0, def_phase1_cp);
    PropSetVisible(0, def_phase2_cp);
    PropSetVisible(0, def_phase3_cp);
    PropSetVisible(0, def_phase4_cp);
    PropSetVisible(0, def_phase5_cp);
    PropSetVisible(0, def_phase6_cp);
    PropSetVisible(0, def_phase7_cp);
    PropSetVisible(0, def_phase8_cp);
    PropSetVisible(0, def_phase9_cp);
}

function void ScriptHasStarted()
{
    //SetLevelVarsBFStory("obj_CorAssNew", "VMTrig");
    SetBFStoryPrefixes("obj_CorAssNew", "VMTrig");
    ResetObjectives("mObjTmp", 11);  // Number of objectives

    //Reset Space CPs, Spawners, etc

    JumpToObjective(1, true);
}


function void ObjectiveTests(int iObjective) 
{
    int iSubObjective = BFObjectiveGetSub(iObjective);

    //Do some tests

    // Check if the door barricade has been destroyed
    if (iObjective == 1 && !destroyed && !propValid(propRefFromName("barricade")))
    {
	destroyed = 1;
	nextObjective(iObjective);
    }
    
    // Check for the CIS Cruiser Shields being damaged
    if (iObjective== 3)
    {
	if (propGetHealthFraction((cruiser)) <= 0.98f)
	{
	    // Deactivate the Ion Cannon?
	    // TO-DO: Need to kick the player off the controls somehow
	    propSetCanBeActivated((ion_controls), false);

	    nextObjective(iObjective);
	}
    }

    // Has the player got into an LAAT (obj 4)
    if (iObjective == 4)
    {
	if (IsPlayerInVehicle("STR_VEHICLE_NAME_REP_GUNSHIP"))
        {
            AddVMDebugHUDMsg("GunShip Captured", 1, "test_objective_message");
            nextObjective(iObjective);
        }
    }
    
    // Check for the Turret Guns being destroyed
    if (iObjective == 6)
    {
	if (!gunconsole1_destroyed && !propValid(propRefFromName("cisivcon1")))
	{
	    gunconsole1_destroyed = 1;
	}

	if (!gunconsole2_destroyed && !propValid(propRefFromName("cisivcon3")))
	{
	    gunconsole2_destroyed = 1;
	}

	if (!gunconsole3_destroyed && !propValid(propRefFromName("cisivcon4")))
	{
	    gunconsole3_destroyed = 1;
	}

	if (gunconsole1_destroyed && gunconsole2_destroyed && gunconsole3_destroyed)
	{
	    nextObjective(iObjective);
	}
    }

    // Check if the bridge console has been destroyed
    if (iObjective == 7 && !reactorconsole_destroyed && !propValid(propRefFromName("cisivcon2")))
    {
	reactorconsole_destroyed = 1;

	// Stop drawing the reactor shield
	propSetVisible(0, shield);

	nextObjective(iObjective);
    }
    
    // Check if the reactor has been destroyed
    if (iObjective == 8 && !reactor_destroyed && !propValid(propRefFromName("cisivreact1")))
    {
	reactor_destroyed = 1;
	nextObjective(iObjective);
    }

}

/////////////////////////////////////////OBJECTIVES

function void ObjectiveSetup(char16 cObjectiveName, int iObjective, int iSubObjective)
{
    if (iObjective == 1)         // PHASE 1: Gain entry to the Outlander Club
    { 
	setTeamOfSpawnPropGroup( "AttkPhase1_SG_", 0 ); //Spawn ATTACKERS here
	setTeamOfSpawnPropGroup( "DefPhase1_SG_", 1 ); //Spawn DEFENDERS here

	addObjectiveIndicatorToProp(propRefFromName("barricade"), vector(0.f, 1.5f, 0.f), vector(1.f, 1.f, 0.f)); // Add HUD Pointer

	// Set the ATTACKER hot spot
//	commandPostSetTeam(attk_phase1_cp, 1); 
	commandPostSetTeam(def_phase1_cp, 1); 

	// For testing, enable the active CP's
//	PropSetVisible(1, attk_phase1_cp);
	PropSetVisible(1, def_phase1_cp);
    }
    else if (iObjective == 2)	// PHASE 2: Gain control of the Outlander Club
    {
	addObjectiveIndicatorToProp(club_trigger, vector(0.f, 0.5f, 0.f), vector(1.f, 1.f, 0.f));

	// Disable the previous spawners...
	setTeamOfSpawnPropGroup( "AttkPhase1_SG_", -1 );
	setTeamOfSpawnPropGroup( "DefPhase1_SG_", -1 );
//	commandPostSetTeam(attk_phase1_cp, -1);
	commandPostSetTeam(def_phase1_cp, -1);
	// ...and enable the new ones
	setTeamOfSpawnPropGroup( "AttkPhase2_SG_", 0 );
	setTeamOfSpawnPropGroup( "DefPhase2_SG_", 1 );

	commandPostSetTeam(attk_phase2_cp, 2);
//	commandPostSetTeam(def_phase2_cp, 2);

	// Hide the previous CP...
	PropSetVisible(0, def_phase1_cp);
	// ...and show the new one
	PropSetVisible(1, attk_phase2_cp);

	// Allow objective to be completed through a trigger
        SetObjectiveTriggered(true, iObjective);
    }
    else if (iObjective == 3)	// PHASE 3: Use the Ground Cannon to Disable the CIS Cruiser
    {
	// Disable the previous spawners...
	setTeamOfSpawnPropGroup( "AttkPhase2_SG_", -1 );
	setTeamOfSpawnPropGroup( "DefPhase2_SG_", -1 );
	commandPostSetTeam(attk_phase2_cp, -1);
	commandPostSetTeam(def_phase2_cp, -1);
	// ... and enable the new ones
	setTeamOfSpawnPropGroup( "AttkPhase3_SG_", 0 );
	setTeamOfSpawnPropGroup( "DefPhase3_SG_", 1 );

	// Delete the Shield prop
	propDelete(barricade);

//	commandPostSetTeam(attk_phase2_cp, 0);
	commandPostSetTeam(def_phase3_cp, 2);

	// Remove the objective indicator from the Outlander Club prop
	removeObjectiveIndicatorFromProp(club_trigger);  // Remove previous HUD marker

	addObjectiveIndicatorToProp(ion_trigger, vector(0.f, 0.5f, 0.f), vector(1.f, 1.f, 0.f));

	// Hide the previous CP...
	PropSetVisible(0, attk_phase2_cp);
	// ...and show the new one
	PropSetVisible(1, def_phase3_cp);

	// Allow objective to be completed through a trigger
//        SetObjectiveTriggered(true);
    }
    else if (iObjective == 4)	// PHASE 4: Reclaim the LAAT Gunship
    {
	removeObjectiveIndicatorFromProp(ion_trigger);  // Remove previous HUD marker

	// Place two arrows on the LAAT Gunships
	addObjectiveIndicatorToProp(propRefFromName("groundSpawn3"), vector(0.f, 2.5f, 0.f), vector(1.f, 1.f, 0.f));
	addObjectiveIndicatorToProp(propRefFromName("groundSpawn4"), vector(0.f, 2.5f, 0.f), vector(1.f, 1.f, 0.f));

	// Disable the previous spawners...
	setTeamOfSpawnPropGroup( "AttkPhase3_SG_", -1 );
	setTeamOfSpawnPropGroup( "DefPhase3_SG_", -1 );
	commandPostSetTeam(attk_phase3_cp, -1);
	commandPostSetTeam(def_phase3_cp, -1);
	// ...and enable the new ones
	setTeamOfSpawnPropGroup( "AttkPhase4_SG_", 0 );
	setTeamOfSpawnPropGroup( "DefPhase4_SG_", 1 );

//	commandPostSetTeam(attk_phase4_cp, 0);
	commandPostSetTeam(def_phase4_cp, 2);

	// Hide the previous CP...
	PropSetVisible(0, def_phase3_cp);
	// ...and show the new one
	PropSetVisible(1, def_phase4_cp);
    }
    else if (iObjective == 5)	// PHASE 5: Land an LAAT in the Hangar of the CIS Cruiser
    {
	// Remove the LAAT Gunships arrows
	removeObjectiveIndicatorFromProp(propRefFromName("groundSpawn3"));
	removeObjectiveIndicatorFromProp(propRefFromName("groundSpawn4"));
	
	// Disable the previous spawners...
	setTeamOfSpawnPropGroup( "AttkPhase4_SG_", -1 );
	setTeamOfSpawnPropGroup( "DefPhase4_SG_", -1 );
	commandPostSetTeam(attk_phase4_cp, -1);
	commandPostSetTeam(def_phase4_cp, -1);
	// ...and enable the new ones
	setTeamOfSpawnPropGroup( "AttkPhase5_SG_", 0 );
	setTeamOfSpawnPropGroup( "DefPhase5_SG_", 1 );
	
	// Set the active Command Posts
	commandPostSetTeam(attk_phase5_cp, 0);
	commandPostSetTeam(def_phase5_cp, 1);

	// Add arrow to the Cruiser
	addObjectiveIndicatorToProp(propRefFromName("hangarArrow"), vector(0.f, 0.0f, 0.f), vector(1.f, 1.f, 0.f));

	setObjectiveTriggered(true, iObjective);
    }
    else if (iObjective == 6)	// PHASE 6: Destroy the Gun Turret Controls
    {
	// Remove the Cruiser arrow
	removeObjectiveIndicatorFromProp(propRefFromName("hangarArrow"));

	// Disable the previous spawners...
	setTeamOfSpawnPropGroup( "AttkPhase5_SG_", -1 );
	setTeamOfSpawnPropGroup( "DefPhase5_SG_", -1 );
	commandPostSetTeam(attk_phase5_cp, -1);
	commandPostSetTeam(def_phase5_cp, -1);
	// ...and enable the new ones
	setTeamOfSpawnPropGroup( "AttkPhase6_SG_", 0 );
	setTeamOfSpawnPropGroup( "DefPhase6_SG_", 1 );

	// Set the active Command Posts
	commandPostSetTeam(attk_phase6_cp, 0);
	commandPostSetTeam(def_phase6_cp, 1);

	// Add arrow to the Gun Turret Controls
	addObjectiveIndicatorToProp(propRefFromName("cisivcon1"), vector(0.f, 1.5f, 0.f), vector(1.f, 1.f, 0.f));
	addObjectiveIndicatorToProp(propRefFromName("cisivcon3"), vector(0.f, 1.5f, 0.f), vector(1.f, 1.f, 0.f));
	addObjectiveIndicatorToProp(propRefFromName("cisivcon4"), vector(0.f, 1.5f, 0.f), vector(1.f, 1.f, 0.f));

	// This is dodgy... Kill all the NPC's from both teams so they start spawning on the Cruiser
	BFKillAllNPCsFromTeam(0);
	BFKillAllNPCsFromTeam(1);
    }
    else if (iObjective == 7)	// PHASE 7: Disable the Reactor Shield by Destroying the Bridge Controls
    {
	// Disable the previous spawners...
	setTeamOfSpawnPropGroup( "AttkPhase6_SG_", -1 );
	setTeamOfSpawnPropGroup( "DefPhase6_SG_", -1 );
	commandPostSetTeam(attk_phase6_cp, -1);
	commandPostSetTeam(def_phase6_cp, -1);
	// ...and enable the new ones
	setTeamOfSpawnPropGroup( "AttkPhase7_SG_", 0 );
	setTeamOfSpawnPropGroup( "DefPhase7_SG_", 1 );

	// Set the active Command Posts
	commandPostSetTeam(attk_phase7_cp, 0);
	commandPostSetTeam(def_phase7_cp, 1);
	
	addObjectiveIndicatorToProp(propRefFromName("cisivcon2"), vector(0.f, 1.5f, 0.f), vector(1.f, 1.f, 0.f));
    
    }
    else if (iObjective == 8)	// PHASE 8: Destroy the Reactor Shield
    {
	// Disable the previous spawners...
	setTeamOfSpawnPropGroup( "AttkPhase7_SG_", -1 );
	setTeamOfSpawnPropGroup( "DefPhase7_SG_", -1 );
	commandPostSetTeam(attk_phase7_cp, -1);
	commandPostSetTeam(def_phase7_cp, -1);
	// ...and enable the new ones
	setTeamOfSpawnPropGroup( "AttkPhase8_SG_", 0 );
	setTeamOfSpawnPropGroup( "DefPhase8_SG_", 1 );

	// Set the active Command Posts
	commandPostSetTeam(attk_phase8_cp, 0);
	commandPostSetTeam(def_phase8_cp, 1);
	
	// Add arrow to the reactor
	addObjectiveIndicatorToProp(propRefFromName("cisivreact1"), vector(0.f, 25.f, 0.f), vector(1.f, 1.f, 0.f));

    }
    else if (iObjective == 9)	// PHASE 9 (BONUS PHASE): Escape from the Ship in an Escape Pod
    {
	// Disable the previous spawners...
	setTeamOfSpawnPropGroup( "AttkPhase8_SG_", -1 );
	setTeamOfSpawnPropGroup( "DefPhase8_SG_", -1 );
	commandPostSetTeam(attk_phase8_cp, -1);
	commandPostSetTeam(def_phase8_cp, -1);
	// ...and enable the new ones
	setTeamOfSpawnPropGroup( "AttkPhase9_SG_", 0 );
	setTeamOfSpawnPropGroup( "DefPhase9_SG_", 1 );

	// Set the active Command Posts
	commandPostSetTeam(attk_phase9_cp, 0);
	commandPostSetTeam(def_phase9_cp, 1);
	
	// Allow the escape pods to be used
	propSetCanBeActivated(propRefFromName("EscapePod1"), true);
	propSetCanBeActivated(propRefFromName("EscapePod2"), true);
	propSetCanBeActivated(propRefFromName("EscapePod3"), true);
	propSetCanBeActivated(propRefFromName("EscapePod4"), true);
	propSetCanBeActivated(propRefFromName("EscapePod5"), true);
	propSetCanBeActivated(propRefFromName("EscapePod6"), true);

	setObjectiveTriggered(true, iObjective);

	addObjectiveIndicatorToProp(propRefFromName("EscapePod1"), vector(0.f, 1.0f, 0.f), vector(1.f, 1.f, 0.f));
	addObjectiveIndicatorToProp(propRefFromName("EscapePod2"), vector(0.f, 1.0f, 0.f), vector(1.f, 1.f, 0.f));
	addObjectiveIndicatorToProp(propRefFromName("EscapePod3"), vector(0.f, 1.0f, 0.f), vector(1.f, 1.f, 0.f));
	addObjectiveIndicatorToProp(propRefFromName("EscapePod4"), vector(0.f, 1.0f, 0.f), vector(1.f, 1.f, 0.f));
	addObjectiveIndicatorToProp(propRefFromName("EscapePod5"), vector(0.f, 1.0f, 0.f), vector(1.f, 1.f, 0.f));
	addObjectiveIndicatorToProp(propRefFromName("EscapePod6"), vector(0.f, 1.0f, 0.f), vector(1.f, 1.f, 0.f));
	
    	// Shake the camera for effect
	camShakeAll(45.0f, 0.00001f, 0.0005f);

	// Set a timer for this objective - when this reaches zero the ship explodes
        SetObjectiveTimer(45, iObjective);
    }
    else if (iObjective == 10)	 // If the player escapes successfully 
    {
	// Remove all Escape Pod arrows
	removeObjectiveIndicatorFromProp(propRefFromName("EscapePod1"));        
	removeObjectiveIndicatorFromProp(propRefFromName("EscapePod2"));        
	removeObjectiveIndicatorFromProp(propRefFromName("EscapePod3"));        
	removeObjectiveIndicatorFromProp(propRefFromName("EscapePod4"));        
	removeObjectiveIndicatorFromProp(propRefFromName("EscapePod5"));        
	removeObjectiveIndicatorFromProp(propRefFromName("EscapePod6"));        

	// The End - Success!
	CompleteLevel();
    }
    else if (iObjective == 11)  // If the player fails to leave the cruiser before the countdown timer
    {
	// Remove all Escape Pod arrows
	removeObjectiveIndicatorFromProp(propRefFromName("EscapePod1"));        
	removeObjectiveIndicatorFromProp(propRefFromName("EscapePod2"));        
	removeObjectiveIndicatorFromProp(propRefFromName("EscapePod3"));        
	removeObjectiveIndicatorFromProp(propRefFromName("EscapePod4"));        
	removeObjectiveIndicatorFromProp(propRefFromName("EscapePod5"));        
	removeObjectiveIndicatorFromProp(propRefFromName("EscapePod6"));

	// Explode the CIS Cruiser - crashes the game currently
	//propKill(propRefFromName("cruisership2S"));

	CompleteLevel();
    }
    else
    {
	// All over
    }
}

AllowCallback(CALLBACK_PlayerSpawned, playerSpawned);
AllowCallback(CALLBACK_PlayerKilledBF, playerKilled);
AllowCallback(CALLBACK_TriggeredProp, triggeredProp);
AllowCallback(CALLBACK_ObjectiveTimeExpired, ObjectiveTimeExpired);
AllowCallback(CALLBACK_GameHasStarted, gameHasStarted);
AllowCallback(CALLBACK_FSpawnerComplete, finiteSpawnerComplete);


///////////////This Script Actions



ScriptHasStarted(); //Do any setups




//Main game loop
while(1)
{
    int iNumActive = BFObjectiveGetNumActive();
    int i = 0;

    for (i=0; i<iNumActive; i++)
    {
	int iObjective = BFObjectiveGetNumForNthActive(i);
	ObjectiveTests(iObjective);

	logStr("tick");
	logInt(iObjective);
    }

    waitForGameTime(1.0f);

}

