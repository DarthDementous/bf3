// vim: set syntax=c :



int numberOfLaps = 3;


propRef firstCheckpoint = propRefFromName("checkpoint1_");
propRef secondCheckpoint = propRefFromName("checkpoint2_");
propRef thirdCheckpoint = propRefFromName("checkpoint3_");
propRef fourthCheckpoint = propRefFromName("checkpoint4_");
propRef fifthCheckpoint = propRefFromName("checkpoint5_");
propRef sixthCheckpoint = propRefFromName("checkpoint6_");
propRef seventhCheckpoint = propRefFromName("checkpoint7_");
propRef eigthCheckpoint = propRefFromName("checkpoint8_");
propRef ninthCheckpoint = propRefFromName("checkpoint9_");
propRef tenthCheckpoint = propRefFromName("checkpoint10_");
propRef eleventhCheckpoint = propRefFromName("checkpoint11_");
propRef twelfthCheckpoint = propRefFromName("checkpoint12_");
propRef thirteenthCheckpoint = propRefFromName("checkpoint13_");
propRef lastCheckpoint  = propRefFromName("checkpoint14_");

callback void racerReachedCheckpoint(propRef racer, propRef checkpoint, int lapNumber)
{
    if(lapNumber == 1)
    {
    	if(checkpoint == firstCheckpoint)
	{
	    ChallengeBegin();
	}
    }

    if(lapNumber <= numberOfLaps)
    {
	if(checkpoint == firstCheckpoint)
	{
   		if(lapNumber != 1)
  	      	{
 	      		removeObjectiveIndicatorFromProp(propRefFromName("checkpoint14_"));
	      	}
//	    	addObjectiveIndicatorToProp(propRefFromName("checkpoint2_"),  vector(0.f, 0.f, 0.f), vector(1.f, 1.f, 0.f));
		addNewObjectiveIndicatorToProp(propRefFromName("checkpoint2_"), k_objectiveIndicatorType_mainObjective);
	}
	if(checkpoint == secondCheckpoint)
	{
	    removeObjectiveIndicatorFromProp(propRefFromName("checkpoint2_"));
//	    addObjectiveIndicatorToProp(propRefFromName("checkpoint3_"),  vector(0.f, 0.f, 0.f), vector(1.f, 1.f, 0.f));
		addNewObjectiveIndicatorToProp(propRefFromName("checkpoint3_"), k_objectiveIndicatorType_mainObjective);
	}
	if(checkpoint == thirdCheckpoint)
	{
	    removeObjectiveIndicatorFromProp(propRefFromName("checkpoint3_"));
//	    addObjectiveIndicatorToProp(propRefFromName("checkpoint4_"),  vector(0.f, 0.f, 0.f), vector(1.f, 1.f, 0.f));
		addNewObjectiveIndicatorToProp(propRefFromName("checkpoint4_"), k_objectiveIndicatorType_mainObjective);
	}
	if(checkpoint == fourthCheckpoint)
	{
	    removeObjectiveIndicatorFromProp(propRefFromName("checkpoint4_"));
//	    addObjectiveIndicatorToProp(propRefFromName("checkpoint5_"),  vector(0.f, 0.f, 0.f), vector(1.f, 1.f, 0.f));
		addNewObjectiveIndicatorToProp(propRefFromName("checkpoint5_"), k_objectiveIndicatorType_mainObjective);
	}
	if(checkpoint == fifthCheckpoint)
	{
	    removeObjectiveIndicatorFromProp(propRefFromName("checkpoint5_"));
//	    addObjectiveIndicatorToProp(propRefFromName("checkpoint6_"),  vector(0.f, 0.f, 0.f), vector(1.f, 1.f, 0.f));
		addNewObjectiveIndicatorToProp(propRefFromName("checkpoint6_"), k_objectiveIndicatorType_mainObjective);
	}
	if(checkpoint == sixthCheckpoint)
	{
	    removeObjectiveIndicatorFromProp(propRefFromName("checkpoint6_"));
//	    addObjectiveIndicatorToProp(propRefFromName("checkpoint7_"),  vector(0.f, 0.f, 0.f), vector(1.f, 1.f, 0.f));
		addNewObjectiveIndicatorToProp(propRefFromName("checkpoint7_"), k_objectiveIndicatorType_mainObjective);
	}
	if(checkpoint == seventhCheckpoint)
	{
	    removeObjectiveIndicatorFromProp(propRefFromName("checkpoint7_"));
//	    addObjectiveIndicatorToProp(propRefFromName("checkpoint8_"),  vector(0.f, 0.f, 0.f), vector(1.f, 1.f, 0.f));
		addNewObjectiveIndicatorToProp(propRefFromName("checkpoint8_"), k_objectiveIndicatorType_mainObjective);
	}
	if(checkpoint == eigthCheckpoint)
	{
	    removeObjectiveIndicatorFromProp(propRefFromName("checkpoint8_"));
//	    addObjectiveIndicatorToProp(propRefFromName("checkpoint9_"),  vector(0.f, 0.f, 0.f), vector(1.f, 1.f, 0.f));
	    addNewObjectiveIndicatorToProp(propRefFromName("checkpoint9_"), k_objectiveIndicatorType_mainObjective);
	}
	if(checkpoint == ninthCheckpoint)
	{
	    removeObjectiveIndicatorFromProp(propRefFromName("checkpoint9_"));
//	    addObjectiveIndicatorToProp(propRefFromName("checkpoint10_"),  vector(0.f, 0.f, 0.f), vector(1.f, 1.f, 0.f));
	    addNewObjectiveIndicatorToProp(propRefFromName("checkpoint10_"), k_objectiveIndicatorType_mainObjective);
	}
	if(checkpoint == tenthCheckpoint)
	{
	    removeObjectiveIndicatorFromProp(propRefFromName("checkpoint10_"));
//	    addObjectiveIndicatorToProp(propRefFromName("checkpoint11_"),  vector(0.f, 0.f, 0.f), vector(1.f, 1.f, 0.f));
	    addNewObjectiveIndicatorToProp(propRefFromName("checkpoint11_"), k_objectiveIndicatorType_mainObjective);
	}
	if(checkpoint == eleventhCheckpoint)
	{
	    removeObjectiveIndicatorFromProp(propRefFromName("checkpoint11_"));
//	    addObjectiveIndicatorToProp(propRefFromName("checkpoint12_"),  vector(0.f, 0.f, 0.f), vector(1.f, 1.f, 0.f));
	    addNewObjectiveIndicatorToProp(propRefFromName("checkpoint12_"), k_objectiveIndicatorType_mainObjective);
	}
	if(checkpoint == twelfthCheckpoint)
	{
	    removeObjectiveIndicatorFromProp(propRefFromName("checkpoint12_"));
//	    addObjectiveIndicatorToProp(propRefFromName("checkpoint13_"),  vector(0.f, 0.f, 0.f), vector(1.f, 1.f, 0.f));
	    addNewObjectiveIndicatorToProp(propRefFromName("checkpoint13_"), k_objectiveIndicatorType_mainObjective);
	}
	if(checkpoint == thirteenthCheckpoint)
	{
	    removeObjectiveIndicatorFromProp(propRefFromName("checkpoint13_"));
//	    addObjectiveIndicatorToProp(propRefFromName("checkpoint14_"),  vector(0.f, 0.f, 0.f), vector(1.f, 1.f, 0.f));
	    addNewObjectiveIndicatorToProp(propRefFromName("checkpoint14_"), k_objectiveIndicatorType_mainObjective);
	}
    }

    if(lapNumber == numberOfLaps)
    {
	if(checkpoint == lastCheckpoint)
	{
	    removeObjectiveIndicatorFromProp(propRefFromName("checkpoint14_"));
	    ChallengeEnd();
	}
    }
}

AllowCallback(CALLBACK_ChallengeRacerReachedRaceCheckpoint, racerReachedCheckpoint);

//propRef speeder = propRefFromName("speederbike1_"); // this looks for a specific speeder name...
// ChallengeBeginSoloRace(speeder, firstCheckpoint, numberOfLaps); // ...then used that as a prop ref, so would only work with that specific speeder
propRef player = getPlayerPropRefFromID(GetPlayerId()); // this gets the player reference
ChallengeBeginSoloRace(player, firstCheckpoint, numberOfLaps); //and uses player ref here so any speeder type will work

SpawnInVehicle(player, propRefFromName("speeederDOF_"), StringToChar16("imp_speeder_bike"), 0.1, k_seatPos_driver ); //Spawn player on bike

//SpawnInVehicle(player, propRefFromName("speeederDOF_"), "rep_barcspeeder", 0.1, k_seatPos_driver ); //Spawn player on bike

while(1)
{
    waitForGameTime(5.0f);
}

