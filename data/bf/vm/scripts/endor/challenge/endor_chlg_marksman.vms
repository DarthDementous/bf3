
// vim: set syntax=c :

///////////////////////////////
// Endor Marksman Challenge  //
///////////////////////////////

boolean Skip = false;

int IsLeiaDead = 0;
int IsHansDead = 0;
int IsThreePODead = 0;
int IsR2D2Dead = 0;
int IsChewieDead = 0;
int IsPlayerDead = 0;
int ATATExists = 0;


propRef Chewie;
propRef Leia;
propRef Hans;
propRef R2D2;
propRef ThreePO;

/////////////////////////////          INCLUDE DEFAULTS           /////////////////

callback void playerKilled(int killerId, int iResult, int iSpare)
{
    int iNumActive = BFObjectiveGetNumActive();
    int i = 0;
    
    propRef pChr;
    pChr = propRefFromInt(iSpare);
    
    propRef pKiller;
    pKiller = propRefFromInt(killerId);    
    
    if (isPlayerProp(pKiller) && iResult == 1)
    {
	int class = chrGetClass(pChr);
	
	if (class == 0)
	{
	    int snipercombo = ChallengeGetSniperKillCombo ();
	    ChallengeAddScore(10 * snipercombo );
	    AddVMDebugHUDMsg("Killed Soilder", 1, "test_objective_message");
	}
	else if (class == 1)
	{
	    int snipercombo = ChallengeGetSniperKillCombo ();
	    ChallengeAddScore(20 * snipercombo );
	    AddVMDebugHUDMsg("Killed Heavy", 1, "test_objective_message");
	}
	else if (class == 2)
	{
	    int snipercombo = ChallengeGetSniperKillCombo ();
	    ChallengeAddScore(50 * snipercombo );
	    AddVMDebugHUDMsg("Killed Sniper", 1, "test_objective_message");
	}
	else if (class == 3)
	{
	    int snipercombo = ChallengeGetSniperKillCombo ();
	    ChallengeAddScore(50 * snipercombo );
	    AddVMDebugHUDMsg("Killed Engineer", 1, "test_objective_message");
	}
	
	else if (class == 4)
	{
	    int snipercombo = ChallengeGetSniperKillCombo ();
	    ChallengeAddScore(100 * snipercombo );
	    AddVMDebugHUDMsg("Killed Melee", 1, "test_objective_message");
	}
	else
	{
	}
    }

    //TODO - look into combo count for kills in a row (headshots?)
    
    for (i=0; i<iNumActive; i++)
    {
	int iActive = BFObjectiveGetNumForNthActive(i);
	if (lib_playerKilled(killerId, iResult, iSpare, iActive)) 
	{
	    nextObjective(iActive);
	}
    }
}

function void Trigger(char16 inTriggerProp)
{    
    int iResult = 0;
    int iNumActive = BFObjectiveGetNumActive();
    int i = 0;
    int iActive = 0;
    for (i=0; i<iNumActive; i++)
    {
	iActive = BFObjectiveGetNumForNthActive(i);
	iResult = lib_triggeredProp(inTriggerProp, iActive);
	iResult = ObjectiveTriggerTests(iNumActive, inTriggerProp, iResult);

	if (iResult >= 1) nextObjective(iNumActive);
    }
}
callback int triggeredProp(int inType, char16 inTriggerProp, int pId)
{   
    Trigger(inTriggerProp);     
    return 0;
}
function void nextObjective(int iObjNum) 
{    
    int result =   lib_nextObjective(iObjNum);

    if(result==1)
    {
	if (!Skip)
	{
	    int iObjective = BFObjectiveGetCurrent();
	    char16 cName = BFObjectiveGetName(iObjective);
	    ObjectiveSetup( cName, iObjective, BFObjectiveGetSub(iObjective));            
	}
    }

    if(result==2)
    {
	if (!Skip)
	{
	    char16 cName = BFObjectiveGetName(iObjNum);
	    ObjectiveSetup( cName, iObjNum, BFObjectiveGetSub(iObjNum));            
	}
    }
}

function void JumpToObjective(int iStartObj, boolean Skiping)
{       
    Skip = Skiping;
    ResetProps();

    if (Skip)
    {
	BFObjectiveSetJumpTo(iStartObj);
    }

    Skip = false;
    nextObjective(BFObjectiveGetCurrent());

    char16 tSpawn;
    tSpawn = LevelVarToChar16("mCurrentSpawner");
    if (propExists(propRefFromChar16(tSpawn)))
        propTeleportToProp(getPlayerPropRefFromID(GetPlayerId()), propRefFromChar16(tSpawn));        

    logStr("Jumped To Objective");
    logInt(BFObjectiveGetCurrent());

}

callback void ObjectiveTimeExpired(char16 objName)
{   
    int objNum = 0;
    objNum = BFObjectiveGetNumber(objName);   
    if (lib_ObjTimeExpired(objNum))
    {
	nextObjective(objNum);
    }
}
callback void playerSpawned(char16 teamName, int playerId)
{
    logStr("teamName: ");
    logchar16(teamName);
}
callback void finiteSpawnerComplete(char16 propId) 
{
    AddVMDebugHUDMsg("FINITE SPAWNER IS DEADED", 1, "test_objective_message");
}

/////////////////////////////          DEFAULTS END            /////////////////

callback void gameHasStarted()
{           
}

function void ResetProps()
{
}

function void ScriptHasStarted()
{
    SetBFStoryPrefixes("obj_EndChlgM", "vmTrig");

    ResetObjectives("mObjTmp", 10);

    ResetProps();
    
    JumpToObjective(1, true);
}

function int ObjectiveTriggerTests(int iObjective, char16 inTriggerProp, int iResult) 
{
    int iSubObjective = BFObjectiveGetSub(iObjective);

    if (iObjective == 1)
    {
        if (iResult == 1) 
            JumpToObjective(10, true);
    }
    return iResult;
}

/////////////////////////////          OBJECTIVE TESTS            /////////////////


function void ObjectiveTests(int iObjective) 
{
    int iSubObjective = BFObjectiveGetSub(iObjective);
/*
    if ((iObjective >= 4) && (propGroupGetNumOfProps(propRefFromName("Spwn1-4")) < 1))
    {
//	AddBike(1, propRefFromName("Spwn1-4"));
//	AddBike(2, propRefFromName("Spwn1-4"));
    }

    
    
    if ((iObjective >= 7) && (propGroupGetNumOfProps(propRefFromName("Spwn1-7")) < 1))
    {
//	AddATAT(1, propRefFromName("Spwn1-7"));
    }
*/
    if (iObjective <= 10) 
    {
	propRef player = getPlayerPropRefFromID(GetPlayerId());

	if (!propValid(player) && !IsPlayerDead)
	{
	    IsPlayerDead = 1;
	}

	if (IsPlayerDead) 
	{
	    ChallengeEnd();
	}
    }
    
    if (iObjective >= 3)
    {
	if (!propValid(R2D2) && !IsR2D2Dead)
	{
	    IsR2D2Dead = 1;
	}

	if (!propValid(ThreePO) && !IsThreePODead)
	{
	    IsThreePODead = 1;
	}

//	if ((IsR2D2Dead) || (IsThreePODead))
//	{
//	    ChallengeEnd();
//	}
    }

    if (iObjective >= 6)
    {
	if (!propValid(Chewie) && !IsChewieDead)
	{
	    IsChewieDead = 1;
	}

//	if(IsChewieDead)
//	{
//	    ChallengeEnd();
//	}
    }

    if (iObjective >= 8)
    {
	if (!propValid(Leia) && !IsLeiaDead)
	{
	    IsLeiaDead = 1;
	}

	if (!propValid(Hans) && !IsHansDead)
	{
	    IsHansDead = 1;
	}

//	if ((IsLeiaDead) || (IsHansdead))
//	{
//	    ChallengeEnd();
//	}
    }
}

/////////////////////////////          OBJECTIVES            /////////////////

function void AddATAT(int i, propRef pGroup)
{
    char16 cName;
    cName = StringCatInt("ATATDOF", i, "_");

    propRef pATAT;
    pATAT = SpawnAIVehicleWithObjectives(propRefFromChar16(cName), "imp_stormtrooper_npc_story", "imp_atst", 0, false, k_seatPos_driver, StringToChar16(""));

    SetAICanDrive(pATAT, true);

    addPropToGroup(pGroup, pATAT);
}

function void AddBike(int i, propRef pGroup)
{
    char16 cName;
    cName = StringCatInt("BikeDOF", i, "_");

    propRef pBike;
    pBike = SpawnAIVehicleWithObjectives(propRefFromChar16(cName), "imp_stormtrooper_npc_story", "imp_speeder_bike", 0, false, k_seatPos_driver, StringToChar16(""));

    SetAICanDrive(pBike, true);

    addPropToGroup(pGroup, pBike);
}

function void ObjectiveSetup(char16 cObjectiveName, int iObjective, int iSubObjective)
{
    if (iObjective == 1) 
    {
	propRef p = getPlayerPropRefFromID(GetPlayerId());
	
//	playerForceClassSwitch(chrRefFromPropRef(p), "STR_CHRNAME_STORY_X2_SNIPER");
//	chrSetMovementClamped(p, true);
	chrSetMovementClamped(propRefFromName("Sniper1_"), true);
	chrSetMovementClamped(propRefFromName("Sniper2_"), true);
	chrSetMovementClamped(propRefFromName("Sniper3_"), true);
	lib_SetupTeamZone(cObjectiveName, 1, "MarksmanHome", "MarksmanTarget", k_objtype_hold_area);
	lib_SetupTeamZone(cObjectiveName, 0, "MarksmanHome", "MarksmanTarget", k_objtype_clear_area);

//	spawnGroupSetActive(propRefFromName("Spwn-1"), true);
	
	SetObjectiveKillSpawners(1, iObjective);
    }
    
    else if (iObjective == 2)
    {
	lib_SetupTeamZone(cObjectiveName, 1, "MarksmanHome", "MarksmanTarget", k_objtype_hold_area);
	lib_SetupTeamZone(cObjectiveName, 0, "MarksmanHome", "MarksmanTarget", k_objtype_clear_area);

	setAIState(propRefFromName("Snipers"), "AISTATE_BF_SNIPE");
	
	spawnGroupSetActive(propRefFromName("Spwn-2"), true);

	propRef player = getPlayerPropRefFromID(GetPlayerId());
	chrReplenishInventoryItemsOfType(player, "AMMO");
	SetObjectiveKills(5, iObjective);
    }
    
    else if (iObjective == 3)
    {	
	lib_SetupTeamZone(cObjectiveName, 1, "MarksmanHome", "MarksmanTarget", k_objtype_hold_area);
	lib_SetupTeamZone(cObjectiveName, 0, "MarksmanHome", "MarksmanTarget", k_objtype_clear_area);
	
	spawnGroupSetActive(propRefFromName("Spwn-3"), true);
	spawnGroupSetActive(propRefFromName("Obj3FriendSpawn"), true);

	R2D2 = SpawnCharacterBF("reb_lobot_npc_story", propRefFromName("HeroDOF1"), vector(0, 0, 0));		
//	ThreePO = SpawnCharacterBF("master_ferroda_npc_story", propRefFromName("HeroDOF2"), vector(0, 0, 0));
	SetPropRefInvincible(R2D2, true);
	propRef player = getPlayerPropRefFromID(GetPlayerId());
	chrReplenishInventoryItemsOfType(player, "AMMO");
	SetObjectiveKills(5, iObjective);	
    }
    
    else if (iObjective == 4)
    {
	if (iSubObjective == 1)
	{
/*
	    p = getNthPropFromGroup(propRefFromName("Spwn1-4"), 0);
	    propRef driver = getVehicleDriver(p);
	    DriveToDestinationBF( driver, propRefFromName("BikeDOF1Finish") );
	    
	    p = getNthPropFromGroup(propRefFromName("Spwn1-4"), 1);
	    propRef driver = getVehicleDriver(p);
	    DriveToDestinationBF( driver, propRefFromName("BikeDOF2Finish") );
*/
	    propRef player = getPlayerPropRefFromID(GetPlayerId());
	    chrReplenishInventoryItemsOfType(player, "AMMO");
	    SetObjectiveTimer(1, iObjective);    
	    //SetObjectiveKills(5, iObjective);
	}
	
	else
	{
	    lib_SetupTeamZone(cObjectiveName, 1, "MarksmanHome", "MarksmanTarget", k_objtype_hold_area);
	    lib_SetupTeamZone(cObjectiveName, 0, "MarksmanHome", "MarksmanTarget", k_objtype_clear_area);

	    spawnGroupSetActive(propRefFromName("Spwn-4"), true);

	    SetNumSubObjectives(1, iObjective);
	    SetObjectiveKills(3, iObjective);	    

	}	
    }
    
    else if (iObjective == 5)
    {
	lib_SetupTeamZone(cObjectiveName, 1, "MarksmanHome", "MarksmanTarget", k_objtype_hold_area);
	lib_SetupTeamZone(cObjectiveName, 0, "MarksmanHome", "MarksmanTarget", k_objtype_clear_area);
	
	spawnGroupSetActive(propRefFromName("Spwn-5"), true);

	propRef player = getPlayerPropRefFromID(GetPlayerId());
	chrReplenishInventoryItemsOfType(player, "AMMO");
	
	SetObjectiveKills(3, iObjective);
    }
    
    else if (iObjective == 6)
    {
	lib_SetupTeamZone(cObjectiveName, 1, "MarksmanHome", "MarksmanTarget", k_objtype_hold_area);
	lib_SetupTeamZone(cObjectiveName, 0, "MarksmanHome", "MarksmanTarget", k_objtype_clear_area);
	
	Chewie = SpawnCharacterBF("reb_tarfful_npc_story", propRefFromName("HeroDOF1"), vector(0, 0, 0));	
	SetPropRefInvincible(Chewie, true);
	
	spawnGroupSetActive(propRefFromName("Spwn-6"), true);
	
	spawnGroupSetActive(propRefFromName("Obj6FriendSpawn"), true);
	spawnGroupSetActive(propRefFromName("Obj3FriendSpawn"), false);

	propRef player = getPlayerPropRefFromID(GetPlayerId());
	chrReplenishInventoryItemsOfType(player, "AMMO");

	SetObjectiveKills(4, iObjective);
    }
    
    else if (iObjective == 7)
    {
	if (iSubObjective == 1)
	{

	    propRef player = getPlayerPropRefFromID(GetPlayerId());
	    chrReplenishInventoryItemsOfType(player, "AMMO");
/*
	    propRef p = getNthPropFromGroup(propRefFromName("Spwn-7"), 1);
	    propRef driver = getVehicleDriver(p);
	    DriveToDestinationBF(driver, propRefFromName("ATAT_DOF_Finish") );
*/
	    SetObjectiveKills(5, iObjective);
	}

	else
	{
	    lib_SetupTeamZone(cObjectiveName, 1, "MarksmanHome", "MarksmanTarget", k_objtype_hold_area);
	    lib_SetupTeamZone(cObjectiveName, 0, "MarksmanHome", "MarksmanTarget", k_objtype_clear_area);

	    spawnGroupSetActive(propRefFromName("Spwn-7"), true);
	    spawnGroupSetActive(propRefFromName("Obj7FriendSpawn"), true);

//	    AddATAT(1, propRefFromName("Spwn-7"));    

	    SetNumSubObjectives (1, iObjective);

	    SetObjectiveTimer(1, iObjective);
	}
    }
    else if (iObjective == 8)
    {
	lib_SetupTeamZone(cObjectiveName, 1, "MarksmanHome", "MarksmanTarget", k_objtype_hold_area);
	lib_SetupTeamZone(cObjectiveName, 0, "MarksmanHome", "MarksmanTarget", k_objtype_clear_area);
	
	spawnGroupSetActive(propRefFromName("Spwn-8"), true);
	spawnGroupSetActive(propRefFromName("Obj8FriendSpawn"), true);

	Leia = SpawnCharacterBF("reb_lando_npc_story", propRefFromName("HeroDOF1"), vector(0, 0, 0));
	SetPropRefInvincible(Leia, true);
//	Hans = SpawnCharacterBF("reb_lando_npc_story", propRefFromName("HeroDOF2"), vector(0, 0, 0));

	propRef player = getPlayerPropRefFromID(GetPlayerId());
	chrReplenishInventoryItemsOfType(player, "AMMO");

	SetObjectiveKills(6, iObjective);
    }
    
    else if (iObjective == 9)
    {
	lib_SetupTeamZone(cObjectiveName, 1, "MarksmanHome", "MarksmanTarget", k_objtype_hold_area);
	lib_SetupTeamZone(cObjectiveName, 0, "MarksmanHome", "MarksmanTarget", k_objtype_clear_area);
	
	spawnGroupSetActive(propRefFromName("Spwn-9"), true);

	propRef player = getPlayerPropRefFromID(GetPlayerId());
	chrReplenishInventoryItemsOfType(player, "AMMO");

	SetObjectiveKills(5, iObjective);
    }
    
    else if (iObjective == 10)
    {
	lib_SetupTeamZone(cObjectiveName, 1, "MarksmanHome", "MarksmanTarget", k_objtype_hold_area);
	lib_SetupTeamZone(cObjectiveName, 0, "MarksmanHome", "MarksmanTarget", k_objtype_clear_area);
	
	spawnGroupSetActive(propRefFromName("Spwn-10"), true);

	propRef player = getPlayerPropRefFromID(GetPlayerId());
	chrReplenishInventoryItemsOfType(player, "AMMO");

	SetObjectiveKills(7, iObjective);

    }
    else if (iObjective == 11)
    {
	ChallengeEnd();
    }
}

AllowCallback(CALLBACK_PlayerSpawned, playerSpawned);
AllowCallback(CALLBACK_PlayerKilledBF, playerKilled);
AllowCallback(CALLBACK_TriggeredProp, triggeredProp);
AllowCallback(CALLBACK_ObjectiveTimeExpired, ObjectiveTimeExpired);
AllowCallback(CALLBACK_GameHasStarted, gameHasStarted);
AllowCallback(CALLBACK_FSpawnerComplete, finiteSpawnerComplete);


///////////////This Script Actions

waitForGameTime(0.1f);
ScriptHasStarted();
ChallengeBegin();

//Main game loop
while(1)
{
    int iNumActive = BFObjectiveGetNumActive();
    int i = 0;

    for (i=0; i<iNumActive; i++)
    {
	int iObjective = BFObjectiveGetNumForNthActive(i);
	ObjectiveTests(iObjective);

	logStr("tick");
	logInt(iObjective);
    }
    waitForGameTime(1.0f);
}


