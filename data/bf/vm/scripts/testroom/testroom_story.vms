// vim: set syntax=c :

///////////////////////////////////
/*
    testroom_story.vms

    Created By Mark Kevern
    please do not modify without asking me!
    or comment where you have modified

*/
///////////////////////////////////

/////////////MAKE SURE TO INCLUDE A BFStorylevelVarProp in your level

//Declare the CPs, less expensive?

///////////// Include Defaults //////////////////////////////////////////////
propRef pPlayer = getPlayerPropRefFromID(GetPlayerId());
boolean Skip = false;
vector ObjColor = vector(0.5, 0.5, 0.5);
boolean bEndLevel = false;

callback void playerKilled(int iKiller, int iResult, int iVictim)
{
    int iNumActive = BFObjectiveGetNumActive();
    int i = 0;

    for (i=0; i<iNumActive; i++)
    {
    	int iActive = BFObjectiveGetNumForNthActive(i);
    	if (lib_playerKilled(iKiller, iResult, iVictim, iActive)) 
    	{
    	    nextObjective(iActive);
    	}
    }   
}

function void Trigger(char16 inTriggerProp)
{    
    int iResult = 0;
    
    int iNumActive = BFObjectiveGetNumActive();
    int i = 0;
    int iActive = 0;

    for (i=0; i<iNumActive; i++)
    {
	iActive = BFObjectiveGetNumForNthActive(i);
	iResult = lib_triggeredProp(inTriggerProp, iActive);

	iResult = ObjectiveTriggerTests(iActive, inTriggerProp, iResult);

	if (iResult >= 1) nextObjective(iActive);
    }
}

callback int triggeredProp(int inType, char16 inTriggerProp, int pId)
{       
    Trigger(inTriggerProp); 
    
    return 0;
}

function int ObjectiveTriggerTests(int iObjective, char16 inTriggerProp, int iResult) 
{
    int iSubObjective = BFObjectiveGetSub(iObjective);
/*
    if (iObjective == 1)
    {
        if (iSubObjective == 0)
        {
            if (!char16cmp(inTriggerProp, "vmTrig1"))
                removeObjectiveIndicatorFromProp(propRefFromName("vmTrig1"));
            else if (!char16cmp(inTriggerProp, "vmTrig1-c1"))
                removeObjectiveIndicatorFromProp(propRefFromName("vmTrig1-c1"));
        }
    }*/
    return iResult;
}

function void ObjectiveSetupCheck()
{
    int iTempObj = GetLevelVarInt("iObjLV");
    
    if (iTempObj != -1)
    {
        char16 cName = BFObjectiveGetName(iTempObj);
        if (ObjectiveSetup(cName, iTempObj, BFObjectiveGetSub(iTempObj)))
            SetLevelVarInt("iObjLV", -1);

        waitForGameTime(0.1f);        
    }
}

function void SetObjectiveSetup(int iObj)
{
    logStr("SetObjectiveSetup Called");
    logInt(iObj);
    SetLevelVarInt("iObjLV", iObj);
}

function void nextObjective(int inObjNum) 
{    
    int result = lib_nextObjective(inObjNum);

    if(result == 1)
    {
        //if next objective returns 1 it has updated a core objective and automatically moved us onto the next
        //so do objective setup with current objective
        if (!Skip)
        {
            SetObjectiveSetup(BFObjectiveGetCurrent());
        }
    }

    if(result == 2)
    {
        //if nextobjective returns 2 it has updated a bonus objective so we will want to 
        //objective setup with the objective we passed to next objective
        if (!Skip)
        {
            SetObjectiveSetup(inObjNum);
        }
    }
}

function void JumpToObjective(int iStartObj, boolean bTeleport)
{       
	BFObjectiveSetJumpTo(iStartObj);	
    nextObjective(BFObjectiveGetCurrent());
    
    if (bTeleport)
    {
        char16 tSpawn;
        tSpawn = LevelVarToChar16("mCurrentSpawner");
        if (propExists(propRefFromChar16(tSpawn)))
            propTeleportToProp(pPlayer, propRefFromChar16(tSpawn));        
    }
    
    logStr("Jumped To Objective");
    logInt(BFObjectiveGetCurrent());
}

callback void ObjectiveTimeExpired(char16 objName)
{   
    int objNum = 0;
    objNum = BFObjectiveGetNumber(objName);   
    if (lib_ObjTimeExpired(objNum))
    {
    	nextObjective(objNum);
    }
}


callback void playerSpawned(char16 teamName, int playerId)
{
    logStr("playerSpawned");
}

callback void finiteSpawnerComplete(char16 propId) 
{
    AddVMDebugHUDMsg("FINITE SPAWNER IS DEADED ", 1, "test_objective_message");
}


/////// Defaults END /////////////////////////////////////////////




callback void gameHasStarted()
{           
    logStr("gameHasStarted");

}

function void ScriptHasStarted()
{    
    SetBFStoryPrefixes("obj_Mus", "vmTrig");

  //  ResetObjectives("mObjTmp", 10);

    //Reset Space CPs, Spawners, etc
    
    JumpToObjective(1, true);
}


/////////////////////////////////////////OBJECTIVES
propRef pClose;
propRef pClose2;

function void ObjectiveTests(int inObjNum) 
{
//Do some tests
    removeObjectiveIndicatorFromProp(pClose);    
    pClose = getClosestProp(pPlayer, propRefFromName("closestGroup"));
    AddNewObjectiveIndicatorToProp(pClose, 0);

    removeObjectiveIndicatorFromProp(pClose2);    
    pClose2 = getClosestProp(pPlayer, propRefFromName("bfRandomSp13"));
    AddNewObjectiveIndicatorToProp(pClose2, 1);    
    
}

function boolean ObjectiveSetup(char16 cObjectiveName, int iObjective, int iSubObjective)
{
    if (iObjective == 1) 
    {            
        if (iSubObjective == 1)
        {
            setVMPropActive(propRefFromName("vmGuide"), true);
            setVMPropActive(propRefFromName("vmPinDown"), true);
            DeactivateSpawner("bfRandomSp13");
        }
        else
        {
            AddPropToGroup(propRefFromName("closestGroup"), propRefFromName("shieldGen1"));
            AddPropToGroup(propRefFromName("closestGroup"), propRefFromName("shieldGen3"));
            AddPropToGroup(propRefFromName("closestGroup"), propRefFromName("shieldGen4"));
            AddPropToGroup(propRefFromName("closestGroup"), propRefFromName("shieldGen5"));
            AddPropToGroup(propRefFromName("closestGroup"), propRefFromName("shieldGen6"));
            AddPropToGroup(propRefFromName("closestGroup"), propRefFromName("shieldGen7"));
            AddPropToGroup(propRefFromName("closestGroup"), propRefFromName("shieldGen8"));
            AddPropToGroup(propRefFromName("closestGroup"), propRefFromName("shieldGen9"));            

            ActivateSpawner("CloneGroup");
            ActivateSpawner("bfRandomSp13");

            ActivateSpawner("bfRebEwokSp1");            
            
            //For markus comment out below line for it to work
            lib_SetupGroupZone(cObjectiveName, "CloneGroup", "zone_1", "", k_objtype_hold_area);
            lib_SetupGroupZone(cObjectiveName, "bfRandomSp13", "zone_2", "", k_objtype_hold_area);
            
            SetNumSubObjectives(1, iObjective);
            SetObjectiveKills(1, iObjective);            
        }
    }
    else if (iObjective == 2) 
    {

	if(iSubObjective == 1)
	{
	    SetObjectiveTimer(5, iObjective);
	    addSpeechMessage("STR_CHRRANK_SERGEANT", 3);
	}
	else if(iSubObjective == 2)
	{
	    SetObjectiveTimer(5, iObjective);
	    addSpeechMessage("STR_CHRRANK_LIEUTENANT", 10);
	}
	else if(iSubObjective == 3)
	{
	    SetObjectiveTimer(5, iObjective);
	    addSpeechMessage("STR_CHRRANK_CAPTAIN", 10);
	}
	else
	{
	
    //	propRef trainingPOI = propRefFromName( "trainingPOI1_" );
    //	BFTrainingObjectiveSetUnlocked(trainingPOI, true);
	    
	    SetObjectiveTimer(10, iObjective);
	    char16 bonusObjective1 = StringToChar16("obj_Mus5"); // Convert Objective String to Char16
	    BFObjectiveAddBonus(bonusObjective1, 5);                 // Activate Bonus Objective For Shooting Down Landing Craft
	    ObjectiveSetup(bonusObjective1, 5, 0);

	    char16 bonusObjective2 = StringToChar16("obj_Mus6"); // Convert Objective String to Char16
	    BFObjectiveAddBonus(bonusObjective2, 6);                 // Activate Bonus Objective For Shooting Down Landing Craft
	    ObjectiveSetup(bonusObjective2, 6, 0);

	    SetNumSubObjectives(3, iObjective);
	    addSpeechMessage("STR_CHRRANK_ROOKIE", 5);
	}
    }
    else if (iObjective == 3) 
    { 
//	propRef trainingPOI = propRefFromName( "trainingPOI1_" );
//	BFTrainingObjectiveSetCompleted(trainingPOI, true);
	SetObjectiveTimer(20, iObjective);
	removeObjectiveIndicatorFromProp(propRefFromName("ground2space1_"));
	disablePropAsPriorityPointOfInterest(propRefFromName("player_0"));
    }
    else if (iObjective == 4) 
    { 
	AddNewObjectiveIndicatorToProp(propRefFromName("ground2space1_"), k_objectiveIndicatorType_mainObjective);
	SetObjectiveTimer(20, iObjective);
	removeSpeechMessage();
    }
    else if (iObjective == 5) 
    { 
	SetObjectiveTimer(60, iObjective);
    }    
    else if (iObjective == 6) 
    { 
	SetObjectiveTimer(60, iObjective);
    }

    return true;
}

AllowCallback(CALLBACK_PlayerSpawned, playerSpawned);
AllowCallback(CALLBACK_PlayerKilledBF, playerKilled);
AllowCallback(CALLBACK_TriggeredProp, triggeredProp);
AllowCallback(CALLBACK_ObjectiveTimeExpired, ObjectiveTimeExpired);
AllowCallback(CALLBACK_GameHasStarted, gameHasStarted);
AllowCallback(CALLBACK_FSpawnerComplete, finiteSpawnerComplete);


///////////////This Script Actions

wholeScreenFade(0.0f, 1.0f, false);
waitForGameTime(0.1f);
ScriptHasStarted(); //Do any setups
waitForGameTime(1.0f);
wholeScreenFade(1.0f, 0.0f, false);

//Main game loop
while(!bEndLevel)
{
    int iNumActive = BFObjectiveGetNumActive();
    int i = 0;

    ObjectiveSetupCheck();

    for (i=0; i<iNumActive; i++)
    {
        int iObjective = BFObjectiveGetNumForNthActive(i);
        ObjectiveTests(iObjective);        
        waitForGameTime(0.01f);
    }

    waitForGameTimeOrLVChange(1.0f, "iObjLV");
    logStr("tick");
    logInt(iObjective);    
}

logStr("THIS LEVEL IS FINISHED");
