// vim: set syntax=c :

///////////////////////////////////
/*
   dathomir_story.vms

   Created By Simon Vickers
   Aww yeah it is :) 
 
 */
///////////////////////////////////

boolean Skip = false; 
boolean bEndLevel = false;

int guideLimit = 0;
int routeChosen = 0;
int hasLanded = 0;

propRef guideNum1;
propRef guideNum2;
propRef guideNum3;
propRef guideNum4;
propRef guideNum5;

boolean playCutscene = false;
boolean playCutscene2 = false;
propRef player = getPlayerPropRefFromID(GetPlayerId());

/////////////////////////////          INCLUDE DEFAULTS           /////////////////

//////////////////////////CALLBACK INFO DO NOT CHANGE

//PlayerKilled Callback Info
boolean bCB_PK = false;
int iCB_PK_KillerId = -1;
int iCB_PK_Victim = -1;
int iCB_PK_Result = -1;

//triggeredProp Callback Info
boolean bCB_TP = false;
char16 cCB_TP_Prop = StringToChar16("");

//ObjectiveTimeExpired Callback Info
boolean bCB_OTE = false;
char16 cCB_OTE_ObjName = StringToChar16("");

//shipReachedScriptedSplineSegment  Callback Info
boolean bCB_SRSS = false;
propRef pCB_SRSS_Ship;
propRef pCB_SRSS_Spline;
int iCB_SRSS_Segment = -1;

//////////////////////////END CALLBACK INFO

function void ProcessCallbacks()
{
    //No else's as could be waiting to process two or more!

    if (GetLevelVarInt("iCBLV") != -1)
    {
        if (bCB_PK) // playerKilled callback
        {
            playerKilled(iCB_PK_KillerId, iCB_PK_Result, iCB_PK_Victim);
            bCB_PK = false;
        }

        if (bCB_TP) // triggeredProp callback
        {
            Trigger(cCB_TP_Prop);
            bCB_TP = false;
        }

        // ObjectiveTimeExpired callback
        if (bCB_OTE)
        {
            ObjectiveTimeExpired(cCB_OTE_ObjName);
            bCB_OTE = false;
        }

        // shipReachedScriptedSplineSegment callback
        if (bCB_SRSS)
        {
            ShipReachedScriptedSplineSegment(pCB_SRSS_Ship, pCB_SRSS_Spline, iCB_SRSS_Segment);
            bCB_SRSS = false;
        }

        SetLevelVarInt("iCBLV", -1);    
        waitForGameTime(0.1f);
    }
}

callback void CB_PlayerKilled(int iKiller, int iResult, int iVictim)
{
    logStr("CB_PlayerKilled");
    /*
    bCB_PK = true;
    iCB_PK_KillerId = iKiller;
    iCB_PK_Victim = iVictim;
    iCB_PK_Result = iResult;

    SetLevelVarInt("iCBLV", 1);    */
    playerKilled(iKiller, iResult, iVictim);
}

callback int CB_TriggeredProp(int inType, char16 inTriggerProp, int pId)
{    
    logStr("CB_TriggeredProp");    
    /*bCB_TP = true;
    cCB_TP_Prop = inTriggerProp;

    SetLevelVarInt("iCBLV", 1); */   
    Trigger(inTriggerProp);
    return 0;
}

callback void CB_ObjectiveTimeExpired(char16 objName)
{
    logStr("CB_ObjectiveTimeExpired");        
    /*bCB_OTE = true;
    cCB_OTE_ObjName = objName;

    SetLevelVarInt("iCBLV", 1);    */
    ObjectiveTimeExpired(objName);
}

callback void CB_shipReachedScriptedSplineSegment(propRef ship, propRef spline, int segment)
{
    logStr("CB_shipReachedScriptedSplineSegment");            
    /*bCB_SRSS = true;
    pCB_SRSS_Ship = ship;
    pCB_SRSS_Spline = spline;
    iCB_SRSS_Segment = segment;

    SetLevelVarInt("iCBLV", 1);*/
    ShipReachedScriptedSplineSegment(ship, spline, segment);
}

AllowCallback(CALLBACK_PlayerKilledBF, CB_playerKilled);
AllowCallback(CALLBACK_TriggeredProp, CB_triggeredProp);
AllowCallback(CALLBACK_ObjectiveTimeExpired, CB_ObjectiveTimeExpired);
AllowCallback(CALLBACK_ShipReachedScriptedSplineSegment, CB_shipReachedScriptedSplineSegment);

//////////////////////////END CALLBACKS

function void playerKilled(int iKiller, int iResult, int iVictim)
{
    int iNumActive = BFObjectiveGetNumActive();
    int i = 0;

    for (i=0; i<iNumActive; i++)
    {
        int iActive = BFObjectiveGetNumForNthActive(i);
        if (lib_playerKilled(iKiller, iResult, iVictim, iActive)) 
        {
            nextObjective(iActive);
        }
    }
}
function void Trigger(char16 inTriggerProp) //Used so can be called elsewhere in script (cant call a callback)
{    
    int iResult = 0;
    int iNumActive = BFObjectiveGetNumActive();
    int i = 0;
    int iActive = 0;
    for (i=0; i<iNumActive; i++)
    {
        iActive = BFObjectiveGetNumForNthActive(i);
        iResult = lib_triggeredProp(inTriggerProp, iActive);
        iResult = ObjectiveTriggerTests(iActive, inTriggerProp, iResult);

        if (iResult >= 1) nextObjective(iActive);
    }
}

function void ObjectiveSetupCheck()
{
    int iTempObj = GetLevelVarInt("iObjLV");
    
    if (iTempObj != -1)
    {
        char16 cName = BFObjectiveGetName(iTempObj);
        if (ObjectiveSetup(cName, iTempObj, BFObjectiveGetSub(iTempObj)))
            SetLevelVarInt("iObjLV", -1);

        waitForGameTime(0.1f);        
    }
}

function void SetObjectiveSetup(int iObj)
{
    logStr("SetObjectiveSetup Called");
    logInt(iObj);
    SetLevelVarInt("iObjLV", iObj);
}

function void nextObjective(int inObjNum) 
{    
    int result = lib_nextObjective(inObjNum);

    if(result == 1)
    {
        //if next objective returns 1 it has updated a core objective and automatically moved us onto the next
        //so do objective setup with current objective
        if (!Skip)
        {
            SetObjectiveSetup(BFObjectiveGetCurrent());
        }
    }

    if(result == 2)
    {
        //if nextobjective returns 2 it has updated a bonus objective so we will want to 
        //objective setup with the objective we passed to next objective
        if (!Skip)
        {
            SetObjectiveSetup(inObjNum);
        }
    }
}

function void JumpToObjective(int iStartObj, boolean bTeleport)
{       
	BFObjectiveSetJumpTo(iStartObj);	
    nextObjective(BFObjectiveGetCurrent());
    
    if (bTeleport)
    {
        char16 tSpawn;
        tSpawn = LevelVarToChar16("mCurrentSpawner");
        if (propExists(propRefFromChar16(tSpawn)))
            propTeleportToProp(player, propRefFromChar16(tSpawn));        
    }
    
    logStr("Jumped To Objective");
    logInt(BFObjectiveGetCurrent());
}

function void ObjectiveTimeExpired(char16 objName)
{   
    int objNum = 0;
    objNum = BFObjectiveGetNumber(objName);   
    
    if (lib_ObjTimeExpired(objNum))
    {
        if (objNum == 20)
        {
            char16 emptyString = StringToChar16("");
            int currentObjectiveNumber = BFObjectiveGetCurrent();
            BFObjectiveFailObjective(emptyString, currentObjectiveNumber); 	    
        }
        else
        {
            nextObjective(objNum);
        }	    
    }
}

/* NOT NEEEDED
callback void playerSpawned(char16 teamName, int playerId)
{
    //int iObjective = GetLevelVarInt("mObjective");
    logStr("teamName: ");
    logchar16(teamName);
}
callback void finiteSpawnerComplete(char16 propId) 
{
    AddVMDebugHUDMsg("FINITE SPAWNER IS DEADED", 1, "test_objective_message");
}

callback void gameHasStarted()
{           
}
*/

/////////////////////////////          DEFAULTS END            /////////////////


function void ResetProps()
{
    // e.g    disableTrigger(propRefFromName("DeathTrigger"));       
}

function void ScriptHasStarted()
{
    
    SetBFStoryPrefixes("obj_Dat_St", "vmTrig");
    ResetObjectives("mObjTmp", 11);     

    ResetProps();  
    
    disableTrigger(propRefFromName("eventTrig1"));
    disableTrigger(propRefFromName("eventTrig7"));
    disableTrigger(propRefFromName("eventTrig8"));
    disableTrigger(propRefFromName("eventTrig9"));
    disableTrigger(propRefFromName("eventTrig5"));
    disableTrigger(propRefFromName("eventTrig11"));
    disableTrigger(propRefFromName("doorHackTrig"));
    disableTrigger(propRefFromName("compHackTrig"));
    JumpToObjective(1, true);
}

function int ObjectiveTriggerTests(int iObjective, char16 inTriggerProp, int iResult) 
{
    int iSubObjective = BFObjectiveGetSub(iObjective);

    /* NOTE We're not using this right?
    //e.g for an alternate route
    if (iResult >= 1) //1 is normal route e.g vmTrig1, 2 is route 1 e.g vmTrig1r1
    {    
        if (iObjective == 1)
        {
            if (iResult == 1)
            {
                JumpToObjective(10, true);
                iResult = 0;
            }
            else
            {
                JumpToObjective(20, true);                
                iResult = 0;
                }
        }
    }
    */

    //No Change
    return iResult;
}

function propRef spawnGuideRebs(int section, int guideToSpawn)
{
    int numOfRebs;
    propRef guide;
    int guideToSpawn;
    numOfRebs = propGroupGetNumOfProps(propRefFromName("rebGuideGrp"));
    int i = rndInRange(1, 6);
    char16 splineStage;
    splineStage = StringCatInt("guideSpline", guideToSpawn, "_");
    char16 spawnStage;
    spawnStage = StringCatInt("guideSpawn", guideToSpawn, "_");
    char16 cPoint;
    cPoint = Char16CatInt(spawnStage, section);
    char16 splineName;
    splineName = Char16CatInt(splineStage, section);
    string sVehicle;

    if (i <=3)
    {
	sVehicle = "xwing_fighter";
    }

    else if ((i <=5) && (i>3))
    {
	sVehicle = "awing_fighter";
    }

    else
    {
	sVehicle = "ywing_fighter";
    }		    
    
    guide = SpawnAIVehicle(propRefFromChar16(cPoint), "reb_sol_snpc", sVehicle , 0, false, 3);	
    addPropToGroup(propRefFromName("rebGuideGrp"), guide);
    BFShipFollowScriptedSplineNoAvoidance(guide, propRefFromChar16(splineName));

    return guide;
}


function void spawnShipyardImps(int section, int numToSpawn)
{
    int s = 1; 
    while ( s <= numToSpawn)
    {
	int i = rndInRange(1, 3);
        char16 splineStage;
	splineStage = StringCatInt("shpyrdSpline", s, "_");
	char16 spawnStage;
	spawnStage = StringCatInt("shpyrdSpawn", s, "_");
	char16 cPoint;
	cPoint = Char16CatInt(spawnStage, section);
	char16 splineName;
	splineName = Char16CatInt(splineStage, section);
	string sVehicle;
	
	if (i <=3)
	{
	    sVehicle = "tie_fighter";
	}
	
	else 
	{
	    sVehicle = "tie_intercepter";
	}    
	propRef guide;
	guide = SpawnAIVehicle(propRefFromChar16(cPoint), "imp_eng_snpc", sVehicle , 0, false, 3);	
	addPropToGroup(propRefFromName("impFlyGrp"), guide);
	BFShipFollowScriptedSplineNoAvoidance(guide, propRefFromChar16(splineName));
	s++;
    }
}

function void shipReachedScriptedSplineSegment(propRef ship, propRef spline, int segment)
{
    if (spline == propRefFromName("guideSpline1_1"))
    {	
	if (guideLimit > 1)
	{
	    if (segment == 9)
	    {
		BFShipFollowScriptedSplineNoAvoidance(ship , propRefFromName("guideSpline1_2"));
	    }
	}
	else
	{
	    if (segment == 4)
	    {
		propDelete(ship);
	    }
	}
    }

    else if (spline == propRefFromName("guideSpline2_1"))
    {
	if (guideLimit > 1)
	{
	    if (segment == 9)
	    {
		BFShipFollowScriptedSplineNoAvoidance(ship , propRefFromName("guideSpline2_2"));
	    }
	}

	else
	{
	    if (segment == 4)
	    {
		propDelete(ship);
	    }
	}
    }
	
    else if (spline == propRefFromName("guideSpline3_1"))
    {
	if (guideLimit > 1)
	{
	    if (segment == 10)
	    {
		BFShipFollowScriptedSplineNoAvoidance(ship , propRefFromName("guideSpline3_2"));
	    }
	}

	else
	{
	    if (segment == 4)
	    {
		propDelete(ship);
	    }
	}
    }

    else if (spline == propRefFromName("guideSpline1_2"))
    {
	if (guideLimit > 2)
	{
	    if (segment == 5)
	    {
		BFShipFollowScriptedSplineNoAvoidance(ship , propRefFromName("guideSpline1_3"));
	    }
	}
	else
	{
	    if (segment == 2)
	    {
		propDelete(ship);
	    }
	}
    }

    else if (spline == propRefFromName("guideSpline2_2"))
    {
	if (guideLimit > 2)
	{
	    if (segment == 6)
	    {
		BFShipFollowScriptedSplineNoAvoidance(ship , propRefFromName("guideSpline2_3"));
	    }
	}
	else
	{
	    if (segment == 1)
	    {
		propDelete(ship);
	    }
	}
    }

    else if (spline == propRefFromName("guideSpline3_2"))
    {
	if (guideLimit > 2)
	{
	    if (segment == 6)
	    {
		BFShipFollowScriptedSplineNoAvoidance(ship , propRefFromName("guideSpline3_3"));
	    }
	}
	else
	{
	    if (segment == 2)
	    {
		propDelete(ship);
	    }
	}
    }

    else if (spline == propRefFromName("guideSpline1_3"))
    {
	if (guideLimit > 3)
	{
	    if (segment == 6)
	    {
		BFShipFollowScriptedSplineNoAvoidance(ship , propRefFromName("guideSpline1_4"));
	    }
	}
	else
	{
	    if (segment == 1)
	    {
		propDelete(ship);
	    }
	}
    }

    else if (spline == propRefFromName("guideSpline2_3"))
    {
	if (guideLimit > 3)
	{
	    if (segment == 7)
	    {
		BFShipFollowScriptedSplineNoAvoidance(ship , propRefFromName("guideSpline2_4"));
	    }
	}
	else
	{
	    if (segment == 1)
	    {
		propDelete(ship);
	    }
	}
    }

    else if (spline == propRefFromName("guideSpline3_3"))
    {
	if (guideLimit > 3)
	{
	    if (segment == 6)
	    {
		BFShipFollowScriptedSplineNoAvoidance(ship , propRefFromName("guideSpline3_4"));
	    }
	}
	else
	{
	    if (segment == 1)
	    {
		propDelete(ship);
	    }
	}
    }

    else if (spline == propRefFromName("guideSpline1_4"))
    {
	if (segment == 9)
	{
	    BFShipFollowScriptedSplineNoAvoidance(ship , propRefFromName("guideSpline1_5"));
	}
    }

    else if (spline == propRefFromName("guideSpline2_4"))
    {
	if (segment == 11)
	{
	    BFShipFollowScriptedSplineNoAvoidance(ship , propRefFromName("guideSpline2_5"));
	}
    }

    else if (spline == propRefFromName("guideSpline3_4"))
    {
	if (segment == 9)
	{
	    BFShipFollowScriptedSplineNoAvoidance(ship , propRefFromName("guideSpline3_5"));
	}
    }

    else if (spline == propRefFromName("guideSpline1_5"))
    {
	if (segment == 4)
	{
	    
	}
    }

    else if (spline == propRefFromName("guideSpline2_5"))
    {
	if (segment == 4)
	{
	    
	}
    }

    else if (spline == propRefFromName("guideSpline3_5"))
    {
	if (segment == 5)
	{
	    
	}
    }
       
    else if (spline == propRefFromName("guideSpline1_6"))
    {
	if (segment == 5)
	{
	    BFShipFollowScriptedSplineNoAvoidance(ship , propRefFromName("guideSpline1_7"));
	}
    }

    else if (spline == propRefFromName("guideSpline2_6"))
    {
	if (segment == 5)
	{
	    BFShipFollowScriptedSplineNoAvoidance(ship , propRefFromName("guideSpline2_7"));
	}
    }

    else if (spline == propRefFromName("guideSpline3_6"))
    {
	if (segment == 5)
	{
	    BFShipFollowScriptedSplineNoAvoidance(ship , propRefFromName("guideSpline3_7"));
	}
    }

    else if (spline == propRefFromName("guideSpline1_7"))
    {
	if (segment == 5)
	{
	    BFShipFollowScriptedSplineNoAvoidance(ship , propRefFromName("guideSpline1_8"));
	}
    }

    else if (spline == propRefFromName("guideSpline2_7"))
    {
	if (segment == 11)
	{
	    BFShipFollowScriptedSplineNoAvoidance(ship , propRefFromName("guideSpline2_8"));
	}
    }

    else if (spline == propRefFromName("guideSpline3_7"))
    {
	if (segment == 11)
	{
	    BFShipFollowScriptedSplineNoAvoidance(ship , propRefFromName("guideSpline3_8"));
	}
    }

    else if (spline == propRefFromName("guideSpline1_8"))
    {
	if (segment == 8)
	{
	    BFShipFollowScriptedSplineNoAvoidance(ship , propRefFromName("guideSpline1_9"));
	}
    }

    else if (spline == propRefFromName("guideSpline2_8"))
    {
	if (segment == 4)
	{
	    BFShipFollowScriptedSplineNoAvoidance(ship , propRefFromName("guideSpline2_9"));
	}
    }

    else if (spline == propRefFromName("guideSpline3_8"))
    {
	if (segment == 4)
	{
	    BFShipFollowScriptedSplineNoAvoidance(ship , propRefFromName("guideSpline3_9"));
	}
    }

    else if (spline == propRefFromName("guideSpline1_9"))
    {
	if (segment == 7)
	{
	    BFShipFollowScriptedSplineNoAvoidance(ship , propRefFromName("guideSpline1_10"));
	}
    }

    else if (spline == propRefFromName("guideSpline2_9"))
    {
	if (segment == 10)
	{
	    BFShipFollowScriptedSplineNoAvoidance(ship , propRefFromName("guideSpline2_10"));
	}
    }

    else if (spline == propRefFromName("guideSpline3_9"))
    {
	if (segment == 8)
	{
	    BFShipFollowScriptedSplineNoAvoidance(ship , propRefFromName("guideSpline3_10"));
	}
    }

    else if (spline == propRefFromName("guideSpline1_10"))
    {
	if (segment == 8)
	{
	    BFShipFollowScriptedSplineNoAvoidance(ship , propRefFromName("guideSpline1_11"));
	}
    }

    else if (spline == propRefFromName("guideSpline2_10"))
    {
	if (segment == 7)
	{
	    BFShipFollowScriptedSplineNoAvoidance(ship , propRefFromName("guideSpline2_11"));
	}
    }

    else if (spline == propRefFromName("guideSpline3_10"))
    {
	if (segment == 7)
	{
	    BFShipFollowScriptedSplineNoAvoidance(ship , propRefFromName("guideSpline3_11"));
	}
    }

    else if (spline == propRefFromName("guideSpline1_11"))
    {
	if (segment == 3)
	{
	    BFShipFollowScriptedSplineNoAvoidance(ship , propRefFromName("guideSpline1_12"));
	}
    }

    else if (spline == propRefFromName("guideSpline2_11"))
    {
	if (segment == 4)
	{
	    BFShipFollowScriptedSplineNoAvoidance(ship , propRefFromName("guideSpline2_12"));
	}
    }

    else if (spline == propRefFromName("guideSpline3_11"))
    {	
	if (segment == 3)
	{
	    BFShipFollowScriptedSplineNoAvoidance(ship , propRefFromName("guideSpline3_12"));
	}
    }

    else if (spline == propRefFromName("guideSpline1_12"))
    {
	if (segment == 4)
	{
	    BFShipStopFollowingScriptedSpline(ship);
	}
    }

    else if (spline == propRefFromName("guideSpline2_12"))
    {
	if (segment == 6)
	{
	    BFShipStopFollowingScriptedSpline(ship);
	}
    }

    else if (spline == propRefFromName("guideSpline3_12"))
    {
	if (segment == 6)
	{
	    BFShipStopFollowingScriptedSpline(ship);
	}
    }

    else if (spline == propRefFromName("shpyrdSpline1_1"))
    {
	if (testIfPropsAreClose(ship, player, 200.0f))
	{
	    BFShipStopFollowingScriptedSpline(ship);
	}
    }   

    else if (spline == propRefFromName("shpyrdSpline2_1"))
    {
	if (testIfPropsAreClose(ship, player, 200.0f))
	{
	    BFShipStopFollowingScriptedSpline(ship);
	}
    }   

    else if (spline == propRefFromName("shpyrdSpline1_2"))
    {
	if (testIfPropsAreClose(ship, player, 200.0f))
	{
	    BFShipStopFollowingScriptedSpline(ship);
	}
    }   

    else if (spline == propRefFromName("shpyrdSpline2_2"))
    {
	if (testIfPropsAreClose(ship, player, 200.0f))
	{
	    BFShipStopFollowingScriptedSpline(ship);
	}
    }   

    else if (spline == propRefFromName("shpyrdSpline3_2"))
    {
	if (testIfPropsAreClose(ship, player, 200.0f))
	{
	    BFShipStopFollowingScriptedSpline(ship);
	}
    }   
}

/////////////////////////////          OBJECTIVE TESTS            /////////////////

// We can test if certain objectives have been completed here, rather than trigger them immediately
// This is because sometimes it is much easier on the CPU to test here rather than set up triggers
// Also we can do complex objective tests here which aren't otherwise possible (e.g. if prop is destroyed)

function void ObjectiveTests(int iObjective) 
{   
    //Tests for each game tick

    int iSubObjective = BFObjectiveGetSub(iObjective);        
///////////////////////////////////////////////////////////////////////////////////////////////////////////
    if (iObjective <= 4)
    {
	if (!propExists(guideNum1))
	{
	    guideNum1 = spawnGuideRebs(guideLimit, 1);
	}

	if (!propExists(guideNum2))
	{
	    guideNum2 = spawnGuideRebs(guideLimit, 2);
	}
	
	if (!propExists(guideNum3))
	{
	    guideNum3 = spawnGuideRebs(guideLimit, 3);
	}

	if (!propExists(guideNum4))
	{
	    guideNum4 = spawnGuideRebs((guideLimit-1), 1);
	}

	if (!propExists(guideNum5))
	{
	    guideNum5 = spawnGuideRebs((guideLimit-1), 2);
	}
	
	if (iObjective == 3)
	{	
	    if (!propExists(propRefFromName("shipyard_com1")))
	    {
		JumpToObjective(4, true);
	    }
	}
	
	else if (iObjective == 4)
	{
	    if (iSubObjective == 6)
	    {   
		if (!propExists(propRefFromName("shipyard_core1")))
		{
		    nextObjective(iObjective);
		}
	    }
	}
    }    

        
    else if (iObjective == 6)
    {
     	int numLeft;
	numLeft = propGroupSpCountAliveSpawnedProps(propRefFromName("impsBattle"));
	
	if (iSubObjective == 1)
	{
	    if (!IsPlayerInVehicle("STR_VEHICLE_NAME_YWING_FIGHTER") && triggerPropIsActive(propRefFromName("playerHasLanded")) && !hasLanded)
	    {
		hasLanded = 1;
		activateTalkingHead(0.0f, 1.72f, -1.3f, 0.0f, 1.72f, -2.0f, 5.0f, "characters/heroes/shara/scenes/shara", "AN_lnd_tlk01", "Nice work X2, but we could really do with some help down here");  
    	    }
	}

	else if (iSubObjective == 4)
	{
	    if (numLeft <= 4)
	    {
		nextObjective(iObjective);
	    }
	}
    }

    else if (iObjective == 7)
    {
	if (iSubObjective == 2)
	{
	    if (!propExists(propRefFromName("rancorGuard")))
	    {
		nextObjective(iObjective);
	    }
	}
	
	else if (iSubObjective == 3)
	{
	    if (testIfPropsAreClose(propRefFromName("sharaJoin"), propRefFromName("sharaDoorHack"), 10.0f))
	    {
		nextObjective(iObjective);
	    }
	}
    }
    
    else if (iObjective == 8)
    {
	if (iSubObjective == 1)
	{
	    if (!propValid(propRefFromName("x1_act32")))
	    {
		nextObjective(iObjective);
	    }
	}
    }

    else if (iObjective == 9)
    {
	if (triggerPropIsActive(propRefFromName("eventTrig8")) && !routeChosen)
	{
	    routeChosen = 1;
	    lib_SetupGroupZone(BFObjectiveGetName(iObjective), "balconyGrp", "roofHold", "roofTarget", k_objtype_hold_area);
	}

        if (iSubObjective == 1)
	{
	    if (propExists(propRefFromName("shara2Join")))
	    {
		if (testIfPropsAreClose(propRefFromName("shara2Join"), player, 5.0f))
		{
		    nextObjective(iObjective);
		}
	    }
	}
    }

    
    if (playCutscene)
    {
	playTimeline("data/bf/timelines/cs14.res");
	playCutscene = false;
	nextObjective(iObjective);
    }

    if (playCutscene2)
    {
	playTimeline("data/bf/timelines/cs14a.res");
	playCutscene2 = false;
	nextObjective(iObjective);
    }
}

/////////////////////////////          OBJECTIVES            /////////////////

// MAIN OBJECTIVE SETUP FUNCTION (most of your code will go here)
// Set up what each objective actually is (the code for it anyway) and trigger events happening as player completes objectives
// Objective description strings and numbers are in mgrsetup/objectivesmgr.res + strings localisation file

function boolean ObjectiveSetup(char16 cObjectiveName, int iObjective, int iSubObjective)
{
logStr("-------------> ObjectiveSetup Called");
    logInt(iObjective);
    logInt(iSubObjective); 


//////////OBJECTIVE 1: Investigate the Star Destroyer Graveyard

    if (iObjective == 1)
    {
	BFAddFlyingAIPropCentricPatrolZone( player, 1200.0f );
	BFFunnelSetEnabled(2, false);
	BFFunnelSetEnabled(3, false);
	propSetVisible(0, propRefFromName("x1_act32"));
	propRef gary;
	gary = SpawnPropFromTemplate("reb_dat2_snpc", propRefFromName("BFStory_LVars1_"), vector(0f,0f,0f));
	SpawnInVehicle(player, propRefFromName("playerStartDOF"), StringToChar16("ywing_fighter"), 5, k_seatPos_driver );
	propRef playerVehicle = getDriverVehicle( player);
        PassengerVehicleBF(gary, playerVehicle, true);
	addNewObjectiveIndicatorToProp(propRefFromName("Indicator1"), k_objectiveIndicatorType_mainObjective);	  	
	SetObjectiveTriggered(true, iObjective);
	setVMPropActive(propRefFromName("ambVehicles"), true);  	
    }

//////////OBJECTIVE 2: Enter the Shipyard

    else if (iObjective == 2)
    { 
	if (iSubObjective == 1)
	{
	    BFFunnelSetEnabled(2, true);
	    guideLimit = 2;
	    activateTalkingHead(0.0f, 1.72f, -1.3f, 0.0f, 1.72f, -2.0f, 5.0f, "characters/heroes/shara/scenes/shara", "AN_lnd_tlk01", "Hurry, it up X2! We're getting torn to pieces out here");   	     	     
	    addNewObjectiveIndicatorToProp(propRefFromName("vmTrig2_1"), k_objectiveIndicatorType_mainObjective);
	    removeObjectiveIndicatorFromProp(propRefFromName("vmTrig2"));
	    spawnShipyardImps(1, 2);	    
	    SetObjectiveTriggered(true, iObjective);
	}

	else if (iSubObjective == 2)
	{
	    guideLimit = 3;
	    addNewObjectiveIndicatorToProp(propRefFromName("vmTrig2_2"), k_objectiveIndicatorType_mainObjective);
	    removeObjectiveIndicatorFromProp(propRefFromName("vmTrig2_1"));
	    spawnShipyardImps(2, 3);	    
	    SetObjectiveTriggered(true, iObjective);
	}

	else if (iSubObjective == 3)
	{
	    guideLimit = 4;
	    addNewObjectiveIndicatorToProp(propRefFromName("vmTrig2_3"), k_objectiveIndicatorType_mainObjective);
	    removeObjectiveIndicatorFromProp(propRefFromName("vmTrig2_2")); 		    
	    SetObjectiveTriggered(true, iObjective);
	}
	
        else
	{
	    setNthVMPropStringVar(propRefFromName("ambVehicles"), "rebSpwnDOF2_", 1);
	    setNthVMPropStringVar(propRefFromName("ambVehicles"), "impSpwnDOF2_", 4);  
	    activateTalkingHead(0.0f, 1.72f, -1.3f, 0.0f, 1.72f, -2.0f, 8.0f, "characters/heroes/shara/scenes/shara", "AN_lnd_tlk01", "Look out pilots! That shipyard's anything but abandoned. X2, get inside and take it and those star destroyers out! We'll keep them busy");
	    guideLimit = 1;
	    addNewObjectiveIndicatorToProp(propRefFromName("vmTrig2"), k_objectiveIndicatorType_mainObjective);
	    removeObjectiveIndicatorFromProp(propRefFromName("Indicator1")); 	    
	    SetNumSubObjectives(3, iObjective);
	    SetObjectiveTriggered(true, iObjective);
	}	
    }

//////////OBJECTIVE 3: Destroy the Shield Gen

    else if (iObjective == 3)
    {
	if (iSubObjective == 1)
	{  
	    activateTalkingHead(0.0f, 1.72f, -1.3f, 0.0f, 1.72f, -2.0f, 8.0f, "characters/heroes/shara/scenes/shara", "AN_lnd_tlk01", "You're going to have to take out the communications array at the shipyards base. It should stop them from calling in reinforcements");     
	}

	else
	{
	    guideLimit = 5;
	    BFRemoveFlyingAIPropCentricPatrolZone(player);
	    BFAddFlyingAIPropCentricPatrolZone( propRefFromName("shipyard_com1"), 400.0f );
	    setNthVMPropStringVar(propRefFromName("ambVehicles"), "null", 6);
	    setNthVMPropStringVar(propRefFromName("ambVehicles"), "null", 7);
	    BFKillAllNPCsFromSpawner("rebFlyGrp");
	    BFKillAllNPCsFromSpawner("impFlyGrp");   
	    addNewObjectiveIndicatorToProp(propRefFromName("vmTrig3"), k_objectiveIndicatorType_mainObjective);	
	    removeObjectiveIndicatorFromProp(propRefFromName("vmTrig2_3")); 	
	    SetObjectiveTriggered(true,iObjective);
	    SetNumSubObjectives(1, iObjective);
	}
    }

//////////OBJECTIVE 4: Destroy the Power Core

    else if (iObjective == 4)
    {
	if (iSubObjective == 1)
	{
	     guideLimit = 8;
	    addNewObjectiveIndicatorToProp(propRefFromName("vmTrig4_1"), k_objectiveIndicatorType_mainObjective);
	    removeObjectiveIndicatorFromProp(propRefFromName("vmTrig4")); 		    
	    SetObjectiveTriggered(true,iObjective);
	}

	else if (iSubObjective == 2)
	{
	     guideLimit = 9;
	    addNewObjectiveIndicatorToProp(propRefFromName("vmTrig4_2"), k_objectiveIndicatorType_mainObjective);
	    removeObjectiveIndicatorFromProp(propRefFromName("vmTrig4_1")); 		    
	    SetObjectiveTriggered(true,iObjective);
	}
	
	else if (iSubObjective == 3)
	{
	    guideLimit = 10;
	    addNewObjectiveIndicatorToProp(propRefFromName("vmTrig4_3"), k_objectiveIndicatorType_mainObjective);
	    removeObjectiveIndicatorFromProp(propRefFromName("vmTrig4_2")); 		    
	    SetObjectiveTriggered(true,iObjective);
	}

	else if (iSubObjective == 4)
	{
	    guideLimit = 11;
	    addNewObjectiveIndicatorToProp(propRefFromName("weetabix1"), k_objectiveIndicatorType_mainObjective);
	    addNewObjectiveIndicatorToProp(propRefFromName("weetabix2"), k_objectiveIndicatorType_mainObjective);
	    removeObjectiveIndicatorFromProp(propRefFromName("vmTrig4_3")); 		    
	    SetObjectiveTriggered(true,iObjective);
	}

	else if (iSubObjective == 5)
	{
	    guideLimit = 12;
	    addNewObjectiveIndicatorToProp(propRefFromName("vmTrig4_5"), k_objectiveIndicatorType_mainObjective);
	    removeObjectiveIndicatorFromProp(propRefFromName("weetabix1"));
	    removeObjectiveIndicatorFromProp(propRefFromName("weetabix2"));
	    SetObjectiveTriggered(true,iObjective);
	}

	else if (iSubObjective == 6)
	{  
	    BFFunnelSetEnabled(3, true);
	    addNewObjectiveIndicatorToProp(propRefFromName("shipyardInd"), k_objectiveIndicatorType_mainObjective);
	    removeObjectiveIndicatorFromProp(propRefFromName("vmTrig4_5"));
	}    
	 
	else
	{	    
	    guideLimit = 7;
	    BFRemoveFlyingAIPropCentricPatrolZone(propRefFromName("shipyard_com1"));
	    BFAddFlyingAIPropCentricPatrolZone( player, 400.0f );
	    addNewObjectiveIndicatorToProp(propRefFromName("vmTrig4"), k_objectiveIndicatorType_mainObjective);
	    removeObjectiveIndicatorFromProp(propRefFromName("vmTrig3")); 		    
    	    SetObjectiveTriggered(true,iObjective);
	    SetNumSubObjectives(6, iObjective);
	}	    
    }

//////////OBJECTIVE 5: Escape before boom time

    else if (iObjective == 5)
    {	
	if (iSubObjective == 1)
	{
    	     playCutscene2 = true;
	}

	
	else if (iSubObjective == 2)
	{
	     propRef toTeleport = getDriverVehicle( player);
	     propTeleportToProp( toTeleport, propRefFromName("cheatDOF"));     
	     removeObjectiveIndicatorFromProp(propRefFromName("vmTrig5")); 
	     SetObjectiveTimer(2, iObjective);
	}

        else
	{ 
	     activateTalkingHead(0.0f, 1.72f, -1.3f, 0.0f, 1.72f, -2.0f, 3.0f, "characters/heroes/shara/scenes/shara", "AN_lnd_tlk01", "You did it X2! Get out quick, it's orbit is deteriating fast, not to mention exploding!. We'll meet you on the planets surface");
	     addNewObjectiveIndicatorToProp(propRefFromName("vmTrig5"), k_objectiveIndicatorType_mainObjective);
	     removeObjectiveIndicatorFromProp(propRefFromName("shipyardInd"));
	     SetNumSubObjectives(2, iObjective);
	     SetObjectiveTriggered(true, iObjective);
	}	
    }
    
///////////////////////////OBJECTIVE 6: Regroup with the Rebels on the Ground at the Ruins

    else if (iObjective == 6)
    {   
	if (iSubObjective == 1)
	{
	    lib_SetupGroupZone(cObjectiveName, "impsBattle", "impBattle1", "battle1", k_objtype_clear_area);
	    lib_SetupGroupZone(cObjectiveName, "villageRebs", "rebBattle1", "battle1", k_objtype_hold_area);
	    lib_SetupGroupZone(cObjectiveName, "playerGrp", "rebBattle1", "battle1", k_objtype_hold_area);
	    ActivateSpawner("impBattle3");
	    ActivateSpawner("impBattle1");
	    SetObjectiveKills(3, iObjective);
	}

	else if (iSubObjective == 2)
	{
	    lib_SetupGroupZone(cObjectiveName, "impsBattle", "impBattle2", "battle2", k_objtype_hold_area);
	    lib_SetupGroupZone(cObjectiveName, "villageRebs", "rebBattle2", "battle2", k_objtype_clear_area);
	    lib_SetupGroupZone(cObjectiveName, "playerGrp", "rebBattle2", "battle2", k_objtype_clear_area);
	    ActivateSpawner("impBattle2");
	    SetObjectiveKills(4, iObjective);
	}

	else if (iSubObjective == 3)
	{
	    lib_SetupGroupZone(cObjectiveName, "impsBattle", "impBattle3", "battle3", k_objtype_clear_area);
	    lib_SetupGroupZone(cObjectiveName, "villageRebs", "rebBattle3", "battle3", k_objtype_hold_area);
	    lib_SetupGroupZone(cObjectiveName, "playerGrp", "rebBattle3", "battle3", k_objtype_hold_area);
	    ActivateSpawner("impBattle4");
	    ActivateSpawner("impBattle5");
	    SetObjectiveKills(6, iObjective);
	}

	else if (iSubObjective == 4)
	{
	    lib_SetupGroupZone(cObjectiveName, "impsBattle", "impBattle3", "battle3", k_objtype_hold_area);
	    lib_SetupGroupZone(cObjectiveName, "villageRebs", "rebBattle3", "battle3", k_objtype_clear_area);
	    lib_SetupGroupZone(cObjectiveName, "playerGrp", "rebBattle3", "battle3", k_objtype_clear_area);
	    DeactivateSpawner("impBattle1");
	    DeactivateSpawner("impBattle2");
	    DeactivateSpawner("impBattle3");
	    DeactivateSpawner("impBattle4");
	    DeactivateSpawner("impBattle5");
	    addNewObjectiveIndicatorToProp(propRefFromName("vmTrig6_5"), k_objectiveIndicatorType_mainObjective);
	}

	else
	{
//	    SpawnInVehicle(player, propRefFromName("cheatDOF"), StringToChar16("ywing_fighter"), 5, k_seatPos_driver );
	    
	    lib_SetupGroupZone(cObjectiveName, "impsBattle", "impBattle1", "battle1", k_objtype_hold_area);
	    lib_SetupGroupZone(cObjectiveName, "villageRebs", "rebBattle1", "battle1", k_objtype_hold_area);
	    lib_SetupGroupZone(cObjectiveName, "playerGrp", "rebBattle1", "battle1", k_objtype_hold_area);
	    ActivateSpawner("villageRebs");
	    ActivateSpawner("playerGrp");
	    ActivateSpawner("firstImp1");
	    ActivateSpawner("firstImp2");
	    ActivateSpawner("firstImp3");
	    ActivateSpawner("firstImp4");
	    ActivateSpawner("firstImp5");
	    ActivateSpawner("firstImp6");
	    SetNumSubObjectives(4, iObjective);
	    SetObjectiveTriggered(true, iObjective);
	}
    }
	
////////////////////////////OBJECTIVE 7: Gain Entry to the Base Through the Back Door

    else if (iObjective == 7)
    {
	if (iSubObjective == 1)
	{
	    ActivateSpawner("Spwn-7_2");
	    lib_SetupGroupZone(cObjectiveName, "playerGrp", "sharaHide", "sharaHide", k_objtype_hold_area);
	    SetObjectiveTriggered(true, iObjective);
	}

	else if (iSubObjective == 2)
	{
	    activateTalkingHead(0.0f, 1.72f, -1.3f, 0.0f, 1.72f, -2.0f, 8.0f, "characters/heroes/shara/scenes/shara", "AN_lnd_tlk01", "Woah, nice pet... I can't get close enough to the door with him in the way. We're going to have to take it down");
	}

	else if (iSubObjective == 3)
	{
	    activateTalkingHead(0.0f, 1.72f, -1.3f, 0.0f, 1.72f, -2.0f, 8.0f, "characters/heroes/shara/scenes/shara", "AN_lnd_tlk01", "Good job X2! Your training certainly paid off. B squad, regroup on our position. I'll get this door open in the meantime");
	    setVMPropActive(propRefFromName("vmProp1"), true);  	
	}

	else if (iSubObjective == 4)
	{
	    DeactivateSpawner("impReinfGrp"); 
	    BFKillAllNPCsFromSpawner("impReinfGrp");
	    SetObjectiveTimer(9, iObjective);
	}
	
	else
	{
	    removeObjectiveIndicatorFromProp(propRefFromName("vmTrig6_5"));
	    addNewObjectiveIndicatorToProp(propRefFromName("eventTrig1"), k_objectiveIndicatorType_mainObjective);
	    lib_SetupGroupZone(cObjectiveName, "playerGrp", "caves", "caves", k_objtype_hold_area);
	    activateTalkingHead(0.0f, 1.72f, -1.3f, 0.0f, 1.72f, -2.0f, 8.0f, "characters/heroes/shara/scenes/shara", "AN_lnd_tlk01", "The base is too heavily guarded for a frontal attack. We're going to have to go throught the caves and find a backdoor. 'A' squad you're with X2 and myself, 'B' squad keep any Imperials off our backs");
	    SetObjectiveTriggered(true, iObjective);
	    SetNumSubObjectives(4, iObjective);
	}
    }
///////////////////////////OBJECTIVE 8: Access Imperial Databank

    else if (iObjective == 8)
    {
	if (iSubObjective == 1)
	{  
	    enableTrigger(propRefFromName("compHackTrig"));
	    removeObjectiveIndicatorFromProp(propRefFromName("sharaX1Hack"));
	}
	
	else
	{
	    activateTalkingHead(0.0f, 1.72f, -1.3f, 0.0f, 1.72f, -2.0f, 8.0f, "characters/heroes/shara/scenes/shara", "AN_lnd_tlk01", "There we go, lets get inside and find out what's going on here. After you X2");
	    enableTrigger(propRefFromName("eventTrig1"));
	    ActivateSpawner("Spwn-8");
	    lib_SetupGroupZone(cObjectiveName, "Spwn-8", "cntrlRmHold", "cntrlRmTarget", k_objtype_hold_area);
	    lib_SetupGroupZone(cObjectiveName, "villageRebs", "cntrlRmHold", "cntrlRmTarget", k_objtype_clear_area);
	    lib_SetupGroupZone(cObjectiveName, "playerGrp", "cntrlRmHold", "cntrlRmTarget", k_objtype_clear_area);
	    removeObjectiveIndicatorFromProp(propRefFromName("eventTrig1"));
	    addNewObjectiveIndicatorToProp(propRefFromName("sharaX1Hack"), k_objectiveIndicatorType_mainObjective);
	    SetObjectiveKillSpawners(1, iObjective);
	    SetNumSubObjectives(1, iObjective);
	}
    }
	
////////////////////////////////////OBJECTIVE 9: Locate the Nightsister Cloning Chambers

    else if (iObjective == 9)
    {
	if (iSubObjective == 1)
	{
	    propDelete(propRefFromName("sharaJoin"));
	    removeObjectiveIndicatorFromProp(propRefFromName("vmTrig9"));
	    addNewObjectiveIndicatorToProp(propRefFromName("shara2Join"), k_objectiveIndicatorType_mainObjective);
	    activateTalkingHead(0.0f, 1.72f, -1.3f, 0.0f, 1.72f, -2.0f, 3.0f, "characters/heroes/shara/scenes/shara", "AN_lnd_tlk01", "Im on my way X2");
	    lib_SetupGroupZone(cObjectiveName, "shara2Grp", "chmbrCor", "chmbrCor", k_objtype_hold_area);
    	}
	
	else if (iSubObjective == 2)
	{
	    activateTalkingHead(0.0f, 1.72f, -1.3f, 0.0f, 1.72f, -2.0f, 3.0f, "characters/heroes/shara/scenes/shara", "AN_lnd_tlk01", "Come on X2 it'll be just through this door.");
	    chrAIJoinGroup( propRefFromName("shara2Join"), "player" );
	    enableTrigger(propRefFromName("eventTrig9"));
	    removeObjectiveIndicatorFromProp(propRefFromName("shara2Join"));
	    addNewObjectiveIndicatorToProp(propRefFromName("dofProp_1"), k_objectiveIndicatorType_mainObjective);
	    SetObjectiveTriggered(true, iObjective);
	}

	else if (iSubObjective == 3)
	{ 
	    lib_SetupGroupZone(cObjectiveName, "Spwn-10", "chmbrCor", "chmbrCor", k_objtype_hold_area);
	    ActivateSpawner("bfStrmTrprSp34");
	    ActivateSpawner("bfStrmTrprSp35");
	    ActivateSpawner("bfStrmTrprSp36");
	    SetObjectiveTriggered(true, iObjective);
	}
	
	else
	{
	    ActivateSpawner("shara2Grp");
	    addNewObjectiveIndicatorToProp(propRefFromName("vmTrig9"), k_objectiveIndicatorType_mainObjective);
	    enableTrigger(propRefFromName("eventTrig11"));
	    enableTrigger(propRefFromName("eventTrig8"));
	    enableTrigger(propRefFromName("eventTrig5"));
	    enableTrigger(propRefFromName("eventTrig7"));
	    removeObjectiveIndicatorFromProp(propRefFromName("sharaX1Hack"));
	    ActivateSpawner("balconyGrp");
	    ActivateSpawner("roofGrp");
	    ActivateSpawner("stairsGrp");
	    lib_SetupGroupZone(cObjectiveName, "balconyGrp", "balcony", "roofTarget", k_objtype_hold_area);
	    lib_SetupGroupZone(cObjectiveName, "roofGrp", "roofHold", "roofTarget", k_objtype_hold_area);
	    lib_SetupGroupZone(cObjectiveName, "stairsGrp", "stairwellHold", "stairwellTarget", k_objtype_hold_area);
	    SetObjectiveTriggered(true, iObjective);
	    SetNumSubObjectives(3, iObjective);
	}
    }

/////////////////////////////////////////OBJECTIVE 10: Defeat the Nightsister Clones

    else if (iObjective == 10)
    {
	removeObjectiveIndicatorFromProp(propRefFromName("dofProp_1"));
	ActivateSpawner("Spwn-10");
	activateTalkingHead(0.0f, 1.72f, -1.3f, 0.0f, 1.72f, -2.0f, 3.0f, "characters/heroes/shara/scenes/shara", "AN_lnd_tlk01", "Look out! Theyve got lightsabres!");
	lib_SetupGroupZone(cObjectiveName, "Spwn-10", "cloneRmHold", "cloneRmHold", k_objtype_hold_area);
	SetObjectiveKillSpawners(1, iObjective);
    }

    else if (iObjective == 11)
    {
	if (iSubObjective == 1)
	{    
	    bEndLevel = true;
	}

	else
	{
	    playCutscene = true;
	    SetNumSubObjectives(1, iObjective);
	}
    }

logStr("-------------> ObjectiveSetup End");    
    return true;    
    
}

///////////////This Script Actions

//Fade ins
wholeScreenFade(0.0f, 1.0f, false);
waitForGameTime(0.1f);
ScriptHasStarted(); //Do any setups
waitForGameTime(1.0f);
wholeScreenFade(1.0f, 0.0f, false);

//Main game loop
while(!bEndLevel)
{
    int iNumActive = BFObjectiveGetNumActive();
    int i = 0;
    ProcessCallbacks();
    ObjectiveSetupCheck();

    for (i=0; i<iNumActive; i++)
    {
        int iObjective = BFObjectiveGetNumForNthActive(i);
        ObjectiveTests(iObjective);        
        waitForGameTime(0.01f);
    }

    waitForGameTimeOrLVChange(0.5f, "iObjLV", "iCBLV");
    logStr("tick");
    logInt(iObjective);    
}

NextLevel("mustafar/mustafar_story.res");//kashyyyk/kashyyyk_story.res");




