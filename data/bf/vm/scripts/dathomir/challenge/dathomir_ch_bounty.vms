// vim: set syntax=c :

///////////////////////////////////
/*
    dathomir_chlg_bounty.vms

    Created By Kieran Teasdale
    Please do not modify without asking me!
    or comment where you have modified

*/
///////////////////////////////////

/////////////MAKE SURE TO INCLUDE A BFStorylevelVarProp in your level

boolean Skip = false;

// Declare Any Characters So They Can Be Used Later
chrRef player = chrRefFromName("player_0");

/////////////////////////////          INCLUDE DEFAULTS           /////////////////

callback void playerKilled(int killerId, int iResult, int iSpare)
{
    int iNumActive = BFObjectiveGetNumActive();
    int i = 0;

    propRef pChr;
    pChr = propRefFromInt(iSpare);
    
    propRef pKiller;
    pKiller = propRefFromInt(killerId);    
    
    if (isPlayerProp(pKiller) && iResult == 1)
    {
	int class = chrGetClass(pChr);
	
	if (class == 0)
	{
	    int snipercombo = ChallengeGetSniperKillCombo ();
	    ChallengeAddScore(10 * snipercombo );
	    AddVMDebugHUDMsg("Killed Soilder", 1, "test_objective_message");
	}
	else if (class == 1)
	{
	    int snipercombo = ChallengeGetSniperKillCombo ();
	    ChallengeAddScore(20 * snipercombo );
	    AddVMDebugHUDMsg("Killed Heavy", 1, "test_objective_message");
	}
	else if (class == 2)
	{
	    int snipercombo = ChallengeGetSniperKillCombo ();
	    ChallengeAddScore(50 * snipercombo );
	    AddVMDebugHUDMsg("Killed Sniper", 1, "test_objective_message");
	}
	else if (class == 3)
	{
	    int snipercombo = ChallengeGetSniperKillCombo ();
	    ChallengeAddScore(50 * snipercombo );
	    AddVMDebugHUDMsg("Killed Engineer", 1, "test_objective_message");
	}
	
	else if (class == 4)
	{
	    int snipercombo = ChallengeGetSniperKillCombo ();
	    ChallengeAddScore(100 * snipercombo );
	    AddVMDebugHUDMsg("Killed Melee", 1, "test_objective_message");
	}
	else
	{
	}
    }

    //TODO - look into combo count for kills in a row (headshots?)  
    
    for (i=0; i<iNumActive; i++)
    {
	int iActive = BFObjectiveGetNumForNthActive(i);
	if (lib_playerKilled(killerId, iResult, iSpare, iActive)) 
	{
	    nextObjective(iActive);
	}
    }
    //if (lib_playerKilled(victimId, killerId, iOppTeam)) nextObjective();    
}

function void Trigger(char16 inTriggerProp)
{   
    int iResult = 0;
    int iNumActive = BFObjectiveGetNumActive();
    int i = 0;
    int iActive = 0;
    for (i=0; i<iNumActive; i++)
    {
        iActive = BFObjectiveGetNumForNthActive(i);
        iResult = lib_triggeredProp(inTriggerProp, iActive);
        iResult = ObjectiveTriggerTests(iActive, inTriggerProp, iResult);

        if (iResult >= 1) nextObjective(iActive);
    }
}

callback int triggeredProp(int inType, char16 inTriggerProp, int pId)
{   
    Trigger(inTriggerProp);     
    return 0;
}
function void nextObjective(int iObjNum) 
{    
    int result =   lib_nextObjective(iObjNum);

    if(result==1)
    {
	//if next objective returns 1 it has updated a core objective and automatically moved us onto the next
	//so do objective setup with current objective
	if (!Skip)
	{
	    int iObjective = BFObjectiveGetCurrent();//GetLevelVarInt("mObjective");
	    char16 cName = BFObjectiveGetName(iObjective);
	    ObjectiveSetup( cName, iObjective, BFObjectiveGetSub(iObjective));            
	}
    }

    if(result==2)
    {
	//if nextobjective returns 2 it has updated a bonus objective so we will want to 
	//objective setup with the objective we passed to next objective
	if (!Skip)
	{
	    char16 cName = BFObjectiveGetName(iObjNum);
	    ObjectiveSetup( cName, iObjNum, BFObjectiveGetSub(iObjNum));            
	}
    }
}

function void JumpToObjective(int iStartObj, boolean Skiping)
{       
    Skip = Skiping;
    ResetProps();

    if (Skip)
    {
	BFObjectiveSetJumpTo(iStartObj);
    }

    Skip = false;
    nextObjective(BFObjectiveGetCurrent());

    char16 tSpawn;
    tSpawn = LevelVarToChar16("mCurrentSpawner");
    if (propExists(propRefFromChar16(tSpawn)))
        propTeleportToProp(getPlayerPropRefFromID(GetPlayerId()), propRefFromChar16(tSpawn));        

    logStr("Jumped To Objective");
    logInt(BFObjectiveGetCurrent());
}

callback void ObjectiveTimeExpired(char16 objName)
{   
    //if (lib_ObjTimeExpired()) nextObjective();

    int objNum = 0;
    objNum = BFObjectiveGetNumber(objName);   
    if (lib_ObjTimeExpired(objNum))
    {
		nextObjective(objNum);
    }
}

callback void playerSpawned(char16 teamName, int playerId)
{
    //int iObjective = GetLevelVarInt("mObjective");
    logStr("teamName: ");
    logchar16(teamName);
}

callback void finiteSpawnerComplete(char16 propId) 
{
    AddVMDebugHUDMsg("FINITE SPAWNER IS DEADED", 1, "test_objective_message");
}

/////////////////////////////          DEFAULTS END            /////////////////

callback void gameHasStarted()
{           
}

function void ResetProps()
{
	// e.g    disableTrigger(propRefFromName("DeathTrigger"));       
}

function void ScriptHasStarted()
{
    //SetLevelVarsBFStory("obj_Mus", "vmTrig");
    SetBFStoryPrefixes("obj_Dat_Ch_A", "vmTrig");
 // obj_Mus is the link into the bf/mgrsetup/objectivesmgr.res file.
 // It will look for objectives in objectivesmgr: obj_Mus1, obj_Mus2 etc. so rename it for your level
 // vmTrig is the reference for trigger prop names in the editor, e.g. first trigger should be renamed to vmTrig1, then vmTrig2 etc
 // Remember to paste into each trigger props action variable:
 // propHasEnteredTriggerScript = "gamemodeTriggerSimple(triggerPropRef, thisPropRef);"

    ResetObjectives("mObjTmp", 2);

    //Reset CPs, Spawners, etc
    ResetProps();

    JumpToObjective(1, true);
}

function int ObjectiveTriggerTests(int iObjective, char16 inTriggerProp, int iResult) 
{
    int iSubObjective = BFObjectiveGetSub(iObjective);

    //e.g for an alternate route
    if (iObjective == 1)
    {
        //if (iResult == 1) //For alternate route jump, else continue with no change
           // JumpToObjective(10, true);
    }

    //No Change
    return iResult;
}

/////////////////////////////          OBJECTIVE TESTS            /////////////////

// We can test if certain objectives have been completed here, rather than trigger them immediately
// This is because sometimes it is much easier on the CPU to test here rather than set up triggers
// Also we can do complex objective tests here which aren't otherwise possible (e.g. if prop is destroyed)
function void ObjectiveTests(int iObjective) 
{
    //Tests for each game tick
     
    int iSubObjective = BFObjectiveGetSub(iObjective);

    // For The Duration Of Objective 1 - Locate And Capture Your Mark
    if (iObjective == 1)
    {       

    }

    // For The Duration Of Objective 2 - Mission Complete
    else if (iObjective == 2)
    {

    }
}

/////////////////////////////          OBJECTIVES            /////////////////

// MAIN OBJECTIVE SETUP FUNCTION (most of your code will go here)
// Set up what each objective actually is (the code for it anyway) and trigger events happening as player completes objectives
// Objective description strings and numbers are in mgrsetup/objectivesmgr.res + strings localisation file

function void ObjectiveSetup(char16 cObjectiveName, int iObjective, int iSubObjective)
{
	////////////////////////////////////////////////////////////////
	////////// OBJECTIVE 1 - Locate And Capture Your Mark //////////
	////////////////////////////////////////////////////////////////    
    if (iObjective == 1) 
    { 
        if (iSubObjective == 1)
        {       
	        AddVMDebugHUDMsg("I'm in Sub-Objective 1-1!", 1, "test_objective_message");
	        ActivateSpawner("Spwn-1_2");
	        removeObjectiveIndicatorFromProp(propRefFromName("Han_Look1"));  		// Remove previous HUD marker
            SetObjectiveTimer(1.0f, iObjective);   			// Objective Timer
   		}
   		else if (iSubObjective == 2)
   		{
	   		AddVMDebugHUDMsg("I'm in Sub-Objective 1-2!", 1, "test_objective_message");            
            SetObjectiveKillSpawners(1, iObjective);		// Objective Completes When Everyone From Spawner Killed
   		}
        else
        { 
	        // Team 1 (Enemy) Battle Commands  
        	BFNPCTeamObjectiveSetType(cObjectiveName, 0, k_objtype_attack_prop);
        	BFNPCTeamObjectiveSetTargetProp(cObjectiveName, 0, chrRefFromName("player_0"), 40, 100);
        	
        	addNewObjectiveIndicatorToProp(propRefFromName("Han_Look1"), k_objectiveIndicatorType_mainObjective);  // Add Indicator to Han Solo
        	
	        AddVMDebugHUDMsg("I'm in Objective 1!", 1, "test_objective_message");
	        SetNumSubObjectives(2, iObjective); 			// Set Number Of Sub-Objectives
            SetObjectiveTriggered(true, iObjective);		// Triggered Objective
        }
    }

    ////////////////////////////////////////////////////
    ////////// OBJECTIVE 2 - Mission Complete //////////
    ////////////////////////////////////////////////////
    else if (iObjective == 2) 
    { 
		if (iSubObjective == 1)
        { 
        	wholeScreenFade(3.0f, 1.0f, false); 	// Screen Fade Down To Black
        	SetObjectiveTimer(3, iObjective); 		// Objective Timer
    	}
	    else if (iSubObjective == 2)
        {
	    	ChallengeEnd();
    	}
    	else
    	{
        	AddVMDebugHUDMsg("Challenge Complete!", 1, "test_objective_message");
        	endOfGameWinText("Challenge Complete!");
        	SetObjectiveTimer(3, iObjective); 			// Objective Timer
        	SetNumSubObjectives(2, iObjective); 		// Set Number Of Sub-Objectives
    	}
    } 
}

AllowCallback(CALLBACK_PlayerSpawned, playerSpawned);
AllowCallback(CALLBACK_PlayerKilledBF, playerKilled);
AllowCallback(CALLBACK_TriggeredProp, triggeredProp);
AllowCallback(CALLBACK_ObjectiveTimeExpired, ObjectiveTimeExpired);
AllowCallback(CALLBACK_GameHasStarted, gameHasStarted);
AllowCallback(CALLBACK_FSpawnerComplete, finiteSpawnerComplete);


///////////////This Script Actions

wholeScreenFade(0.0f, 1.0f, false); 		// Screen Set To Black For Fade At Level Start
	        
waitForGameTime(0.1f);

ScriptHasStarted(); //Do any setups
ChallengeBegin();
wholeScreenFade(3.0f, 0.0f, false); 		// Screen Fade In From Black For Level Start

//Main game loop
while(1)
{
    int iNumActive = BFObjectiveGetNumActive();
    int i = 0;

    for (i=0; i<iNumActive; i++)
    {
	int iObjective = BFObjectiveGetNumForNthActive(i);
	ObjectiveTests(iObjective);

	logStr("tick");
	logInt(iObjective);

    }

    waitForGameTime(1.0f);
}