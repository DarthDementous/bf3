// vim: set syntax=c :

/////////////////////////////////////////
//
//    TATOOINE ASSAULT MODE
//
/////////////////////////////////////////

/////////////MAKE SURE TO INCLUDE A BFStorylevelVarProp in your level

int m_attackingTeamNum = 1;
int m_defendingTeamNum = 0;

//Declare the CPs
propRef attk_phase1_cp = propRefFromName( "AttkPhase1_CP" );
propRef def_phase1_cp = propRefFromName( "DefPhase1_CP" );

propRef def_phase2_cp = propRefFromName( "DefPhase2_CP" );

propRef conf_phase3_cp = propRefFromName( "cp3" );

propRef attk_phase3_cp = propRefFromName( "AttkPhase3_CP" );
propRef def_phase3_cp = propRefFromName( "DefPhase3_CP" );

propRef attk_phase4_cp = propRefFromName( "cp_final" );

// Republic Frigate
propRef frigate = propRefFromName("cisfrig");

// Ground AA Turrets
propRef aaTurret1 = propRefFromName("H_Tur_Veh1");
propRef aaTurret2 = propRefFromName("H_Tur_Veh2");
propRef aaTurret3 = propRefFromName("H_Tur_Veh3");

// Spider Droid PropRef
propRef spider_droid = propRefFromName("cis_spiderdrd");

// Republic Gunship
propRef rep_gunship = propRefFromName("obj4_gunship");

// Ion Cannon Console
propRef ion_cannon = propRefFromName("ion_cannon");

// CIS Landing Ships
propRef takeoffship;
propRef landingship;
propRef landingship2;

boolean Skip = false;

char16 secondary1 = StringToChar16("obj_TatAss5");
char16 secondary2 = StringToChar16("obj_TatAss6");

int sec2turret1_destroyed = 0;
int sec2turret2_destroyed = 0;
int sec2turret3_destroyed = 0;

///////////// Include Defaults //////////////////////////////////////////////

callback void playerKilled(int victimId, int killerId, int iOppTeam)
{
    //if (lib_playerKilled(victimId, killerId, iOppTeam)) nextObjective();
    int iNumActive = BFObjectiveGetNumActive();
    int i = 0;

    for (i=0; i<iNumActive; i++)
    {
	int iActive = BFObjectiveGetNumForNthActive(i);
	if (lib_playerKilled(victimId, killerId, iOppTeam, iActive)) 
	{
	    nextObjective(iActive);
	}
    }
}

callback int triggeredProp(int inType, char16 inTriggerProp, int pId)
{    
    // Check if the player has got into an escape pod

    int iNumActive = BFObjectiveGetNumActive();
    int i = 0;
    int iActive = 0;

    for (i=0; i<iNumActive; i++)
    {
	iActive = BFObjectiveGetNumForNthActive(i);

	if (lib_triggeredProp(inTriggerProp, iActive) >= 1)
	{
	    nextObjective(iActive);
	}
    }
    
    return 0;
}

function void nextObjective(int inObjNum) 
{    
    int result =   lib_nextObjective(inObjNum);

    if(result==1)
    {
	//if next objective returns 1 it has updated a core objective and automatically moved us onto the next
	//so do objective setup with current objective
	if (!Skip)
	{
	    int iObjective = BFObjectiveGetCurrent();//GetLevelVarInt("mObjective");
	    char16 cName = BFObjectiveGetName(iObjective);
	    ObjectiveSetup( cName, iObjective, BFObjectiveGetSub(iObjective));            
	}
    }

    if(result==2)
    {
	//if nextobjective returns 2 it has updated a bonus objective so we will want to 
	//objective setup with the objective we passed to next objective
	if (!Skip)
	{
	    char16 cName = BFObjectiveGetName(inObjNum);
	    ObjectiveSetup( cName, inObjNum, BFObjectiveGetSub(inObjNum));            
	}
    }
}

function void JumpToObjective(int iStartObj, boolean Skiping)
{       
    Skip = Skiping;
//  ResetProps();     
    SetNumSubObjectives(0, iStartObj);
    if (Skip)
    {
	BFObjectiveSetJumpTo(iStartObj);
    }
    
    Skip = false;
    nextObjective(BFObjectiveGetCurrent());
    
    char16 tSpawn;
    tSpawn = LevelVarToChar16("mCurrentSpawner");
    if (propExists(propRefFromChar16(tSpawn)))
        propTeleportToProp(getPlayerPropRefFromID(GetPlayerId()), propRefFromChar16(tSpawn));        
    
    logStr("Jumped To Objective");
    logInt(BFObjectiveGetCurrent());
}

callback void ObjectiveTimeExpired(char16 objName)
{   
    int objNum = 0;
    objNum = BFObjectiveGetNumber(objName);   
    if (lib_ObjTimeExpired(objNum))
    {
	nextObjective(objNum);
    }
   // if (lib_ObjTimeExpired()) nextObjective();
}

callback void playerSpawned(char16 teamName, int playerId)
{
    propRef p = getPlayerPropRefFromID(playerId);    
}

callback void finiteSpawnerComplete(char16 propId) 
{

}


/////// Defaults END /////////////////////////////////////////////


callback void gameHasStarted()
{           
   // Let the gamemode know which team is attacking and which is defending
    BFSetAssaultTeamNumbers( m_attackingTeamNum, m_defendingTeamNum );  

    // Reset the spawners
    setTeamOfSpawnPropGroup( "DefPhase1_SG", -1 );
    setTeamOfSpawnPropGroup( "AttkPhase1_SG", -1 );
    
    setTeamOfSpawnPropGroup( "DefPhase2_SG", -1 );
    
    setTeamOfSpawnPropGroup( "AttkPhase3_SG", -1 );
    setTeamOfSpawnPropGroup( "DefPhase3_SG", -1 );
    
    // Make all CP's Neutral
    commandPostSetTeam(attk_phase1_cp, -1);
    commandPostSetTeam(def_phase1_cp, -1);     

    commandPostSetTeam(def_phase2_cp, -1); 
    
    commandPostSetTeam(conf_phase3_cp, -1); 

    commandPostSetTeam(attk_phase3_cp, -1); 
    commandPostSetTeam(def_phase3_cp, -1); 

    commandPostSetTeam(attk_phase4_cp, -1);     

    // Make all the CP's invisible?
    PropSetVisible(0, attk_phase1_cp);
    PropSetVisible(0, def_phase1_cp);    

    PropSetVisible(0, def_phase2_cp);
}

function void ScriptHasStarted()
{
    //SetLevelVarsBFStory("obj_TatAss", "vmTrig"); //Objective and trigger name for the level.
    SetBFStoryPrefixes("obj_TatAss", "vmTrig");
	    
    ResetObjectives("mObjTmp", 7);

    // Make the Droid Control Ship invincible to attack from the outside
    SetPropRefInvincible(propRefFromName("cruisership2S"), true);

    JumpToObjective(1, true); //start objective
}


function void ObjectiveTests(int iObjective) 
{
    //int iObjective = GetLevelVarInt("mObjective");
    int iSubObjective = BFObjectiveGetSub(iObjective);

    // Get the frigate health
    if (iObjective == 1)
    {
        if ((propGetHealthFraction(frigate)) <= 0.0f)
        {
	    nextObjective(iObjective);
	}
    }

    // Get the Ion Cannon health
    if (iObjective == 4)
    {
        if ((propGetHealthFraction(ion_cannon)) <= 0.0f)
        {
	    nextObjective(iObjective);
	}
    }

    // Republic Acclamator Exterior Turrets Bonus Objective
    if (iObjective == 5)
    {
    	if (CountMultipleAttachedProps(frigate) == 0)
	{
	    nextObjective(iObjective);

	    BFObjectiveRemoveBonus(secondary1, 5);
	}
    }

    // AA Turret Bonus Objective
    if (iObjective == 6)
    {
    	if (!sec2turret1_destroyed && !propValid(propRefFromName("H_Tur_Veh1")))
	{
	    sec2turret1_destroyed = 1;
	}
	else if (!sec2turret2_destroyed && !propValid(propRefFromName("H_Tur_Veh2")))
	{
	    sec2turret2_destroyed = 1;
	}
	else if (!sec2turret3_destroyed && !propValid(propRefFromName("H_Tur_Veh3")))
	{
	    sec2turret3_destroyed = 1;
	}
	else if (sec2turret1_destroyed && sec2turret2_destroyed && sec2turret3_destroyed)
	{ 
	    nextObjective(iObjective);
	}
    }

}

callback void shipReachedScriptedSplineSegment(propRef ship, propRef spline, int segment)
{

}


/////////////////////////////////////////
//
// OBJECTIVES
//
/////////////////////////////////////////

function void ObjectiveSetup(char16 cObjectiveName, int iObjective, int iSubObjective)
{
    if (iObjective == 1)	// Attack/Defend the Republic Frigate
    {
	setTeamOfSpawnPropGroup( "AttkPhase1_SG", 1 );	//Spawn ATTACKERS here
	setTeamOfSpawnPropGroup( "DefPhase1_SG", 0 );	//Spawn DEFENDERS here

	// Add objective indicator to the Frigate
	//addObjectiveIndicatorToProp(propRefFromName("cisfrig"), vector(0.f, 60.f, 0.f), vector(1.f, 1.f, 0.f)); // Add HUD Pointer
	addNewObjectiveIndicatorToProp(propRefFromName("cisfrig"), k_objectiveIndicatorType_mainObjective); 
	
	// Over the main ground area
	BFAddFlyingAIPatrolZone(vector(1088.68f, 1196.0f, -732.39f), 500.0f);
	
	// TODO: Tell the AI to attack the frigate
	
	commandPostSetTeam(attk_phase1_cp, 1);
	commandPostSetTeam(def_phase1_cp, 0); 

	// For testing, enable the active CP's
	PropSetVisible(1, attk_phase1_cp);
	PropSetVisible(1, def_phase1_cp);

	// Gun Turret sub objective
	BFObjectiveAddBonus(secondary1, 5);
	ObjectiveSetup(secondary1, 5, 0);
    }
    else if (iObjective == 2)	// Land in the Landing Bay
    {
	setTeamOfSpawnPropGroup( "AttkPhase1_SG", 1 );	//Spawn ATTACKERS here
	setTeamOfSpawnPropGroup( "DefPhase2_SG", 0 );	//Spawn DEFENDERS here
	
	// Remove indicator from frigate
	removeObjectiveIndicatorFromProp(propRefFromName("cisfrig"));	

	BFObjectiveRemoveBonus(secondary1, 5);

	// Point at the Landing Bay
	addNewObjectiveIndicatorToProp(propRefFromName("obj2_dof"), k_objectiveIndicatorType_mainObjective); 	
	
	// Neutralise old CPs
	commandPostSetTeam(attk_phase1_cp, -1);
	commandPostSetTeam(def_phase1_cp, -1); 

	commandPostSetTeam(attk_phase3_cp, 0); 

//	commandPostSetTeam(attk_phase1_cp, 1);
//	commandPostSetTeam(def_phase1_cp, 0);

	SetObjectiveTriggered(true, iObjective);

	// Gun Turret sub objective
	BFObjectiveAddBonus(secondary2, 6);
	ObjectiveSetup(secondary2, 6, 0);
    }
    else if (iObjective == 3)	// Deactivate the Short-Wave Communication antenna
    {
	setTeamOfSpawnPropGroup( "AttkPhase3_SG", 1 );	//Spawn ATTACKERS at the Landing Bay
	setTeamOfSpawnPropGroup( "DefPhase3_SG", 0 );	//Spawn DEFENDERS at the Republic Base
	
	removeObjectiveIndicatorFromProp(propRefFromName("obj2_dof"));	
	
	// Add objective indicator to the Communication Beacon
	addNewObjectiveIndicatorToProp(propRefFromName("vmTrig3"), k_objectiveIndicatorType_mainObjective); 	

	// Neutralise old CP
	commandPostSetTeam(attk_phase3_cp, -1); 
	// Fight over the CP near the comms antenna
	commandPostSetTeam(conf_phase3_cp, 0); 
	
	SetObjectiveTriggered(true, iObjective);
    }
    else if (iObjective == 4)	// Destroy the Ion Cannon Controls
    {
	if (iSubObjective == 1)
	{
	    removeObjectiveIndicatorFromProp(propRefFromName("ion_cannon"));	

	    // The End
	    CompleteLevel();
	}
	else
	{
	    setTeamOfSpawnPropGroup( "AttkPhase3_SG", 1 );	//Spawn ATTACKERS at the Landing Bay
	    setTeamOfSpawnPropGroup( "DefPhase3_SG", 0 );	//Spawn DEFENDERS at the Republic Base
	
	    // Remove the indicator from Communications Array
	    removeObjectiveIndicatorFromProp(propRefFromName("vmTrig3"));	

	    // Add an arrow to the Ion Cannon
	    addNewObjectiveIndicatorToProp(propRefFromName("ion_cannon"), k_objectiveIndicatorType_mainObjective); 	

	    // Neutralise old CP
	    commandPostSetTeam(conf_phase3_cp, -1); 

	    commandPostSetTeam(attk_phase4_cp, 0);

    	    SetNumSubObjectives(1, iObjective);	    
	}
    }
    else if (iObjective == 5)	// Secondary Objective 1 - Exterior Gun Turrets
    {
	// Add pointer to prop
    
    }
    else if (iObjective == 6)	// Secondary Objective 2 - Ground AA Turrets
    {
	BFObjectiveRemoveBonus(secondary1, 5);	
	
	addNewObjectiveIndicatorToProp(aaTurret1, k_objectiveIndicatorType_bonusObjective); 	
	addNewObjectiveIndicatorToProp(aaTurret2, k_objectiveIndicatorType_bonusObjective); 	
	addNewObjectiveIndicatorToProp(aaTurret3, k_objectiveIndicatorType_bonusObjective); 	
    }
    else
    {
	// The End
        CompleteLevel();
    }
}

AllowCallback(CALLBACK_PlayerSpawned, playerSpawned);
AllowCallback(CALLBACK_PlayerKilledBF, playerKilled);
AllowCallback(CALLBACK_TriggeredProp, triggeredProp);
AllowCallback(CALLBACK_ObjectiveTimeExpired, ObjectiveTimeExpired);
AllowCallback(CALLBACK_GameHasStarted, gameHasStarted);
AllowCallback(CALLBACK_FSpawnerComplete, finiteSpawnerComplete);
AllowCallback(CALLBACK_ShipReachedScriptedSplineSegment, shipReachedScriptedSplineSegment);


////////////////////////////////////////////
//
// GAME LOOP
//
////////////////////////////////////////////

//waitForGameTime(2.0f);

ScriptHasStarted(); //Do any setups

//Main game loop
while(1)
{
    int iNumActive = BFObjectiveGetNumActive();
    int i = 0;

    for (i=0; i<iNumActive; i++)
    {
	int iObjective = BFObjectiveGetNumForNthActive(i);
	ObjectiveTests(iObjective);
    }

    logStr("tick");
    waitForGameTime(1.0f);

}


